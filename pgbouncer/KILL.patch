# HG changeset patch
# User Michael Tharp <mtharp@rpath.com>
# Date 1267127749 18000
# Node ID 09e6d0cb3fc020d804fab94be618fe50db66777b
# Parent  60c10fe33f0c37eb0640e660b10b5df0574c8f6a
Add KILL command to pause a db and terminate all connections.

diff --git a/include/janitor.h b/include/janitor.h
--- a/include/janitor.h
+++ b/include/janitor.h
@@ -21,4 +21,5 @@
 void resume_all(void);
 void per_loop_maint(void);
 bool suspend_socket(PgSocket *sk, bool force)  _MUSTCHECK;
+void kill_pool(PgPool *pool);
 
diff --git a/src/admin.c b/src/admin.c
--- a/src/admin.c
+++ b/src/admin.c
@@ -904,6 +904,45 @@
 	return true;
 }
 
+/* Command: KILL */
+static bool admin_cmd_kill(PgSocket *admin, const char *arg)
+{
+	List *item, *tmp;
+	PgDatabase *db;
+	PgPool *pool;
+
+	if (!admin->admin_user)
+		return admin_error(admin, "admin access needed");
+
+	if (cf_pause_mode)
+		return admin_error(admin, "already suspended/paused");
+
+	if (!arg[0])
+		return admin_error(admin, "a database is required");
+
+	log_info("KILL '%s' command issued", arg);
+	db = find_database(arg);
+	if (db == NULL) {
+		db = register_auto_database(arg);
+		if (db == NULL) {
+			return admin_error(admin, "no such database: %s", arg);
+		} else {
+			slog_info(admin, "registered new auto-database for KILL: %s", arg);
+		}
+	}
+	if (db == admin->pool->db)
+		return admin_error(admin, "cannot kill admin db: %s", arg);
+
+	db->db_paused = 1;
+	statlist_for_each_safe(item, &pool_list, tmp) {
+		pool = container_of(item, PgPool, head);
+		if (pool->db == db)
+			kill_pool(pool);
+	}
+
+	return admin_ready(admin, "KILL");
+}
+
 /* extract substring from regex group */
 static void copy_arg(const char *src, regmatch_t *glist,
 		     int gnum, char *dst, unsigned dstmax)
@@ -1008,6 +1047,7 @@
 }
 
 static struct cmd_lookup cmd_list [] = {
+	{"kill", admin_cmd_kill},
 	{"pause", admin_cmd_pause},
 	{"reload", admin_cmd_reload},
 	{"resume", admin_cmd_resume},
diff --git a/src/janitor.c b/src/janitor.c
--- a/src/janitor.c
+++ b/src/janitor.c
@@ -569,7 +569,7 @@
 	safe_evtimer_add(&full_maint_ev, &full_maint_period);
 }
 
-static void kill_pool(PgPool *pool)
+void kill_pool(PgPool *pool)
 {
 	const char *reason = "database removed";
 
