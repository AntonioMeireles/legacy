
#
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class IcedTea(AutoPackageRecipe):

    name = 'icedtea'
    version = '1.7.0.0+r381'

    if not Use.bootstrap:
        buildRequires = [
            'ant:runtime', 'ant:java',
            'xalan-j:java', 'xerces-j:java',
            'alsa-lib:devel', 'atk:devel', 'cairo:devel', 'expat:devel',
            'findutils:runtime', 'fontconfig:devel', 'freetype:devel',
            'giflib:devel', 'glib:devel', 'glibc:devel', 'glitz:devel', 'gtk:devel',
            'libgcc:devellib', 'libjpeg:devel', 'libpng:devel', 'libstdc++:devel',
            'libX11:devel', 'libxcb:devel', 'libXext:devel', 'libXi:devel',
            'libXrender:devel', 'libXtst:devel', 'nspr:devel', 'nspr:devel',
            'openmotif:devel', 'pango:devel', 'pkgconfig:devel', 'unzip:runtime',
            'xcb-util:devel', 'xulrunner:devel', 'zlib:devel', 'gcc:runtime', 
            'gtk:devel', 'zlib:devel', 'libX11:devel',
            'libXau:devel', 'libXdmcp:devel', 'libXp:devel',
            'libXinerama:devellib', 'libdmx:devel',
            'libICE:devel', 'libSM:devel', 'dbus:devel', 'dbus-glib:devellib',
            'dbus-glib:devel', 'intltool:runtime', 'intltool:devel',
            'glib:runtime', 'libXt:devel',
            'file:runtime', 'gettext:runtime', 'gcc-c++:runtime',
            'libxslt:runtime', 'which:runtime', 'procps:runtime', 'util-linux:runtime',
            'autoconf:runtime', 'automake:runtime',
            'libtool:devel', 'libtool:runtime', 'zip:runtime',
            'gnome-common:runtime', 'gnome-common:devel',
            'docbook-dtds:data', 'wget:runtime', 'cups:devel', 'icedtea-jdk:runtime[bootstrap]'
        ]

    # For loadInstalled()
    java_version = version.split('+')[0]
    java_release = version[:version.rindex('.')]

    java_name = 'java-'+java_release+'-icedtea'
    java_full_name = java_name+'-'+java_version
    java_home = '%(libdir)s/jvm/'+java_full_name
    jre_home = java_home+'/jre'
    jdk_home = java_home

    def setup(r):

        # For bootstrap
        centos_version = '0.19.b21'
        centos_site = 'http://dev.centos.org/centos/5/testing'

        # For cooking
        openjdk = (
            'http://download.java.net/openjdk'
            '/jdk7/promoted/b23/openjdk-7-ea-src-b23-30_oct_2007.zip'
        )

        rev=r.version.split('+')[1][1:]
        r.addMercurialSnapshot(
            'http://icedtea.classpath.org/hg/icedtea', tag=rev,
            use=(not Use.bootstrap)
        )
        r.addSource(openjdk, use=(not Use.bootstrap))

        jarch = ('x86_64','i386')[Arch.x86==True]

        for arch in ('i386', 'x86_64'):
            for p in ('icedtea', 'icedtea-devel'):

                archive_name = 'java-'+r.java_release+'-'+p
                archive_version = r.java_version+'-'+centos_version

                carch = arch.replace('3', '5')
                archive_full_name = \
                    archive_name+'-'+archive_version+'.snapshot.'+carch+'.rpm'

                rpm = centos_site+'/'+arch+'/RPMS/'+archive_full_name

                r.addArchive(rpm, dir='/', use=(Use.bootstrap and arch == jarch))


        if Use.bootstrap:

            if Arch.x86_64:
                java_name_jarch = r.java_name+'.'+jarch
                r.Move('%(prefix)s/lib', '%(libdir)s')
                r.Move(r.java_home+'.'+jarch, r.java_home)
                r.Remove('%(libdir)s/jvm/*.'+jarch)
            else:
                java_name_jarch = r.java_name
                r.Remove('%(libdir)s/jvm/{java,jre}-'+r.java_release+'-icedtea')

            jceDir = '%(libdir)s/jvm-private/'+java_name_jarch
            r.Move(jceDir+'/jce/vanilla/*.jar', r.java_home+'/jre/lib/security/')

            r.Move(
                '%(docdir)s/'+r.java_full_name+'/*', '%(thisdocdir)s/'
            )

            r.Remove('%(libdir)s/jvm-{exports,private}', recursive=True)
            r.Remove(
                '%(docdir)s/'+r.java_name+'-devel-'+r.java_version, recursive=True
            )

            r.Requires(exceptDeps=r'java\:\ org\.GNOME\..*')

            del(r.EnforceSonameBuildRequirements)

        else:
            # !Use.bootstrap

            # prevent random breakage, at least in x86_64
            r.Environment('JAVA_OPTS', '-XX:-UseGCOverheadLimit')
            # ant 
            r.Environment('JAVACMD', r.jre_home + '/bin/java')

            # corrects very subtle breakage as our sed in not in chroot's PATH
            # this breaks silently %(builddir)s/openjdk/jdk/make/java/nio/addNotices.sh
            # which b0rks everything generated by genExceptions.sh in same dir
            r.Environment('SED', '/bin/sed')
            # addNotices.sh  genBuffer.sh  genCharsetProvider.sh  genCoder.sh and
            # genExceptions.sh in the same location as above expect a SHELL env
            # var that is  not present nor passedby the Makefile ...
            r.Environment('SHELL', '/bin/sh')

            # we want it to 'find' xpcom and not to complain when at the
            # EnforceSonameBuildRequirements step
            r.Environment('XULRUNNER_LIBS',
                          '-L%(libdir)s/xulrunner -lgtkembedmoz -lxpcom -lplds4 -lplc4 '
                          '-lnspr4 -lpthread -ldl -Wl,--rpath,%(libdir)s/xulrunner')

            r.Configure(
                ' --with-icedtea'
                ' --with-icedtea-home='+r.java_home+''
                ' --with-xalan2-jar=%(datadir)s/java/xalan.jar'
                ' --with-xalan2-serializer-jar=%(datadir)s/java/serializer.jar'
                ' --with-xerces2-jar=%(datadir)s/java/xercesImpl.jar'
            )

            #r.Make()
            # XXX: some of our flags break build
            r.Run('make')

            build_root = 'openjdk/control/build/linux-%s' \
                    % ('i586', 'amd64')[Arch.x86_64==True]

            r.Install(build_root+'/j2sdk-image/*', r.java_home+'/')

            plugin_dir = '/lib/%s/' % ('i386', 'amd64')[Arch.x86_64==True]  
            r.Symlink(
                r.jre_home + plugin_dir + 'gcjwebplugin.so',
                '%(libdir)s/xulrunner/plugins/libjavaplugin.so',
            )

            # Setup environment variables (just ! bootstrap)
            r.Create('%(sysconfdir)s/profile.d/icedtea-jre.sh', mode=0755,
                     contents = 'export JAVA_HOME="%s"' % r.jre_home)
            r.Create('%(sysconfdir)s/profile.d/icedtea-jre.csh', mode=0755,
                     contents = 'setenv JAVA_HOME "%s"' % r.jre_home)

        # Split into icedtea-(jre|jdk):runtime

        r.ComponentSpec('icedtea-jre:runtime', r.jre_home+'/')
        r.ComponentSpec('icedtea-jdk:runtime', r.java_home+'/')

        # move docs (as we want icedtea empty)
        r.PackageSpec('icedtea-jre', '%(mandir)s/.*')
        r.PackageSpec('icedtea-jre', '%(docdir)s/.*')

        # Setup environment variable (common)
        r.Create('%(sysconfdir)s/profile.d/%(name)s-jdk.sh', mode=0755,
                 contents='export PATH="%s/bin:$PATH"' % r.jdk_home)
        r.Create('%(sysconfdir)s/profile.d/%(name)s-jdk.csh', mode=0755,
                 contents='setenv PATH "%s/bin:$PATH"' % r.jdk_home)

        r.ComponentSpec('icedtea-jdk:runtime', '%(sysconfdir)s/profile.d/%(name)s-jdk.*')

        r.Create('%(sysconfdir)s/profile.d/%(name)s.sh', mode=0755,
                 contents='export PATH="%s/bin:$PATH"' % r.jre_home)
        r.Create('%(sysconfdir)s/profile.d/%(name)s.csh', mode=0755,
                 contents='setenv PATH "%s/bin:$PATH"' % r.jre_home)

        r.ComponentSpec('icedtea-jre:runtime', '%(sysconfdir)s/profile.d/.*')

        # gcjwebplugin
        r.PackageSpec('icedtea-gcjwebplugin', '%(libdir)s/xulrunner/.*')
        r.DanglingSymlinks(exceptions='%(libdir)s/xulrunner/plugins/libjavaplugin.so')

        r.Requires('icedtea-jdk:runtime', r.jre_home+'/bin/java')

        # should not be needed but...
        r.SharedLibrary(subtrees= r.jre_home + '/lib')

        # FIXME: *should* not be needed
        if Arch.x86_64:
            r.Requires(exceptDeps=r'soname\:\ ELF64\/libxpcom\.so\(SysV\ x86\_64\)')
        else:
            r.Requires(exceptDeps=r'soname\:\ ELF32\/libxpcom\.so\(SysV\ x86\)')
