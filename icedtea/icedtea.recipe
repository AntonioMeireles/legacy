#
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class IcedTea(AutoPackageRecipe):

    name = 'icedtea'
    version = '1.6.0.0_b13_1.3.1+r1224'

    buildRequires = [
        'alsa-lib:devel', 'atk:devel', 'cairo:devel', 'expat:devel',
        'findutils:runtime', 'fontconfig:devel', 'freetype:devel',
        'giflib:devel', 'glib:devel', 'glibc:devel', 'glitz:devel', 'gtk:devel',
        'libgcc:devellib', 'libjpeg:devel', 'libpng:devel', 'libstdc++:devel',
        'libX11:devel', 'libxcb:devel', 'libXext:devel', 'libXi:devel',
        'libXrender:devel', 'libXtst:devel', 'nspr:devel', 'nspr:devel',
        'openmotif:devel', 'pango:devel', 'pkgconfig:devel', 'unzip:runtime',
        'xcb-util:devel', 'xulrunner:devel', 'xulrunner:lib', 'zlib:devel', 'gcc:runtime', 
        'gtk:devel', 'zlib:devel', 'libX11:devel',
        'libXau:devel', 'libXdmcp:devel', 'libXp:devel',
        'libXinerama:devellib', 'libdmx:devel',
        'libICE:devel', 'libSM:devel', 'dbus:devel', 'dbus-glib:devellib',
        'dbus-glib:devel', 'intltool:runtime', 'intltool:devel',
        'glib:runtime', 'libXt:devel',
        'file:runtime', 'gettext:runtime', 'gcc-c++:runtime',
        'libxslt:runtime', 'which:runtime', 'procps:runtime', 'util-linux:runtime',
        'autoconf:runtime', 'automake:runtime',
        'libtool:devel', 'libtool:runtime', 'zip:runtime',
        'gnome-common:runtime', 'gnome-common:devel',
        'docbook-dtds:data', 'wget:runtime', 'cups:devel',
    ]

    # For loadInstalled()
    java_version = version.split('_')[0]
    java_release = '1.6.0'

    java_name = 'java-'+java_release+'-openjdk'
    java_home = '%(libdir)s/jvm/'+java_name
    jre_home = java_home+'/jre'
    jdk_home = java_home

    def setup(r):

        r.macros.jsuffix = ('-64','')[Arch.x86==True]
        r.macros.jdkhome = r.jdk_home
        r.macros.javaname = r.java_name

        # For bootstrap
        fedora_version = '0.5.b06.fc9'
        fedora_site = 'http://download.fedora.redhat.com/pub/fedora/linux/development'

        ant = 'apache-ant-1.7.1'
        ant_site = 'http://www.apache.org/dist/ant/binaries/'

        xalan = 'xalan-j_2_7_0'
        xalan_site = 'http://www.apache.org/dist/xml/xalan-j/binaries/'

        # For cooking
        openjdk_snapshot = r.version.split('_')[1]
        openjdk_date = '05_nov_2008'
        openjdk_dist = (
            'http://download.java.net/openjdk'
            '/jdk6/promoted/'+openjdk_snapshot+'/openjdk-6-src-'+openjdk_snapshot+'-'+openjdk_date+'.tar.gz'
        )

        # To make local cook with installed jre possible
        r.Environment('JAVA_HOME', '')

        icedtea_version=r.version.split('+')[1][1:]
        r.addMercurialSnapshot('http://icedtea.classpath.org/hg/icedtea6', tag=icedtea_version)

        r.addSource(openjdk_dist)

        r.addArchive(ant_site+ant+'-bin.tar.gz', dir='%(maindir)s')
        r.addArchive(xalan_site+xalan+'-bin.tar.gz', dir='%(maindir)s')

        r.addSource('%(name)s.sh', macros=True)
        r.addSource('%(name)s.csh', macros=True)

        r.Run('autoreconf -fi')

        jarch = ('x86_64','i386')[Arch.x86==True]

        for arch in ('i386', 'x86_64'):
            for p in ('openjdk', 'openjdk-devel'):

                archive_name = 'java-'+r.java_release+'-'+p
                archive_version = r.java_version+'-'+fedora_version

                archive_full_name = \
                    archive_name+'-'+archive_version+'.'+arch+'.rpm'

                rpm = fedora_site+'/'+arch+'/os/Packages/'+archive_full_name

                r.addArchive(rpm, dir='%(maindir)s/openjdk-prebuilt', use=(arch == jarch))

        openjdk_home = (
            '%(builddir)s/openjdk-prebuilt'
                '/usr/lib/jvm/java-1.6.0-openjdk-1.6.0.0'
        )
        if Arch.x86_64:
            openjdk_home += '.x86_64'

        bootstrap_path='PATH=$PATH:'+openjdk_home+'/bin:'+openjdk_home+'/jre/bin:%(builddir)s/'+ant+'/bin'

        conf = (
            '--with-openjdk '
            '--without-rhino '
            '--disable-liveconnect --enable-gcjwebplugin '
            '--with-ant-home=%(builddir)s/'+ant+' '
            '--with-xalan2-jar=%(builddir)s/'+xalan+'/xalan.jar '
            '--with-xalan2-serializer-jar=%(builddir)s/'+xalan+'/serializer.jar '
            '--with-xerces2-jar=%(builddir)s/'+xalan+'/xercesImpl.jar '
            '--with-openjdk-home='+openjdk_home
        )

        # get it to build with our xulrunner-1.8-compat pkg
#        r.macros.cflags += ' -L%(libdir)s/xulrunner-1.8 '

        # prevent random breakage, at least in x86_64
        r.Environment('JAVA_OPTS', '-XX:-UseGCOverheadLimit')

        # corrects very subtle breakage as our sed in not in chroot's PATH
        # this breaks silently %(builddir)s/openjdk/jdk/make/java/nio/addNotices.sh
        # which b0rks everything generated by genExceptions.sh in same dir
        r.Environment('SED', '/bin/sed')

        # addNotices.sh  genBuffer.sh  genCharsetProvider.sh  genCoder.sh and
        # genExceptions.sh in the same location as above expect a SHELL env
        # var that is  not present nor passedby the Makefile ...
        r.Environment('SHELL', '/bin/sh')

        r.Configure(conf, preConfigure=bootstrap_path)

        # We don't want to use system ant
        r.Replace('patches/icedtea-ant.patch', '','Makefile')
        r.Replace('patches/icedtea-javac-debuginfo.patch', '','Makefile')

        r.Make(preMake=bootstrap_path)

        build_root = 'openjdk/control/build/linux-%s' \
                % ('i586', 'amd64')[Arch.x86_64==True]

        r.Install(build_root+'/j2sdk-image/*', r.java_home+'/')

        plugin_dir = '/lib/%s/' % ('i386', 'amd64')[Arch.x86_64==True]
        r.Symlink(
            r.jre_home + plugin_dir + 'gcjwebplugin.so',
            '%(libdir)s/mozilla/plugins/libjavaplugin.so',
        )

        # Setup environment variables
        r.Install(
            '%(name)s.sh', '%(sysconfdir)s/profile.d/%(name)s%(jsuffix)s.sh',
            package='%(name)s-jre', mode=0755
        )
        r.Install(
            '%(name)s.csh', '%(sysconfdir)s/profile.d/%(name)s%(jsuffix)s.csh',
            package='%(name)s-jre', mode=0755
        )

        # Split into icedtea-(jre|jdk):runtime
        r.ComponentSpec('%(name)s-jre:runtime', r.jre_home+'/')
        r.ComponentSpec('%(name)s-jdk:runtime', r.java_home+'/')

        # move docs (as we want icedtea empty)
        r.PackageSpec('%(name)s-jre', '%(docdir)s/.*')

        # gcjwebplugin
        r.ComponentSpec('%(name)s-gcjwebplugin:runtime', '%(libdir)s/mozilla/')
        r.DanglingSymlinks(exceptions='%(libdir)s/mozilla/plugins/libjavaplugin.so')

        r.Requires('%(name)s-jdk:runtime', r.jre_home+'/bin/java')

        # should not be needed but...
        r.SharedLibrary(subtrees= r.jre_home + '/lib')

        # FIXME: *should* not be needed
        if Arch.x86_64:
            r.Requires(exceptDeps=r'soname\:\ ELF64\/libxpcom\.so\(SysV\ x86\_64\)')
        else:
            r.Requires(exceptDeps=r'soname\:\ ELF32\/libxpcom\.so\(SysV\ x86\)')

        r.AutoDoc(exceptions='(openjdk-prebuilt|'+ant+'|'+xalan+')/')

