#
# ruby.recipe
# Conary Package Recipe for Ruby, an object-oriented scripting language
#
# This recipe builds two troves: ruby and ruby-tk. This was done so systems
# without X can install a more minimal version of Ruby.
#
class Ruby(AutoPackageRecipe):
    name = 'ruby'
    version = '1.8.5'

    buildRequires = [ 'autoconf:runtime','binutils:runtime', 'bison:runtime',
                      'db:devel', 'gdbm:devel', 'groff:runtime',
                      'libtermcap:devel', 'ncurses:devel', 'openssl:devel',
                      'readline:devel', 'unzip:runtime', 'zlib:devel',
                      'tcl:devel', 'tk:devel' ]

    if Use.krb:
        buildRequires.append('krb5:devel')

    def unpack(r):
        r.addArchive('ftp://ftp.ruby-lang.org/pub/%(name)s/%(name)s-%(version)s.tar.gz')

        # Fix for ruby's broken configure script, which hardcodes '/usr/lib'
        # into the LOAD_PATH (this breaks 64-bit builds of Ruby on x86-64).
        r.addPatch('ruby-libdir-configure.patch')

        # CVE-2006-5467
        r.addPatch('ruby-1.8.5-cgi-dos-1.patch')

    def configure(r):
        configOpts = '--enable-shared --enable-install-doc'

        if Use.krb:
            r.macros.cppflags = '%(cppflags)s -I%(krbprefix)s/include'
            r.macros.ldflags  = '%(ldflags)s -L%(krbprefix)s/lib'

        # If we are on a x86-64 machine, make sure to include the
        # default 'non-flavored' directories to ruby's LOAD_PATH.
        # Note: we don't actually create these directories, we just want
        # to search them if they exist.
        if Arch.x86_64:
            extraLoadPath = ':'.join([ '/usr/lib/ruby/site_ruby/1.8', '/usr/lib/ruby/site_ruby'])
            configOpts += ' --with-search-path="%s"' % extraLoadPath

        r.Configure(configOpts)

    def make(r):
        r.Make()
        r.Run('make test')

    def policy(r):
        # Don't whack the site_ruby directories
        r.ExcludeDirectories(exceptions='site_ruby/')

        # This package provides the ruby interpreter (/usr/bin/ruby)
        r.Provides('file', '%(bindir)s/ruby')

        # Make sure all docs are put in the right component
        r.ComponentSpec('doc', '%(datadir)s/ri/')

        # Break out the Tk-related stuff into its own package (ruby-tk)
        r.PackageSpec('%(name)s-tk', 'tk.*')

