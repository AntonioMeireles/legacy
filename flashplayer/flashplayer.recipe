class FlashPlayer(PackageRecipe,RedirectRecipe):
    name = "flashplayer"
    version = "10.0.45.2"

    buildRequires = ['glibc:devel', 'zlib:devel', 'fontconfig:devel', 'freetype:devel', 'glib:devel', 'gtk:devel', 'libX11:devel', 'libXext:devel', 'libXt:devel', 'libgcc:devellib', 'libstdc++:devel',]

    def setup(r):
        waterMark = '%(libdir)s/mozilla/plugins/%(name)s' + '_IS_BROKEN_IN_NATIVE_x86_64__AS_IS_rBO_FLASH_UI'

        if Arch.x86:
            r.addArchive('http://fpdownload.macromedia.com/get/flashplayer/current/install_flash_player_10_linux.tar.gz', use=(Arch.x86))
        # http://labs.adobe.com/downloads/flashplayer10.html
        #        r.addArchive('http://download.macromedia.com/pub/labs/flashplayer10/libflashplayer-%(version)s.linux-x86_64.so.tar.gz', use=(Arch.x86_64),
        #                     dir = '%(name)s-%(version)s')
            
        #        if Arch.x86_64:
        #            r.Install('libflashplayer.so','%(libdir)s/mozilla/plugins/')
        #        else:

            r.Install('../libflashplayer.so','%(libdir)s/mozilla/plugins/')
            r.ComponentSpec("runtime", "%(libdir)s/mozilla.*")
            r.Requires('xulrunner:lib', '%(libdir)s/')
            r.Requires('mozilla-filesystem:runtime', '%(libdir)s/')
            r.Requires('libflashsupport:lib', '%(libdir)s/')
            
            # expose it to x86_64 counter part

            r.Create(waterMark)
            r.Provides('file', waterMark)
        else:
            # as we can't do partial / per arch redirects 
            r.Create(waterMark)
            
            waterMark32 = '%(prefix)s/lib/mozilla/plugins/%(name)s' + '_IS_BROKEN_IN_NATIVE_x86_64__AS_IS_rBO_FLASH_UI'
            r.Requires(waterMark32, waterMark)
