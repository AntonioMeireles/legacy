#
# Copyright (c) 2005-2009 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class LVM2(CPackageRecipe):
    name = 'lvm2'
    version = '2.02.84'

    buildRequires = [ 'ncurses:devel', 'readline:devel', 'pkgconfig:devel',
        'userspace-kernel-headers:devel', 'autoconf:runtime']
        # cluster buildreqs
        #'corosync:devel', 'openais:devel',] 

    def setup(r):
        r.addArchive('ftp://sources.redhat.com/pub/lvm2/LVM2.%(version)s.tgz',
                     keyid='567E2C17')
        r.addPatch('lvm2-2.02.72-conflict.patch')
        r.Run('autoconf')
        r.Configure(
            '--enable-lvm1_fallback '
            '--enable-fsadm ' 
            '--with-cluster=internal '
            '--with-pool=internal '
            '--with-user= '
            '--with-group= '

            '--with-staticdir=%(essentialsbindir)s '
            '--with-libdir=%(essentiallibdir)s '

            '--enable-static_link '
            '--enable-readline '
            '--enable-applib '
            '--enable-cmdlib '
            '--enable-dmeventd '
            '--enable-pkgconfig '
            # explicitly disable it
            '--disable-selinux '

            #cluster options
            #'--with-clvmd=openais '
            #'--with-optimisation="" '
            # other options used in openfiler: enable-cmirrord enable-ocf
        )
        r.Make()
        r.MakeInstall()

        for x in ('lvm', 'pvscan', 'vgchange', 'vgscan'):
            r.Symlink('lvm.static', '%(essentialsbindir)s/' + x)
        r.Doc('VERSION', 'WHATS_NEW')

        r.Move('/usr/sbin/dmsetup*', '/sbin/')
        r.PackageSpec('device-mapper',
                      '%(essentiallibdir)s/libdevmapper.*',
                      '%(libdir)s/libdevmapper.*',
                      '%(essentialsbindir)s/dmsetup.*',
                      '%(essentialsbindir)s/dmeventd',
                      '%(includedir)s/libdevmapper.h',
                      '%(includedir)s/libdevmapper-event.h',
                      '%(libdir)s/pkgconfig/devmapper.pc',
                      '%(libdir)s/pkgconfig/devmapper-event.pc',
                      '%(mandir)s/man8/dmsetup.8.gz'
                      )

        for i in ('archive', 'backup', 'cache'):
            d = '%(sysconfdir)s/lvm/' + i
            r.MakeDirs(d)
            r.SetModes(d, 0700)
            r.ExcludeDirectories(exceptions = d)

        r.MakeDirs('%(localstatedir)s/lock/lvm')
        r.SetModes('%(localstatedir)s/lock/lvm', 0700)
        r.ExcludeDirectories(exceptions = '%(localstatedir)s/lock/lvm')
        
        for d in ['archive', 'backup', 'cache']:
            r.SetModes('%(sysconfdir)s/lvm/' + d, 0700)

        r.Install('scripts/lvm2_monitoring_init_red_hat','%(initdir)s/lvm2_monitor', mode=0744)
        r.Install('scripts/lvmconf.sh', '%(sbindir)s/lvmconf', mode=0744)

        r.MakeDirs('%(localstatedir)s/lock/lvm')
        r.SetModes('%(localstatedir)s/lock/lvm', 0700)
        r.ExcludeDirectories(exceptions = '%(localstatedir)s/lock/lvm')

        r.MakeDirs('%(localstatedir)s/run/lvm')
        r.SetModes('%(localstatedir)s/run/lvm', 0700)
        r.ExcludeDirectories(exceptions = '%(localstatedir)s/run/lvm')

        # If on x86_64 move package config to lib64
        if Arch.x86_64:
            r.MakeDirs('%(prefix)s/%(lib)s/pkgconfig')
            r.Move('%(prefix)s/lib/pkgconfig/*.pc',
                   '%(prefix)s/%(lib)s/pkgconfig/')
            r.Move('%(prefix)s/lib/libdevmapper.*',
                   '%(prefix)s/%(lib)s/')
            r.Move('%(prefix)s/lib/libdevmapper-*.*',
                   '%(prefix)s/%(lib)s/')
            r.Move('%(prefix)s/lib/liblvm2cmd.*',
                   '%(prefix)s/%(lib)s/')
            r.Move('%(prefix)s/lib/liblvm2app.*',
                   '%(prefix)s/%(lib)s/')

        r.ComponentProvides('dm-prefix')

        #additional stuff if clustering enabled
        #r.addPatch('lockingType.patch')
        #r.Install('scripts/clvmd_init_red_hat','%(initdir)s/clvmd', mode=0744)
        #r.Install('scripts/cmirrord_init_red_hat', '%(initdir)s/cmirrord', mode=0744)
