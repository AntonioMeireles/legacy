diff -r 0ce6f8f323b0 dmesg.c
--- a/dmesg.c	Fri Jun 13 20:54:45 2008 -0400
+++ b/dmesg.c	Fri Jun 13 21:37:07 2008 -0400
@@ -32,6 +32,7 @@
 #include <asm/unistd.h>
 #include <sys/types.h>
 #include <sys/stat.h>
+#include <sys/utsname.h>
 
 #include "kerneloops.h"
 
@@ -141,6 +142,8 @@
 	int oopsstart = -1;
 	int oopsend;
 	int inbacktrace = 0;
+	char *kver = NULL;
+	struct utsname utsname_b;
 
 	linepointer = calloc(buflen+1, sizeof(char*));
 	if (!linepointer)
@@ -154,6 +157,13 @@
 
 	fill_linepointers(buffer, remove_syslog);
 
+	if (!remove_syslog) {
+		/* this is dmesg, so use uname for kver */
+		if (uname(&utsname_b)) {
+			kver = strdup(utsname_b.release);
+		}
+	}
+
 	oopsend = linecount;
 
 	i = 0;
@@ -165,6 +175,20 @@
 			continue;
 		}
 		if (oopsstart < 0) {
+			if (remove_syslog) {
+				char *needle, *space;
+				needle = strstr(c, " kernel: Linux version ");
+				if (needle) {
+					needle += 23; /* len of search */
+					space = strchr(needle, ' ');
+					if (space) {
+						if (kver)
+							free(kver);
+						kver = strndup(needle,
+							       space-needle);
+					}
+				}
+			}
 			/* find start-of-oops markers */
 			if (strstr(c, "general protection fault:"))
 				oopsstart = i;
@@ -281,7 +305,7 @@
 				}
 				/* too short oopses are invalid */
 				if (strlen(oops) > 100)
-					queue_oops(oops);
+					queue_oops(oops, kver);
 				oopsstart = -1;
 				inbacktrace = 0;
 				oopsend = linecount;
@@ -322,7 +346,7 @@
 		}
 		/* too short oopses are invalid */
 		if (strlen(oops) > 100)
-			queue_oops(oops);
+			queue_oops(oops, kver);
 		oopsstart = -1;
 		inbacktrace = 0;
 		oopsend = linecount;
@@ -332,6 +356,8 @@
 	free(linelevel);
 	linepointer = NULL;
 	linelevel = NULL;
+	if (kver)
+		free(kver);
 }
 
 int scan_dmesg(void __unused *unused)
diff -r 0ce6f8f323b0 kerneloops.h
--- a/kerneloops.h	Fri Jun 13 20:54:45 2008 -0400
+++ b/kerneloops.h	Fri Jun 13 21:37:07 2008 -0400
@@ -30,7 +30,7 @@
 #define barrier() __asm__ __volatile__("": : :"memory")
 #define __unused  __attribute__ ((__unused__))
 
-extern void queue_oops(char *oops);
+extern void queue_oops(char *oops, char *kver);
 extern void submit_queue(void);
 extern void clear_queue(void);
 
diff -r 0ce6f8f323b0 submit.c
--- a/submit.c	Fri Jun 13 20:54:45 2008 -0400
+++ b/submit.c	Fri Jun 13 21:37:07 2008 -0400
@@ -55,6 +55,7 @@
 struct oops {
 	struct oops *next;
 	char *text;
+	char *kver;
 	unsigned int checksum;
 };
 
@@ -84,7 +85,7 @@
 	return temp;
 }
 
-void queue_oops(char *oops)
+void queue_oops(char *oops, char *kver)
 {
 	int i;
 	unsigned int sum;
@@ -107,6 +108,8 @@
 	new->next = queued_oopses;
 	new->checksum = sum;
 	new->text = strdup(oops);
+	if (kver)
+		new->kver = strdup(kver);
 	queued_oopses = new;
 	newoops = 1;
 }
@@ -135,6 +138,8 @@
 	while (oops) {
 		count++; /* Users are not programmers, start at 1 */
 		fprintf(tmpf, "Kernel failure message %d:\n", count);
+		if (oops->kver)
+			fprintf(tmpf, "Kernel version: %s\n", oops->kver);
 		fprintf(tmpf, oops->text);
 		fprintf(tmpf, "\n\n");
 		oops = oops->next;
@@ -168,6 +173,8 @@
 		printf("Submit text is:\n---[start of oops]---\n%s\n---[end of oops]---\n", oops->text);
 		next = oops->next;
 		free(oops->text);
+		if (oops->kver)
+			free(oops->kver);
 		free(oops);
 		oops = next;
 		count++;
@@ -235,6 +242,11 @@
 			CURLFORM_COPYNAME, "oopsdata",
 			CURLFORM_COPYCONTENTS, oops->text, CURLFORM_END);
 
+		if (oops->kver) {
+			curl_formadd(&post, &last,
+				CURLFORM_COPYNAME, "kver",
+				CURLFORM_COPYCONTENTS, oops->kver, CURLFORM_END);
+		}
 		if (allow_distro_to_pass_on) {
 			curl_formadd(&post, &last,
 				CURLFORM_COPYNAME, "pass_on_allowed",
@@ -249,6 +261,8 @@
 		curl_easy_cleanup(handle);
 		next = oops->next;
 		free(oops->text);
+		if (oops->kver)
+			free(oops->kver);
 		free(oops);
 		oops = next;
 		count++;
@@ -281,6 +295,8 @@
 	while (oops) {
 		next = oops->next;
 		free(oops->text);
+		if (oops->kver)
+			free(oops->kver);
 		free(oops);
 		oops = next;
 	}
