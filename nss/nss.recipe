#
# Copyright (c) 2007-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
loadInstalled('nspr')
class NSS(CPackageRecipe):
    name = 'nss'
    version = '3.12.8'

    
    # rpmRelease = '4.fc14'


    buildRequires = [ 'nspr:devel', 'perl:runtime', 'sqlite:devel', 'zlib:devel']

    def setup(r):
        r.disableParallelMake()
        r.addArchive('ftp://ftp.mozilla.org/pub/mozilla.org/security/nss/releases/NSS_3_12_8_RTM/src/')
        r.addArchive('%(name)s-pem-20101125.tar.bz2', dir = '%(name)s-%(version)s/')
        r.addSource('mkpkgconfigfiles.sh', macros = True)
        r.addSource('nss.pc.in')
        r.addSource('nss-config.in')
        r.addSource('nss-util.pc.in')
        r.addSource('nss-util-config.in')
        r.addSource('nss-softokn.pc.in')
        r.addSource('nss-softokn-config.in')

        # taken from nss pk from RH
        for p in [ 'nss-enable-pem.patch',
                   'renegotiate-transitional.patch',
                   'nss-sysinit-userdb-first.patch',
                   ]:
            r.addPatch(p, dir='mozilla')

        if Arch.x86_64:
            r.Environment('USE_64', '1')

        r.Environment('BUILD_OPT', '1')
        r.Environment('FREEBL_NO_DEPEND', '1')
        
        r.Environment('XCFLAGS', '%(optflags)s')

        r.Environment('PKG_CONFIG_ALLOW_SYSTEM_LIBS', '1')
        r.Environment('PKG_CONFIG_ALLOW_SYSTEM_CFLAGS', '1')

        r.Environment('NSPR_INCLUDE_DIR','%(includedir)s/nspr4')
        r.Environment('NSPR_LIB_DIR','%(libdir)s')

        r.Environment('NSS_USE_SYSTEM_SQLITE', '1')
        
        ## Add custom CA certificates
        # First, obtain a DER file of the root certificate and feed
        # it to addbuiltin, which is provided by this package:
        #
        # /usr/lib/nss/unsupported-tools/addbuiltin \
        #   -n "Cert Nickname" -t "CT,C,C" <foo.der >foo.txt
        #
        # Then, `cvc add' the .txt file to this package and make an
        # addSource line like the one(s) below.
        #
        r.addSource('cacert.org.txt', dir='custom_builtins')

        r.Run('cat custom_builtins/*.txt >>mozilla/security/nss/lib/ckfw/'
            'builtins/certdata.txt')
        r.Make('generate', dir='mozilla/security/nss/lib/ckfw/builtins')
        # 

        r.Make(dir='mozilla/security/coreconf')
        r.Make(dir='mozilla/security/dbm')
        r.Make(dir='mozilla/security/nss')

        r.MakeDirs('%(libdir)s/pkgconfig')
        # Set up our package files
        r.macros.nspr_version = Nspr.version

        r.Run('sh %(builddir)s/mkpkgconfigfiles.sh')

        r.Install('mozilla/dist/pkgconfig/*.pc', '%(libdir)s/pkgconfig/', mode=0644)
        r.Install('mozilla/dist/pkgconfig/*config', '%(bindir)s/', mode=0755)
        

        r.macros.unsupported_tools_directory='%(libdir)s/nss/unsupported-tools'

        # Copy the pkcs #11 configuration script
        r.addSource('setup-nsssysinit.sh', dir='%(bindir)s/setup-nsssysinit.sh', mode = 0755)



        # There is no make install target so we'll do it ourselves.
        for file in [ 'libnss3.so',
                      'libnssckbi.so',
                      'libnsspem.so',
                      'libnsssysinit.so',
                      'libsmime3.so',
                      'libssl3.so',
                      # nss-util
                      'libnssutil3.so',
                      # nss-softokn
                      'libsoftokn3.so',
                      'libnssdbm3.so',
                      'libfreebl.a',
                      ]:
            r.Install('mozilla/dist/*.OBJ/lib/%s' % file, '%(libdir)s/', mode=0755)

        # softokn
        for file in [ #'libfreebl3.so',
                      #'libsoftokn3.so',
                      # ^^ just here to ease updates
                      # see bottom
                      'libnssdbm3.so',]:
            r.Install('mozilla/dist/*.OBJ/lib/%s' % file, '/%(lib)s/', mode=0755)
            r.Symlink('/%(lib)s/' + file, '%(libdir)s/' + file)

        # Install the empty NSS db files
        r.MakeDirs('%(sysconfdir)s/pki/nssdb')

        r.addSource('blank-cert8.db',
                    dest = '%(sysconfdir)s/pki/nssdb/cert8.db',
                    mode = 0644,)


        r.addSource('blank-key3.db',
                    dest = '%(sysconfdir)s/pki/nssdb/key3.db',
                    mode = 0644,)

        r.addSource('blank-secmod.db',
                    dest = '%(sysconfdir)s/pki/nssdb/secmod.db',
                    mode = 0644,)

        # Shared db
        r.addSource('blank-cert9.db',
                    dest = '%(sysconfdir)s/pki/nssdb/cert9.db',
                    mode = 0644,)

        r.addSource('blank-key4.db',
                    dest = '%(sysconfdir)s/pki/nssdb/key4.db',
                    mode = 0644,)

        r.addSource('system-pkcs11.txt',
                    dest = '%(sysconfdir)s/pki/nssdb/pkcs11.txt',
                    mode = 0644,)

        # Copy the development libraries we want
        for file in [ 'libcrmf.a',
                      'libnssb.a',
                      'libnssckfw.a'
                      ]:
            r.Install('mozilla/dist/*.OBJ/lib/%s' % file,
                      '%(libdir)s/',
                      mode=0755)

        # Copy the binaries we want
        for file in [ 'certutil',
                      'cmsutil',
                      'crlutil',
                      'modutil',
                      'pk12util',
                      'signtool',
                      'signver',
                      'ssltap'
                      ]:
            r.Install('mozilla/dist/*.OBJ/bin/%s' % file,
                      '%(bindir)s/',
                      mode=0755)

        # Copy the binaries we ship as unsupported
        for file in [ 'atob', 
                      'btoa',
                      'derdump',
                      'ocspclnt',
                      'pp',
                      'selfserv',
                      'strsclnt',
                      'symkeyutil',
                      'tstclnt',
                      'vfyserv',
                      'vfychain',
                      # softokn
                      'shlibsign',
                      ]:
            r.Install('mozilla/dist/*.OBJ/bin/%s' % file,
                      '%(unsupported_tools_directory)s/',
                      package=':runtime',
                      mode=0755)

        # Copy the include files we want
        r.Install('mozilla/dist/public/nss/*.h', '%(includedir)s/nss3/')

        # softokn
        r.Install('mozilla/dist/private/nss/blapi.h', '%(includedir)s/nss3/')

        r.Config(exceptions = '%(sysconfdir)s/pki/nssdb/.*')
        r.InitialContents('%(sysconfdir)s/pki/nssdb/.*')

        # segfaults under rMake (!) 
#        for file in [ 'libsoftokn3.so', 'libnssdbm3.so',  ]:
#            r.Run('%(destdir)s%(unsupported_tools_directory)s/shlibsign -v -i  %(destdir)s%(libdir)s/' + file)

#        for file in [ 'libfreebl3.so' ]:
#            r.Run('%(destdir)s%(unsupported_tools_directory)s/shlibsign -v -i  %(destdir)s/%(lib)s/' + file)
        # plan B
        # r.addSource('nss_shlibsign.tagdescription',
        #             macros=True,
        #             dest='%(tagdescriptiondir)s/nss_shlibsign')

        # r.addSource('nss_shlibsign.taghandler',
        #             macros=True,
        #             dest='%(taghandlerdir)s/nss_shlibsign',
        #             mode=0755)

        # r.Requires('nss:runtime', '%(taghandlerdir)s/nss_shlibsign')

        for file in [ 'libsoftokn3', 'libnssdbm3' ]:
            sign = '%(libdir)s/' + file + '.chk'
            so = '%(libdir)s/' + file + '.so'
#            r.Create(sign)
#            r.Transient(sign)
            r.Run('%(destdir)s%(unsupported_tools_directory)s/shlibsign -v -i  %(destdir)s/' + so + ' -o %(destdir)s/'+ sign)
            r.Symlink(sign, '/%(lib)s/')
#            r.TagSpec('nss_shlibsign', so)

        for file in [ 'libfreebl3',]:
                      # those two bellow should had been in %(libdir)s
                      # and symlinked to /%(lib)s and bot the other way around
                      # that breaks updates from prev versions (symlink turning file)
                      # 'libsoftokn3', 'libnssdbm3' ]:
            sign = '/%(lib)s/' + file + '.chk'
            so = '/%(lib)s/' + file + '.so'
#            r.Create(sign)
#            r.Transient(sign)
            r.Run('%(destdir)s%(unsupported_tools_directory)s/shlibsign -v -i  %(destdir)s/' + so + ' -o %(destdir)s/'+ sign)
            r.Symlink(sign, '%(libdir)s/')
#            r.TagSpec('nss_shlibsign', so)



