diff -ur ash-0.3.8.clean/arith.y ash-0.3.8.orig/arith.y
--- ash-0.3.8.clean/arith.y	2003-08-06 14:58:38.000000000 -0400
+++ ash-0.3.8.orig/arith.y	2003-08-06 15:54:27.000000000 -0400
@@ -77,43 +77,43 @@
 %left ARITH_UNARYMINUS ARITH_UNARYPLUS ARITH_NOT ARITH_BNOT
 %%
 
-exp:	expr = {
+exp:	expr {
 			return ($1);
 		}
 	;
 
 
-expr:	ARITH_LPAREN expr ARITH_RPAREN = { $$ = $2; }
-	| expr ARITH_OR expr	= { $$ = $1 || $3; }
-	| expr ARITH_AND expr	= { $$ = $1 && $3; }
-	| expr ARITH_BOR expr	= { $$ = $1 | $3; }
-	| expr ARITH_BXOR expr	= { $$ = $1 ^ $3; }
-	| expr ARITH_BAND expr	= { $$ = $1 & $3; }
-	| expr ARITH_EQ expr	= { $$ = $1 == $3; }
-	| expr ARITH_GT expr	= { $$ = $1 > $3; }
-	| expr ARITH_GE expr	= { $$ = $1 >= $3; }
-	| expr ARITH_LT expr	= { $$ = $1 < $3; }
-	| expr ARITH_LE expr	= { $$ = $1 <= $3; }
-	| expr ARITH_NE expr	= { $$ = $1 != $3; }
-	| expr ARITH_LSHIFT expr = { $$ = $1 << $3; }
-	| expr ARITH_RSHIFT expr = { $$ = $1 >> $3; }
-	| expr ARITH_ADD expr	= { $$ = $1 + $3; }
-	| expr ARITH_SUB expr	= { $$ = $1 - $3; }
-	| expr ARITH_MUL expr	= { $$ = $1 * $3; }
-	| expr ARITH_DIV expr	= {
+expr:	ARITH_LPAREN expr ARITH_RPAREN { $$ = $2; }
+	| expr ARITH_OR expr	{ $$ = $1 || $3; }
+	| expr ARITH_AND expr	{ $$ = $1 && $3; }
+	| expr ARITH_BOR expr	{ $$ = $1 | $3; }
+	| expr ARITH_BXOR expr	{ $$ = $1 ^ $3; }
+	| expr ARITH_BAND expr	{ $$ = $1 & $3; }
+	| expr ARITH_EQ expr	{ $$ = $1 == $3; }
+	| expr ARITH_GT expr	{ $$ = $1 > $3; }
+	| expr ARITH_GE expr	{ $$ = $1 >= $3; }
+	| expr ARITH_LT expr	{ $$ = $1 < $3; }
+	| expr ARITH_LE expr	{ $$ = $1 <= $3; }
+	| expr ARITH_NE expr	{ $$ = $1 != $3; }
+	| expr ARITH_LSHIFT expr { $$ = $1 << $3; }
+	| expr ARITH_RSHIFT expr { $$ = $1 >> $3; }
+	| expr ARITH_ADD expr	{ $$ = $1 + $3; }
+	| expr ARITH_SUB expr	{ $$ = $1 - $3; }
+	| expr ARITH_MUL expr	{ $$ = $1 * $3; }
+	| expr ARITH_DIV expr	{
 			if ($3 == 0)
 				yyerror("division by zero");
 			$$ = $1 / $3;
 			}
-	| expr ARITH_REM expr   = {
+	| expr ARITH_REM expr   {
 			if ($3 == 0)
 				yyerror("division by zero");
 			$$ = $1 % $3;
 			}
-	| ARITH_NOT expr	= { $$ = !($2); }
-	| ARITH_BNOT expr	= { $$ = ~($2); }
-	| ARITH_SUB expr %prec ARITH_UNARYMINUS = { $$ = -($2); }
-	| ARITH_ADD expr %prec ARITH_UNARYPLUS = { $$ = $2; }
+	| ARITH_NOT expr	{ $$ = !($2); }
+	| ARITH_BNOT expr	{ $$ = ~($2); }
+	| ARITH_SUB expr %prec ARITH_UNARYMINUS { $$ = -($2); }
+	| ARITH_ADD expr %prec ARITH_UNARYPLUS { $$ = $2; }
 	| ARITH_NUM
 	;
 %%
@@ -193,13 +193,11 @@
 yyerror(s)
 	const char *s;
 {
-
-	yyerrok;
 	yyclearin;
 	error("arithmetic expression: %s: \"%s\"", s, arith_startbuf);
-	/* NOTREACHED */
 }
 
+/*
 int
 yylex()
 {
@@ -300,7 +298,7 @@
 		default:
 err:
 			error("arith: syntax error: \"%s\"\n", arith_startbuf);
-			/* NOTREACHED */
+			// NOTREACHED 
 		}
 		break;
 	}
@@ -308,3 +306,4 @@
 	arith_buf++;
 	return value;
 }
+*/
diff -ur ash-0.3.8.clean/Makefile ash-0.3.8.orig/Makefile
--- ash-0.3.8.clean/Makefile	2003-08-06 14:58:38.000000000 -0400
+++ ash-0.3.8.orig/Makefile	2003-08-06 15:50:00.000000000 -0400
@@ -1,68 +1,78 @@
+#
 #	$NetBSD: Makefile,v 1.51 2000/12/29 16:30:31 bjh21 Exp $
 #	@(#)Makefile	8.4 (Berkeley) 5/5/95
+#	Red Hat Makefile for ash so that we can use GNU Make
+#
 
-WARNS=2
-YHEADER=1
-PROG=	sh
-SHSRCS=	alias.c cd.c echo.c error.c eval.c exec.c expand.c \
+CFLAGS+=-DBSD=1 -DSMALL -D_GNU_SOURCE \
+    -DGLOB_BROKEN -D__COPYRIGHT\(x\)= \
+    -D__RCSID\(x\)= -D_DIAGASSERT\(x\)= -I. -I./bltin
+LDFLAGS+="-lfl"
+PROG   =sh
+SHSRCS =alias.c cd.c bltin/echo.c error.c eval.c exec.c expand.c \
 	histedit.c input.c jobs.c mail.c main.c memalloc.c miscbltin.c \
-	mystring.c options.c parser.c printf.c redir.c show.c trap.c output.c \
-	var.c test.c setmode.c times.c
-GENSRCS=arith.c arith.h builtins.c builtins.h init.c nodes.c \
-	signames.c nodes.h syntax.c syntax.h token.h
-SRCS=	${SHSRCS} ${GENSRCS}
-
-YFLAGS=	-d
-
-CPPFLAGS+=-DSHELL -I. -I${.CURDIR}
-
-.ifdef	HETIO
-SHSRCS+=hetio.c
-CPPFLAGS+=-DHETIO
-.endif
+	mystring.c options.c parser.c bltin/printf.c redir.c show.c \
+	trap.c output.c var.c bltin/test.c setmode.c bltin/times.c
+GENSRCS=arith.c builtins.c init.c nodes.c \
+	signames.c syntax.c arith_lex.c
+GENHDRS=arith.h builtins.h nodes.h syntax.h token.h
+SRCS   =${SHSRCS} ${GENSRCS}
+OBJS   =$(patsubst %.c,%.o,${SRCS})
+OBJDIR="./"
+
+all: ${PROG}
+
+check:
+	@echo ${OBJS}
 
-.PATH:	${.CURDIR}/bltin ${.CURDIR}/../../usr.bin/printf ${.CURDIR}/../test
 
 CLEANFILES+= mkinit mknodes mksyntax
 CLEANFILES+= ${GENSRCS} y.tab.h
 
 BLTINDEFS=specialbltins.def regularbltins.def assignbltins.def
 
+arith.h arith.c: arith.y
+	bison -y -d -oarith.c arith.y
+
+arith_lex.c: arith_lex.l
+	flex -oarith_lex.c arith_lex.l
+
 token.h: mktokens
-	sh ${.ALLSRC}
+	sh ./mktokens
 
 builtins.c builtins.h: mkbuiltins shell.h builtins.def ${BLTINDEFS}
-	sh ${.ALLSRC} ${.OBJDIR} '${CFLAGS}'
+	sh ./mkbuiltins sh builtins.def ${BLTINDEFS} ${OBJDIR} '${CFLAGS}'
 
 init.c: mkinit ${SHSRCS}
-	./${.ALLSRC}
+	./mkinit ${SHSRCS}
 
 nodes.c nodes.h: mknodes nodetypes nodes.c.pat
-	./${.ALLSRC}
+	./mknodes nodetypes nodes.c.pat
 
 syntax.c syntax.h: mksyntax
-	./${.ALLSRC}
+	./mksyntax
 
 signames.c: mksignames
-	./${.ALLSRC}
+	./mksignames
+
+mksignames:
+	gcc ${CFLAGS} -o mksignames mksignames.c
 
 mkinit: mkinit.c
-	${HOST_LINK.c} -o mkinit ${.IMPSRC}
+	gcc ${CFLAGS} -o mkinit mkinit.c
 
 mknodes: mknodes.c
-	${HOST_LINK.c} -o mknodes ${.IMPSRC}
-
-.if	(${MACHINE_ARCH} == "powerpc") || \
-	(${MACHINE_ARCH} == "arm32") || \
-	(${MACHINE_ARCH} == "arm26")
-TARGET_CHARFLAG= -DTARGET_CHAR="u_int8_t"
-.else
-TARGET_CHARFLAG= -DTARGET_CHAR="int8_t"
-.endif
+	gcc ${CFLAGS} -o mknodes mknodes.c
 
 mksyntax: mksyntax.c
-	${HOST_LINK.c} ${TARGET_CHARFLAG} -o mksyntax ${.IMPSRC}
+	gcc ${CFLAGS} -DTARGET_CHAR="int8_t" -o mksyntax mksyntax.c
 
-.include <bsd.prog.mk>
+%.o: %.c
+	gcc ${CFLAGS} -c -o $@ $^ -DSHELL
 
-${OBJS}: builtins.h nodes.h syntax.h token.h
+sh: ${GENHDRS} ${OBJS}
+	gcc ${CFLAGS} -o sh ${OBJS} ${LDFLAGS}
+	
+clean:
+	rm -f ${GENSRCS} ${GENHDRS} *.o ${PROG} mkinit mksignames mknodes \
+		mksyntax
diff -ur ash-0.3.8.clean/redir.h ash-0.3.8.orig/redir.h
--- ash-0.3.8.clean/redir.h	2003-08-06 14:58:38.000000000 -0400
+++ ash-0.3.8.orig/redir.h	2003-08-06 15:50:00.000000000 -0400
@@ -47,12 +47,11 @@
 union node;
 void redirect __P((union node *, int));
 void popredir __P((void));
-int fd0_redirected_p __P((void));
 void clearredir __P((void));
 int copyfd __P((int, int));
 
 /* Return true if fd 0 has already been redirected at least once.  */
-extern int inline fd0_redirected_p(void) {
+static inline int fd0_redirected_p(void) {
 	extern int fd0_redirected;
         return fd0_redirected != 0;
 }
