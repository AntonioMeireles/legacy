--- oldver/common/modutils.py	2008-04-25 14:03:16.000000000 -0400
+++ newver/common/modutils.py	2008-04-25 14:33:40.000000000 -0400
@@ -34,6 +34,7 @@
 
 __docformat__ = "restructuredtext en"
 
+import imp
 import sys
 import os
 from os.path import walk, splitext, join, abspath, isdir, dirname, exists
@@ -196,7 +197,19 @@
     :rtype: list(str)
     :return: the corresponding splitted module's name
     """
-    base = splitext(abspath(filename))[0]
+    filename = abspath(filename)
+    base = splitext(filename)[0]
+    # search loaded modules in an attempt to find modules
+    # that are not available on sys.path but are available
+    # via sys.meta_path.  These modules have to be loaded
+    # first before they can be found.
+    loadedFiles = dict((getattr(x, '__file__', None), x) 
+                        for x in sys.modules.values())
+    if filename in loadedFiles:
+        module = loadedFiles[filename]
+        if hasattr(module, '__path__'):
+            return module.__name__.split('.')
+
     for path in sys.path:
         path = abspath(path)
         if path and base[:len(path)] == path:
@@ -478,6 +491,30 @@
     return False
 
     
+def _find_module(name, path):
+    for importHook in sys.meta_path:
+        loader = importHook.find_module(name, path)
+        if loader:
+            module = loader.load_module(name)
+            file = module.__file__
+            if os.path.isdir(file):
+                suffix, openMode, moduleType = ('', '', imp.PKG_DIRECTORY)
+            else:
+                for suffix, openMode, moduleType in imp.get_suffixes():
+                    if file.endswith(suffix):
+                        break
+                else:
+                    raise ImportError, 'unknown file type for %s' % file
+            return (None, file, (suffix, openMode, moduleType))
+    return find_module(name, path)
+
+def _load_module(name,  path):
+    for importHook in sys.meta_path:
+        loader = importHook.find_module(name, path)
+        if loader:
+            return loader.load_module(name)
+    info = find_module(name, path)
+    return load_module(*info)
 
 def is_relative(modname, from_file):
     """return true if the given module name is relative to the given
@@ -499,7 +536,7 @@
     if from_file in sys.path:
         return False
     try:
-        find_module(modname.split('.')[0], [from_file])
+        _find_module(modname.split('.')[0], [from_file])
         return True
     except ImportError:
         return False
@@ -552,7 +589,7 @@
     :return: the module type flag and the file path for a module
     """
     while modpath:
-        _, mp_filename, mp_desc = find_module(modpath[0], path)
+        _, mp_filename, mp_desc = _find_module(modpath[0], path)
         modpath.pop(0)
         mtype = mp_desc[2]
         if modpath:
