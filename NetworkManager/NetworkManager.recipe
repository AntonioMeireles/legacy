loadSuperClass('gnomepackage')
class NetworkManager(GnomePackageRecipe):

   buildRequires = [ 'GConf:devel', 'ORBit2:devel', 'chkconfig:runtime',
                     'gnome-keyring:devel', 'gnome-vfs:devel', 'ppp:devel',
                     'hal:devel', 'iproute:runtime', 'libart_lgpl:devel',
                     'libbonobo:devel', 'libbonoboui:devel', 'libgcrypt:devel',
                     'libglade:devel', 'libgnome:devel', 'libgnomecanvas:devel',
                     'libgnomeui:devel', 'libgpg-error:devel', 'libnl:devel',
                     'popt:devel', 'wireless-tools:devel', 'dbus:devel',
                     'dbus-glib:devellib', 'glib:devel', 'pango:devel',
                     'autoconf:runtime', 'automake:runtime', 'libtool:devel',
                     'desktop-file-utils:config', 'libnotify:devel',
                     'intltool:runtime', 'autoconf:data', 'libtool:runtime',
                     'pkgconfig:devel', 'intltool:devel', 'gettext:runtime',
                     'gettext:devel', 'gnome-common:devel', 'gnome-common:runtime', 
                     'dbus-glib:runtime', 'automake:runtime', 'autoconf:runtime',
                     'intltool:devel', 'libtool:devel', 'util-macros:devel',
                     'network-manager-applet:devel'
                     ]


   name = "NetworkManager"
   version = '0.7.0.svn_3038'

   extraConfig = ' --disable-static --with-distro=redhat  --with-named=/usr/sbin/named --with-named-user=named --with-named-dir=%(localstatedir)s/named '

   def unpack(r):
      r.addSvnSnapshot('http://svn.gnome.org/svn/NetworkManager/trunk')
      r.addSource('ntpd.dispatch')

   def build(r):

      r.Configure(r.extraConfig, configureName='autogen.sh')

      r.Make()

   def install(r):
      r.MakeInstall()

      r.MakeDirs('%(sysconfdir)s/NetworkManager/VPN')
      r.ExcludeDirectories(exceptions='%(localstatedir)s/run/%(name)s')
      r.ExcludeDirectories(exceptions='%(sysconfdir)s/NetworkManager/VPN')
      r.Install('ntpd.dispatch', '%(sysconfdir)s/NetworkManager/dispatcher.d/ntpd')

   def policy(r):
      r.Requires('libnl:lib','%(sbindir)s/NetworkManager')
      r.Requires('wpa_supplicant:runtime','%(sbindir)s/NetworkManager')
