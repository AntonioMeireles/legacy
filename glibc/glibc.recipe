#
# Copyright (c) 2004-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
class Glibc(RPMPackageRecipe, PackageRecipe):
    name = 'glibc'
    version = '2.5'
    rpmRelease = '49.el5_5.4'
    distroVersion = '5Server'
    isRHEL = True
    glibcDate = '20061008T1257'

    keepBuildReqs = True
    if Use.cross:
        buildRequires = [ 'gcc[!cross]' ]
        crossRequires = [ 'userspace-kernel-headers:devel' ]
    elif Use.bootstrap:
        buildRequires = [ 'gcc[cross,gcc.core]',
                          'gcc:runtime[!cross]',
                          'gcc:devel[!cross]',
                          'gcc:devellib[!cross]',
                          'gcc:lib[!cross]',
                          'binutils:runtime[!cross]', 'glibc:devel',
                          'glibc-headers[cross]', 'make',
                          'userspace-kernel-headers:devel[!bootstrap]' ]
        crossRequires = [ 'userspace-kernel-headers:devel[bootstrap]' ]

    else:
        # tzdata:data is required so that rMake knows to build tzdata with
        # bootstrap glibc which doesn't require tzdata to install.
        buildRequires = [ 'gd:devel', 'libpng:devel', 'libstdc++:devel',
                          'userspace-kernel-headers:devel', 'perl:runtime',
                          'zlib:devel', 'texinfo:runtime', 'findutils:runtime',
                          'gettext:runtime', 'grep:runtime', 'autoconf:runtime',
                          'diffutils:runtime', 'elfutils:runtime', 'gcc:runtime',
                          'coreutils:runtime', 'sed:runtime', 'gcc:devel',
                          'glibc:devel', 'make:runtime', 'tzdata:data', 'file:runtime']

    srpm = '%(name)s-%(version)s-%(rpmRelease)s.src.rpm'

    rpmPatches = [ 'glibc-2.5-fedora.patch', 'glibc-bz3352.patch',
                   'glibc-bz3369.patch',
                   'glibc-i386-syscall6.patch',
                   'glibc-rh211116.patch',
                   'glibc-bz3429.patch',
                   'glibc-bz3451.patch',
                   'glibc-nptl_db-dtvp.patch',
                   'glibc-r_debug-r_map.patch',
                   'glibc-rh213656.patch',
                   'glibc-rh214569.patch',
                   'glibc-strxfrm.patch',
                   'glibc-sysconf-intel-core-duo.patch',
                   'glibc-tzfile64.patch',
                   'glibc-bz3320.patch',
                   'glibc-bz3559.patch',
                   'glibc-mai_IN.patch',
                   'glibc-po-update.patch',
                   'glibc-powerpc-cpu-addon-update.patch',
                   'glibc-rh215572.patch',
                   'glibc-bz3632.patch',
                   'glibc-memusage.patch',
                   'glibc-nis+-getenv.patch',
                   'glibc-rh206483.patch',
                   'glibc-rh218276.patch',
                   'glibc-rh218782.patch',
                   'glibc-rh218802.patch',
                   'glibc-strtod.patch',
                   'glibc-bz2337.patch',
                   'glibc-bz3747.patch',
                   'glibc-rh216970.patch',
                   'glibc-rh219107.patch',
                   'glibc-rh219145.patch',
                   'glibc-tst-pselect.patch',
                   'glibc-rh220420.patch',
                   'glibc-rh220658.patch',
                   'glibc-nis-getservbyname.patch',
                   'glibc-rh225315.patch',
                   'glibc-rh222089.patch',
                   'glibc-rh221187.patch',
                   'glibc-bz3855.patch',
                   'glibc-bz3902.patch',
                   'glibc-bz2749.patch',
                   'glibc-byteswap.patch',
                   'glibc-bz3957.patch',
                   'glibc-bz3944.patch',
                   'glibc-rh228103.patch',
                   'glibc-nscd-SIGHUP.patch',
                   'glibc-po-update2.patch',
                   'glibc-bz3322.patch',
                   'glibc-bz3851.patch',
                   'glibc-bz3884.patch',
                   'glibc-bz3995.patch',
                   'glibc-bz4411.patch',
                   'glibc-bz3348.patch',
                   'glibc-bz3842.patch',
                   'glibc-bz4070.patch',
                   'glibc-bz4074.patch',
                   'glibc-bz4076.patch',
                   'glibc-bz3458.patch',
                   'glibc-rh230151.patch',
                   'glibc-bz4069.patch',
                   'glibc-bz4181.patch',
                   'glibc-bz4130.patch',
                   'glibc-bz4101.patch',
                   'glibc-bz3919.patch',
                   'glibc-rh203728.patch',
                   'glibc-dst-req-static.patch',
                   'glibc-rh233460.patch',
                   'glibc-rh178934.patch',
                   'glibc-ia64-fesetround.patch',
                   'glibc-bz4344.patch',
                   'glibc-bz3306.patch',
                   'glibc-libio-throw.patch',
                   'glibc-bz4364.patch',
                   'glibc-bz4368.patch',
                   'glibc-rh235229.patch',
                   'glibc-madvise-hidden.patch',
                   'glibc-bz4405.patch',
                   'glibc-bz4406.patch',
                   'glibc-rh232633.patch',
                   'glibc-rh230198.patch',
                   'glibc-bz3213.patch',
                   'glibc-bz4342.patch',
                   'glibc-bz4438.patch',
                   'glibc-bz4439.patch',
                   'glibc-rh238431.patch',
                   'glibc-bz4131.patch',
                   'glibc-bz4465.patch',
                   'glibc-bz4512.patch',
                   'glibc-bz4514.patch',
                   'glibc-lowlevelrobustlock.patch',
                   'glibc-printf-string-len.patch',
                   'glibc-rh218035.patch',
                   'glibc-rh237711.patch',
                   'glibc-sem_timedwait.patch',
                   'glibc-x86_64-memcpy.patch',
                   'glibc-bz4586.patch',
                   'glibc-ppc-ldouble-inout.patch',
                   'glibc-ppc-nextafterl.patch',
                   'glibc-bz3954.patch',
                   'glibc-bz4102.patch',
                   'glibc-fgetc_unlocked.patch',
                   'glibc-getaddrinfo-172.16.patch',
                   'glibc-ldso-locking1.patch',
                   'glibc-ldso-locking2.patch',
                   'glibc-nonnull.patch',
                   'glibc-nscd-get_mapping.patch',
                   'glibc-nscd-pad.patch',
                   'glibc-bz4381.patch',
                   'glibc-rh180432.patch',
                   'glibc-rh244545.patch',
                   'glibc-rh234946.patch',
                   'glibc-bz4702.patch',
                   'glibc-hwcap-mask.patch',
                   'glibc-pthread_getattr_np.patch',
                   'glibc-rh253961.patch',
                   'glibc-rh254115.patch',
                   'glibc-rh295891.patch',
                   'glibc-bz4745.patch',
                   'glibc-bz4776.patch',
                   'glibc-bz4813.patch',
                   'glibc-bz4858.patch',
                   'glibc-i386-timedrwlock.patch',
                   'glibc-rh239653.patch',
                   'glibc-rh247788.patch',
                   'glibc-rh248281.patch',
                   'glibc-rh249477.patch',
                   'glibc-rh253116.patch',
                   'glibc-rh259681.patch',
                   'glibc-rh282201.patch',
                   'glibc-rh339821.patch',
                   'glibc-rh352321.patch',
                   'glibc-rh371561.patch',
                   'glibc-rh405781.patch',
                   'glibc-x86_64-memcpy2.patch',
                   'glibc-strtod--0.patch',
                   'glibc-inet_network.patch',
                   'glibc-bz4963.patch',
                   'glibc-bz5028.patch',
                   'glibc-bz5071.patch',
                   'glibc-login_tty.patch',
                   'glibc-bz5225.patch',
                   'glibc-printf-prec-overflow.patch',
                   'glibc-bz5277.patch',
                   'glibc-bz5378.patch',
                   'glibc-bz5375.patch',
                   'glibc-bz5435.patch',
                   'glibc-bz5454.patch',
                   'glibc-bz5451.patch',
                   'glibc-bz5424.patch',
                   'glibc-malloc-perturb-fail.patch',
                   'glibc-rh397021.patch',
                   'glibc-bz5541.patch',
                   'glibc-rh352021.patch',
                   'glibc-rh428859.patch',
                   'glibc-rh434601.patch',
                   'glibc-rh439486.patch',
                   'glibc-bz4349.patch',
                   'glibc-bz5741.patch',
                   'glibc-bz5854.patch',
                   'glibc-rh316791.patch',
                   'glibc-rh435182.patch',
                   'glibc-rh437394.patch',
                   'glibc-rh445259.patch',
                   'glibc-rh454299.patch',
                   'glibc-bz5818.patch',
                   'glibc-rh440103.patch',
                   'glibc-private-futex.patch',
                   'glibc-bz3406.patch',
                   'glibc-bz6461.patch',
                   'glibc-bz6719.patch',
                   'glibc-rh455360.patch',
                   'glibc-rh461481.patch',
                   'glibc-rh443827.patch',
                   'glibc-rh458861.patch',
                   'glibc-rh464146.patch',
                   'glibc-rh467309.patch',
                   'glibc-rh469263.patch',
                   'glibc-bz7008.patch',
                   'glibc-rh484440.patch',
                   'glibc-rh470300.patch',
                   'glibc-rh483636-1.patch',
                   'glibc-rh483636-2.patch',
                   'glibc-rh483636-3.patch',
                   'glibc-rh483636-4.patch',
                   'glibc-rh483636-5.patch',
                   'glibc-rh483636-6.patch',
                   'glibc-rh483636-7.patch',
                   'glibc-rh483636-8.patch',
                   'glibc-rh403231.patch',
                   'glibc-rh478499.patch',
                   'glibc-bz6712.patch',
                   'glibc-bz6589.patch',
                   'glibc-bz6955.patch',
                   'glibc-rh467316.patch',
                   'glibc-rh470768.patch',
                   'glibc-rh475332.patch',
                   'glibc-bz6763.patch',
                   'glibc-rh477705.patch',
                   'glibc-rh484082.patch',
                   'glibc-rh490010.patch',
                   'glibc-bz5760.patch',
                   'glibc-bz7080.patch',
                   'glibc-bz9881.patch',
                   'glibc-bz9880.patch',
                   'glibc-bz3493.patch',
                   'glibc-rh484214.patch',
                   'glibc-x86-cacheinfo-update.patch',
                   'glibc-catomic.patch',
                   'glibc-expmalloc1.patch',
                   'glibc-expmalloc2.patch',
                   'glibc-expmalloc3.patch',
                   'glibc-expmalloc4.patch',
                   'glibc-nscd-avc_destroy.patch',
                   'glibc-nscd-backport-20090511.patch',
                   'glibc-nscd-cache-search.patch',
                   'glibc-rh504704.patch',
                   'glibc-bz9957.patch',
                   'glibc-expmalloc5.patch',
                   'glibc-rh509853.patch',
                   'glibc-nscd-atomic-rel.patch',
                   'glibc-expmalloc6.patch',
                   'glibc-rh529997.patch',
                   'glibc-nptl-setxid.patch',
                   'glibc-rh547631.patch',
                   'glibc-rh530107.patch',
                   'glibc-rh491995.patch',
                   'glibc-rh566712.patch',
                   'glibc-rh593047.patch',
                   'glibc-rh593686.patch',
                   'glibc-rh579011.patch'
                   ] 

    # we don't specify --libdir here because glibc is smart enough
    # to figure that out.  Furthermore, if we use --libdir=/usr/lib64
    # on 64-bit systems, glibc will start looking for locale data in
    # /usr/lib64/locale instead of /usr/lib/locale, which is bad.
    baseConf = ('--prefix=%(prefix)s '
                '--enable-add-ons=nptl,libidn '
                '--without-cvs '
                '--enable-kernel=2.6.9 '
                '--enable-bind-now '
                '--with-tls '
                '--with-__thread '
                '--build=%(build)s '
                '--host=%(host)s '
                '--target=%(target)s '
                '--cache-file=config.cache '
                '--disable-profile ')

    def setup(r):
        r.macros.glibcDate = r.glibcDate
        # XXX
        r.disableParallelMake()
        
        # make the build more quiet 
        r.macros.parallelmflags += ' -s'

        # FIXME: may want to add -finline-limit=2000 to CFLAGS
        r.macros.cflags = '-DNDEBUG=1 -g -O3 -fasynchronous-unwind-tables '
        if not (Use.cross | Use.bootstrap):
            r.macros.cflags += ' -mtune=generic'

        if Arch.x86.i686:
            r.macros.cflags += ' -march=i686'

            if Use.xen:
                r.macros.cflags += ' -mno-tls-direct-seg-refs'

        r.addArchive('%(name)s-%(version)s-%(glibcDate)s.tar.bz2', rpm=r.srpm)
        r.addArchive('%(name)s-%(version)s-fedora-%(glibcDate)s.tar.bz2', dir='%(maindir)s', rpm=r.srpm)

        for patch in r.rpmPatches:
            r.addPatch(patch, rpm=r.srpm)

        # 
        # XXX UGLY 
        # backport eventfd* patches from openembedded to rPL's glibc
        # http://cgit.openembedded.net/cgit.cgi/openembedded/log/recipes/glibc/glibc-2.5/glibc25-backport-eventfd.patch?id=c8d29ed5b736223ac39c0481ae5a181ca96aeb90
        
        r.addPatch('http://cgit.openembedded.net/cgit.cgi/openembedded/plain/recipes/glibc/glibc-2.5/glibc25-backport-eventfd.patch?id=c8d29ed5b736223ac39c0481ae5a181ca96aeb90')

        #
        # and NOW backport some new defines in order to support KSM on top of KVM
        #
        r.addPatch('ksm-support.patch')
        
        r.addPatch('glibc-override_headers.patch')
        r.addSource('hardlink.c')
        r.Run('rm -f sysdeps/alpha/alphaev6/memcpy.S')
        if Arch.x86_64:
            r.Move('override_headers/asm/unistd.h-64', 'override_headers/asm/unistd.h')
        else:
            r.Move('override_headers/asm/unistd.h-32', 'override_headers/asm/unistd.h')
        r.Run('touch `find . -name configure`')
        r.Run('touch locale/programs/*-kw.h')

        # r.addPatches()

        r.install()

        r.installCommon()
        # LinkCount exceptions for Locale
        r.LinkCount(exceptions='.*')
        # /etc/ld.so.cache is a binary file, do not treat it as a config file.
        r.Config(exceptions='%(sysconfdir)s/ld.so.cache')
        # We never want to overwrite the contents of ld.so.cache
        r.InitialContents('%(sysconfdir)s/ld.so.cache')
        r.InitialContents('%(sysconfdir)s/nsswitch.conf')

        # Shared library files in glibc do not have version numbers after
        # the .so
        r.SharedLibrary(inclusions=(r'..*\.so$', None, stat.S_IFDIR))
        # make sure that /usr/lib/locale /usr/share/i18n go in the
        # :locale component so they can be shared
        r.ComponentSpec('locale','%(prefix)s/lib/locale/')
        r.ComponentSpec('locale','%(datadir)s/i18n/')

        if not Use.bootstrap:
            # libpthread-using applications cannot be debugged without
            # glibc:debuginfo installed, unless we leave some extra
            # information in libpthread-.*.so
            r.Strip(exceptions='%(essentiallibdir)s/libpthread-.*.so')
            # First, copy source files into the builddir manually for
            # debugging purposes, and modify the file to point to the
            # new location for the sources, ignoring <built-in> files
            # that do not exist.
            r.Run('cd ..;'
                  '%(debugedit)s -b $(dirname %(builddir)s) -d %(debugsrcdir)s'
                  ' -l /dev/stdout'
                  ' %(destdir)s%(essentiallibdir)s/libpthread-*.so |'
                  r" tr '\000' '\n' |"
                  ' grep -v built-in |'
                  ' xargs -n 1 -i cp -a --parents {}'
                  ' %(destdir)s%(debugsrcdir)s/')
            # Make a copy from which to strip debugging information
            r.Copy('%(essentiallibdir)s/libpthread-*.so',
                   '%(essentiallibdir)s/libpthread-dbtp')
            # Copy out the full debugging information for :debuginfo
            r.MakeDirs('%(debuglibdir)s%(essentiallibdir)s')
            r.Run('%(strip)s -f %(destdir)s%(debuglibdir)s%(essentiallibdir)s/'
                   '$(basename'
                   ' %(destdir)s/%(essentiallibdir)s/libpthread-*.so).debug'
                   ' %(destdir)s%(essentiallibdir)s/libpthread-dbtp')
            # Remove the (broken) copy from :lib
            r.Remove('%(essentiallibdir)s/libpthread-dbtp')
            # strip out only the bits that we actually want to remove
            r.Run('strip -g --remove-section=.comment --remove-section=.note'
                  ' %(destdir)s/%(essentiallibdir)s/libpthread-*.so')

        # Remove tzselect from the ~bootstrap :runtime as tzdata:data req
        # perl which we do not want to bootstrap.
        if Use.bootstrap:
            r.Remove('%(bindir)s/tzselect')

        r.Requires('tzdata:data', '%(bindir)s/tzselect')
        # make sure that ldconfig is installed
        r.Requires('%(essentialsbindir)s/ldconfig', r'%(essentiallibdir)s/.*lib.*-.*so')
        r.Requires('userspace-kernel-headers:devel', '%(includedir)s/.*')

        if not Use.cross:
            for utilFile in ('mtrace', 'pcprofiledump', 'sprof', 'xtrace',
                             'memusage', 'memusagestat'):
                r.PackageSpec('glibc-utils', '%(bindir)s/' + utilFile)

            for develFile in 'gencat', 'rpcgen', 'localedef':
                r.ComponentSpec('glibc:devel', '%(bindir)s/' + develFile)

        # These headers should be present for multilib
        r.ComponentSpec('devellib', '%(includedir)s/gnu/stubs-(32|64).h')

        r.TagSpec('info-file', '/usr/share/info/')

        r.PackageSpec('nscd',
                '%(sbindir)s/nscd.*',
                '%(initdir)s/nscd',
                '%(sysconfdir)s/nscd.conf')
        r.TagSpec('initscript', '%(initdir)s/')
        r.UtilizeUser('nscd', '%(initdir)s/nscd')

    def addPatches(r):
        """
        add any patches needed for glibc
        """

    def build(r, conf, objDir='obj'):
        """
        configure and build glibc for a given configration

        @param conf: the configuration flags to pass to configure.
        @param objDir: the location that object files will be placed during
                       the build
        """
        r.Create('obj/config.cache',
                 contents='libc_cv_forced_unwind=yes\n'
                          'libc_cv_c_cleanup=yes\n')
        r.macros.objdir = objDir
        r.ManualConfigure(conf, objDir=objDir)
        r.Make("PARALLELMFLAGS='%(parallelmflags)s'", dir=objDir)

    def buildExtraLibraries(r, conf, threadmodel, subdir):
        """
        build and install only the libraries needed into the destdir

        @param conf: the configuration flags to pass to configure.
        @param threadmodel: the threadding model to use
        @param subdir: the subdirectory of /lib/ that the libraries should
                       be installed in
        """
        objdir = 'obj-' + subdir

        # XXX add rtkio if enabled
        subdirs = 'math rt'
        if threadmodel == 'nptl':
            subdirs += ' nptl nptl_db'
        else:
            raise ValueError, threadmodel

        r.build(conf, objdir)
        # normally glibc uses elf/sln to create symlinks, but we didn't
        # build that.  So use the system copy instead.
        r.Make('install_root=%%(destdir)s/%s symbolic-link-prog=/sbin/sln '
               '"subdirs=%s" install' %(subdir, subdirs), dir=objdir)
        for f in ('libc', 'libm', 'libpthread', 'libthread_db',
                  'librtkio', 'librt'):
            r.Move('/%s/%%(essentiallibdir)s/%s[.-]*' %(subdir, f),
                   '%%(essentiallibdir)s/%s/' %subdir)
        r.Remove('/%s' %subdir, recursive=True)
        r.SharedLibrary(subtrees='/lib/%s' %subdir)

    def buildBootstrap(r):
        r.Environment('BUILD_CC', '%(buildcc)s')
        conf = r.baseConf + ('--with-headers=%(builddir)s/override_headers:%(headerpath)s '
                             '--enable-add-ons=nptl '
                             '--cache-file=config.cache ')
        # glibc-redhat-%(glibcdate)s adds -lgcc_eh, which we don't
        # have yet.  Remove it for bootstrap.
        r.Run('sed -i "s/-lgcc -lgcc_eh/-lgcc/g" Makeconfig')
        r.Run('sed -i "s/-lgcc_eh/-lgcc/g" Makeconfig')

        # the ./configure tests for forced unwind and c cleanup
        # attempt to build and run binaries.  since we don't have
        # a libc yet, we can't run them.
        r.Create('obj/config.cache',
                 contents='libc_cv_forced_unwind=yes\n'
                          'libc_cv_c_cleanup=yes\n')

        r.build(conf, 'obj')
        r.MakeInstall(rootVar='install_root', dir='obj')

        # since we're cross compiling and placing this libc in
        # a sys-root, we need to modify the linker scripts to remove
        # the absolute paths (since that isn't where the libraries
        # actually are)
        r.Run("""
for file in `find %(destdir)s -name "*.so" -exec grep -l nonshared {} \;`; do
    sed -i 's,/usr/lib/,,g;s,/usr/lib64/,,g;s,/lib/,,g;s,/lib64/,,g' $file
done""")

    def install(r):
        if Use.bootstrap:
            r.buildBootstrap()
            # pt_chown is no longer needed on systems with devpts.  We
            # include it just in case someone wants to run without devpts
            # mounted, in which case they need to chmod 04755 it on their
            # local system
            r.SetModes('%(libexecdir)s/pt_chown', 0755)
            # we need ld.so.cache to exit for the bootstrap version so
            # it can be owned.  (without this touch it wouldn't).
            # Otherwise, upgrading from the bootstrap version to the
            # non-bootstrap version complains of overwriting
            # the unowned ld.so.cache
            r.Create('%(sysconfdir)s/ld.so.cache')
            # the bootstrap case is simple, there's nothing left to do
            return

        r.macros.kernelver = '2.6.9'

        conf = r.baseConf + ('--with-headers=%(builddir)s/override_headers:%(includedir)s '
                             '--enable-add-ons=nptl,c_stubs,libidn ')

        # now build the vanilla fallback libs.  These require the
        # default Linux ABI version for this architecture
        r.build(conf + '--enable-kernel=%(kernelver)s ', 'obj')
        r.MakeInstall(rootVar='install_root', dir='obj')
        # pt_chown is no longer needed on systems with devpts.  We
        # include it just in case someone wants to run without devpts
        # mounted, in which case they need to chmod 04755 it on their
        # local system
        r.SetModes('%(libexecdir)s/pt_chown', 0755)

        r.addSource('nsswitch.conf', dest='%(sysconfdir)s/')
        r.addSource('localtime', dest='%(sysconfdir)s/')

        # nscd package items
        r.Install('%(objdir)s/nscd/nscd', '%(sbindir)s')
        r.Install('nscd/nscd.init', '%(initdir)s/nscd', mode=0755)
        r.Install('nscd/nscd.conf', '%(sysconfdir)s/')

    def installCommon(r):
        # we use Make instead of MakeInstall here because install-locales
        # benefits from -jN, but MakeInstall never uses -jN
        r.Make('-C ../localedata install-locales objdir=`pwd` '
               'install_root=%(destdir)s', dir='obj')
        r.Create('%(sysconfdir)s/ld.so.conf')
        # We never want to overwrite the contents of ld.so.conf
        r.Config(exceptions='%(sysconfdir)s/ld.so.conf')
        r.InitialContents('%(sysconfdir)s/ld.so.conf')
        # zoneinfo files come from the tzdata package
        r.Remove('%(datadir)s/zoneinfo', recursive=True)
        r.InitialContents('%(sysconfdir)s/localtime')
        # these belong in quota package
        r.Remove('%(includedir)s/rpcsvc/rquota.{h,h}')

        # Create missing directory, required by mkinitrd
        r.MakeDirs('%(sysconfdir)s/ld.so.conf.d')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/ld.so.conf.d')

        # Include sanitized libc-lock.h and stdio-lock.h
        r.Copy('bits/stdio-lock.h', '%(includedir)s/')
        r.Copy('fedora/libc-lock.h', '%(includedir)s/')

        if not Use.bootstrap:
            # hard link duplicate locale files to save space
            r.Run('%(buildcc)s -O2 -o hardlink hardlink.c')
            r.Run('./hardlink -vc %(destdir)s/%(prefix)s/lib/locale')
            r.Run('%(buildcc)s -Os -static -o tzdata-update fedora/tzdata-update.c')
            r.Install('tzdata-update', '%(sbindir)s/')
