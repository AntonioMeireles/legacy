diff --git a/.gitignore b/.gitignore
new file mode 100644
index 0000000..3c98b49
--- /dev/null
+++ b/.gitignore
@@ -0,0 +1,71 @@
+Makefile
+Makefile.in
+aclocal.m4
+config.cache
+autom4te.cache
+config.guess
+config.h
+config.h.in
+config.log
+config.status
+config.sub
+configure
+configure.scan
+compile
+depcomp
+intl
+libtool
+ltconfig
+ltmain.sh
+missing
+mkinstalldirs
+install-sh
+stamp-h
+stamp-h1
+stamp-h.in
+version.h
+intl
+macros
+INSTALL
+PackageKit-*.tar.*
+org.freedesktop.PackageKit.conf
+xml-i18n-extract.in
+xml-i18n-extract
+xml-i18n-merge.in
+xml-i18n-merge
+xml-i18n-update.in
+xml-i18n-update
+intltool-extract.in
+intltool-extract
+intltool-merge.in
+intltool-merge
+intltool-update.in
+intltool-update
+xmldocs.make
+omf.make
+gtk-doc.make
+*~
+*.pc
+py-compile
+*.swp
+tags
+*.patch
+NEWS.new
+.lock-wscript
+.waf-*
+_build_
+waf-lightc
+wafadmin
+packagekit.types
+.anjuta
+*.cache
+*.anjuta
+ChangeLog
+*.o
+*.gmo
+*.lo
+*.la
+*.so
+.deps/
+*.pyc
+.libs/
diff --git a/backends/conary/XMLCache.py b/backends/conary/XMLCache.py
index 527d962..dd8c716 100644
--- a/backends/conary/XMLCache.py
+++ b/backends/conary/XMLCache.py
@@ -7,13 +7,14 @@ import urllib as url
 from conary.lib import sha1helper
 from conary.lib import util
 
-from packagekit.backend import PackageKitBaseBackend
+from packagekit.backend import *
 from packagekit.enums import ERROR_NO_CACHE,ERROR_REPO_CONFIGURATION_ERROR, ERROR_NO_NETWORK
 
 
 from pkConaryLog import log
 from conarypk import ConaryPk
 from conaryEnums import groupMap
+import generateXML
 
 #{{{ FuNCS
 def getGroup( categorieList ):
@@ -42,7 +43,8 @@ def mapGroup(categorieList):
 class XMLRepo:
     xml_path = ""
     repository = ""
-    def __init__(self, repo, path ):
+    def __init__(self, repo, path, pk):
+        self.pk = pk
         self.xml_path = path
         self._setRepo(repo)
 
@@ -65,7 +67,6 @@ class XMLRepo:
         elif where == "group":
             return self._searchGroupPackage(search)
         elif where == "all":
-            log.info("searching all .............")
             return self._getAllPackages()
         return []
 
@@ -83,8 +84,7 @@ class XMLRepo:
                 self._repo =   cElementTree.parse(r).getroot()
                 return self._repo
             except:
-                Pk = PackageKitBaseBackend("")
-                Pk.error(ERROR_REPO_CONFIGURATION_ERROR," The file %s not parsed submit a issue at http://issues.foresightlinux.org" % self.repo )
+                self.pk.error(ERROR_REPO_CONFIGURATION_ERROR," The file %s not parsed submit a issue at http://issues.foresightlinux.org" % self.repo )
        
 
     def _generatePackage(self, package_node ): 
@@ -122,6 +122,7 @@ class XMLRepo:
         doc = self._open()
         results = []
         for package in doc.findall("Package"):
+
             if name.lower() in str(package.find("name").text).lower():
                 results.append(self._generatePackage(package))
         return results
@@ -173,8 +174,20 @@ class XMLRepo:
 
 
 class XMLCache:
-    #xml_files = ["foresight.rpath.org@fl:2"]
-    xml_files = []
+
+    # Let's only get XML data from things that we support.
+    # XXX We really should replace this with the Conary
+    #     RESTful API real soon now.
+    pregenerated_XML_labels = (
+        'conary.rpath.com@rpl:2-qa',
+        'foresight.rpath.org@fl:2',
+        'foresight.rpath.org@fl:2-qa',
+        'foresight.rpath.org@fl:2-devel',
+        'foresight.rpath.org@fl:2-kernel',
+        'foresight.rpath.org@fl:2-qa-kernel',
+        'foresight.rpath.org@fl:2-devel-kernel',
+    )
+
     server = "http://packages.foresightlinux.org/cache/"
     repos = []
     dbPath = '/var/cache/conary/'
@@ -182,8 +195,9 @@ class XMLCache:
     xml_path =  dbPath + "xmlrepo/"
 
     def __init__(self):
-        con = ConaryPk()
-        labels = con.get_labels_from_config()
+        self.conarypk = ConaryPk()
+        self.labels = ( x for x in self.conarypk.get_labels_from_config() )
+        self.pk = PackageKitBaseBackend("")
 
         if not os.path.isdir(self.dbPath):
             os.makedirs(self.dbPath)
@@ -191,12 +205,11 @@ class XMLCache:
             os.mkdir(self.jobPath)
         if not os.path.isdir( self.xml_path ):
             os.makedirs(self.xml_path )
- 
-        for xml_file in labels:
-           if not os.path.exists( self.xml_path + xml_file + ".xml"  ):
-                self._fetchXML()
-        for xml_file in labels :
-            self.repos.append(XMLRepo( xml_file + ".xml", self.xml_path ))
+
+        for label in self.labels:
+           if not os.path.exists( self.xml_path + label + ".xml"  ):
+                self._fetchXML(label)
+           self.repos.append(XMLRepo( label + ".xml", self.xml_path, self.pk ))
 
     def _getJobCachePath(self, applyList):
         applyStr = '\0'.join(['%s=%s[%s]--%s[%s]%s' % (x[0], x[1][0], x[1][1], x[2][0], x[2][1], x[3]) for x in applyList])
@@ -223,7 +236,7 @@ class XMLCache:
 
     def convertTroveToDict(self, troveTupleList):
         mList = []
-        for troveTuple in troveTupleList: 
+        for troveTuple in troveTupleList:
             pkg = {}
             pkg["name"] = troveTuple[0]
             pkg["version"] = troveTuple[1].trailingRevision()
@@ -233,8 +246,11 @@ class XMLCache:
             
     def searchByGroups(self, groups):
         pass
+
     def refresh(self):
-        self._fetchXML()
+        for label in self.labels:
+            self._fetchXML(label)
+
     def resolve(self, name ):
         for repo in self.repos:
             r =  repo.resolve(name)
@@ -245,13 +261,15 @@ class XMLCache:
 
     def search(self, search, where = "name" ):
         """ 
-            @where (string) values = name | details | group |
+            @where (string) values = name | details | group | all
         """
         repositories_result = []
+        log.info("%s " % search)
         for repo in self.repos:
-            results = repo.search(search , where )
-            for i in results:
-                repositories_result.append(i)
+            for s in search:
+                results = repo.search(s , where )
+                for i in results:
+                    repositories_result.append(i)
         return self.list_set( repositories_result)
 
     def resolve_list(self, search_list ):
@@ -275,30 +293,21 @@ class XMLCache:
         #log.debug([i["name"] for i in results ] )
         return results
 
-    def _fetchXML(self ):
-        con = ConaryPk()
-        labels = con.get_labels_from_config()
-        log.info(labels)
-        Pk = PackageKitBaseBackend("")
-        for i in labels:
-            if "foresight.rpath.org" in i or "conary.rpath.com" in i:
-                label = i + '.xml'
-                filename = self.xml_path + label
-                wwwfile = self.server + label
-                if os.environ.get("NETWORK"):
-                    try:
-                        wget = url.urlopen( wwwfile )
-                    except:
-                        Pk.error(ERROR_NO_NETWORK,"%s can not open" % wwwfile)
-                else:
-                    Pk.error(ERROR_NO_CACHE,"Not exist network conection")
-                openfile = open( filename ,'w')
+    def _fetchXML(self, label):
+        log.info("Updating XMLCache for label %s" % label)
+        filename = label + '.xml'
+        filepath = self.xml_path + filename
+        if label in self.pregenerated_XML_labels:
+            wwwfile = self.server + filename
+            try:
+                wget = url.urlopen( wwwfile )
+                openfile = open(filepath,'w')
                 openfile.writelines(wget.readlines())
                 openfile.close()
-            else:
-                import generateXML
-                filename = self.xml_path + i + ".xml"
-                generateXML.init(i,filename)
+            except:
+                self.pk.error(ERROR_NO_NETWORK,"%s can not open" % wwwfile)
+        else:
+            generateXML.init(label,filepath,self.conarypk)
 
     def getGroup(self,categorieList):
         return getGroup(categorieList)
@@ -344,8 +353,8 @@ if __name__ == '__main__':
     import sys
     #print XMLCache().resolve("gimp")
     l= XMLCache().resolve_list(sys.argv[1:])
-   # print ">> details"
-   # l= XMLCache().search('Internet', 'group' )
+    #print ">> details"
+    #l= XMLCache().search('Internet', 'group' )
 
     for v,p in enumerate(l):
         print v,p["name"]
diff --git a/backends/conary/conaryBackend.py b/backends/conary/conaryBackend.py
index 9bf022d..98b308c 100755
--- a/backends/conary/conaryBackend.py
+++ b/backends/conary/conaryBackend.py
@@ -151,16 +151,26 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
             installed = INFO_AVAILABLE
         return installed
 
+    def get_package_id_from_pkg(self,pkg):
+        return self.get_package_id_new(pkg)
+
+    def _format_metadata(self, metadata):
+        name = metadata.get("name")
+        data = ""
+        if "shortDesc" in metadata:
+            data = metadata['shortDesc'].decode("UTF")
+            if data == "." or data == "":
+                data = name.replace("-",' ').replace("_"," ").capitalize()
+        return data
+
+
     def get_package_id_new(self,pkg):
 
         name,version,flavor = pkg.get("trove")
         metadata = pkg.get("metadata")
         data = ""
         if metadata:
-            if "shortDesc" in metadata:
-                data = metadata['shortDesc'].decode("UTF")
-                if data == "." or data == "":
-                    data = name.replace("-",' ').capitalize()
+            data = self._format_metadata(metadata)
         return pkpackage.get_package_id(name, version.trailingRevision(), self._get_arch(flavor), data)
             
     @ExceptionHandler
@@ -174,11 +184,7 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         #data = versionObj.asString() + "#"
         data = ""
         if pkg:
-            if "shortDesc" in pkg:
-                data = pkg['shortDesc'].decode("UTF")
-                if data == "." or data == "":
-                    data = name.replace("-",' ').capitalize()
-                
+            data = self._format_metadata(pkg) 
         return pkpackage.get_package_id(name, version, arch, data)
 
     @ExceptionHandler
@@ -230,9 +236,10 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
             self.error(ERROR_UNKNOWN, "DORK---- search where not found")
 
         cache = Cache()
-        log.debug((searchlist, where))
-        log.info("||||||||||||||||||||||||||||searching  on cache... ")
+        log.debug((where,type(where)))
+        log.info("||||||||||||||||||||||||||||searching  on cache... %s " % where )
         pkgList = cache.search(searchlist, where )
+        log.info(pkgList)
         log.info("|||||||||||||||||||||||||||||1end searching on cache... ")
 
         if len(pkgList) > 0 :
@@ -253,33 +260,37 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         from conary.conaryclient.update import NoNewTrovesError,DepResolutionFailure
         updJob = self.client.newUpdateJob()
         try:
-            log.info("prepare updateJOb...............")
-            log.info(applyList)
+            log.info("prepare updateJob for massive Update.")
             suggMap = self.client.prepareUpdateJob(updJob, applyList)
-            log.info("end prepare updateJOB..............")
+            log.info("end the preparedUpdateJob Updated all packages end")
         except NoNewTrovesError:
             #self.error(ERROR_NO_PACKAGES_TO_UPDATE, "No new apps were found")
+            #close conary client
+            self.client.close()
+            #close de callback
             return updJob, None
         except DepResolutionFailure as error :
             log.info(error.getErrorMessage())
-            deps =  error.cannotResolve
+            deps =  error.getErrorMessage()
             
-            dep_package = [ str(i[0][0]).split(":")[0] for i in deps ]
-            log.info(dep_package)
-            self.error(ERROR_DEP_RESOLUTION_FAILED,  "This package depends of:  %s" % ", ".join(set(dep_package)))
+            #dep_package = [ str(i[0][0]).split(":")[0] for i in deps ]
+            #log.info(dep_package)
+            self.error(ERROR_DEP_RESOLUTION_FAILED, deps)
         if cache:
             Cache().cacheUpdateJob(applyList, updJob)
         return updJob, suggMap
 
     def _do_update(self, applyList):
-        log.info("========= _do_update ========")
+        log.info("========= Checking the freeze dir  ========")
         jobPath = Cache().checkCachedUpdateJob(applyList)
         log.info(jobPath)
         if jobPath:
             updJob = self.client.newUpdateJob()
             try:
+                log.info("getting updJob from freeze dir")
                 updJob.thaw(jobPath)
             except IOError, err:
+                log.info("error: getting updJob from freeze dir")
                 updJob = None
         else:
             updJob,suggMap = self._get_update(applyList, cache=False)
@@ -402,7 +413,7 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
            # name ,version,flavor = pkg.get("trove")
             # get the string id from packagekit 
             #log.info(pkg) 
-            package_id = self.get_package_id_new(pkg)
+            package_id = self.get_package_id_from_pkg(pkg)
             
             # split the list for get Determine info
             summary = package_id.split(";")
@@ -411,7 +422,7 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
 
             summary[3] = pkg.get("metadata").get("label")
             pkg_id = ";".join(summary)
-            log.info("====== show the package (%s) %s- %s" %( pos, name, status) )
+            log.info("====== show the package (%s) %s %s %s" %( pos, name, status, meta) )
             self.package(package_id, status, meta )
         self.packages = []
 
@@ -435,21 +446,16 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         self.percentage(0)
         self.status(STATUS_QUERY)
         log.info("options: %s searchlist:%s "%(filters, search))
-        self.percentage(10)
-
-
-        self.percentage(20)
-      
-
         self.percentage(30)
-        name = self.conary.search_path( search )
-        self.percentage(50)
-        log.info(name)
-        if name:
-            log.info("resolving")
-            if ":" in name:
-                name = name.split(":")[0]
-            self.resolve( filters, [name]) 
+        for s in search:
+            name = self.conary.search_path(s)
+            self.percentage(50)
+            log.info(name)
+            if name:
+                log.info("resolving")
+                if ":" in name:
+                    name = name.split(":")[0]
+                self.resolve( filters, [name]) 
 
     @ExceptionHandler
     def search_name(self, options, searchlist):
@@ -480,9 +486,8 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
     def get_packages(self, filter ):
         self.allow_cancel(False)
         self.status(STATUS_QUERY)
-        log.info("options: %s searchlist:%s "%(filter,"all"))
-        self._do_search(filter, "", 'all' )
- 
+        log.info("options: %s searchlist:%s " %(filter,"all"))
+        self._do_search(filter, ["all"], 'all' )
 
     def get_requires(self, filters, package_ids, recursive_text):
         pass
@@ -513,7 +518,8 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         self.allow_cancel(True)
         self.percentage(None)
         self.status(STATUS_INFO)
-        package_id = package_ids[0]
+        package_id = package_ids
+        log.info("get_files ===============0")
         def _get_files(troveSource, n, v, f):
             files = []
             troves = [(n, v, f)]
@@ -521,41 +527,37 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
             troves.extend([ x for x in trv.iterTroveList(strongRefs=True)
                                 if troveSource.hasTrove(*x)])
             for n, v, f in troves:
-                for (pathId, path, fileId, version, filename) in \
-                    troveSource.iterFilesInTrove(n, v, f, sortByPath = True,
-                                                 withFiles = True):
+                tr = troveSource.getTrove(n, v, f)
+                for (pathId, path, fileId, version) in tr.iterFileList(   ):
                     files.append(path)
             return files
         
-        for package in package_id.split("&"):
-            log.info(package)
+        for package in package_id:
             name, version, flavor, installed = self._findPackage(package)
-
             if installed == INFO_INSTALLED:
                 files = _get_files(self.client.db, name, version, flavor)
             else:
                 files = _get_files(self.client.repos, name, version, flavor)
-
-            self.files(package_id, ';'.join(files))
-
+            (name,version,arch,installed) = package.split(";")
+            if ":" in name:
+                name,trove = name.split(":")
+            package = ";".join( [name,version,arch,installed])
+            log.info("%s package " % package)
+            self.files(package, ';'.join(files))
     @ExceptionHandler
     def update_system(self, only_trusted):
 
-        # FIXME: use only_trusted
-
         self.allow_cancel(True)
         self.status(STATUS_UPDATE)
         self.client.setUpdateCallback( UpdateSystemCallback(self, self.cfg) )
-        updateItems = self.client.fullUpdateItemList()
-        [ log.info(i) for i,ver,flav in updateItems]
+        log.info("1.- Getting the all packages what not on conaryLabels")
+        updateItems =self.client.fullUpdateItemList()
         applyList = [ (x[0], (None, None), x[1:], True) for x in updateItems ]
-
-        log.info(">>>>>>>>>> get update >>>>>>>>>>>>")
-        self._get_update(applyList)
-        log.info(">>>>>>>>>> DO Update >>>>>>>>>>>>")
+        log.info(">>>>>>>>>> start _do_update method  >>>>>>>>>>>>")
         jobs = self._do_update(applyList)
-        log.info(">>>>>>>>>>END DO Update >>>>>>>>>>>>")
-        log.info(jobs)
+        log.info(">>>>>>>>>>END _do_update_method >>>>>>>>>>>>")
+        jobs.close()
+        self.client.close()
         self.client.setUpdateCallback(self.callback )
 
 #    @ExceptionHandler
@@ -585,9 +587,6 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         '''
         Implement the {backend}-{install, update}-packages functionality
         '''
-
-        # FIXME: use only_trusted
-
         for package_id in package_ids:
             name, version, flavor, installed = self._findPackage(package_id)
             log.info((name, version, flavor, installed ))
@@ -748,9 +747,6 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         package_id = package_ids[0]
         #name, version, flavor, installed = self._findPackage(package_id)
         
-        summary = package_id.split(";")
-        log.info("====== geting summary")
-        log.info(summary)
         name,version,arch,data = pkpackage.get_package_from_id(package_id)
         cache = Cache()
         pkgDict = cache.resolve(name)
@@ -779,6 +775,7 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
             pkg_id = package_id.split(";")
             pkg_id[3] = pkgDict["label"]
             package_id = ";".join(pkg_id)
+            log.info(package_id)
             self.details(package_id, license, categories, longDesc, url, 0)
 
     def _show_package(self, name, version, flavor, status):
@@ -798,7 +795,9 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         else:
             return RESTART_NONE
 
-    def _get_info(self, name):
+    def _get_info(self, name, critical = False):
+        if critical == True:
+            return INFO_SECURITY
         if name in self.rebootpkgs:
             return INFO_SECURITY
         elif name in self.restartpkgs:
@@ -849,6 +848,7 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         else:
             return UPDATE_STATE_STABLE
     @ExceptionHandler
+    
     def get_updates(self, filters):
         self.allow_cancel(True)
         self.percentage(0)
@@ -860,33 +860,42 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         log.info("============== get_updates ========================")
         log.info("get fullUpdateItemList")
         updateItems =self.client.fullUpdateItemList()
-#        updateItems = cli.cli.getUpdateItemList()
+#        updateItems = self.client.getUpdateItemList()
         applyList = [ (x[0], (None, None), x[1:], True) for x in updateItems ]
-        log.info("_get_update ....")
 
         self.status(STATUS_RUNNING)
+
         updJob, suggMap = self._get_update(applyList)
         log.info("_get_update ....end.")
 
         jobLists = updJob.getJobs()
         log.info("getting JobLists...........")
         r = []
+        numJobs = len(jobLists)
+        log.info("total job on get-updates %s" % len(jobLists))
         for num, job in enumerate(jobLists):
-            name = job[0][0]
-
-            # On an erase display the old version/flavor information.
-            version = job[0][2][0]
-            if version is None:
-                version = job[0][1][0]
-
-            flavor = job[0][2][1]
-            if flavor is None:
-                flavor = job[0][1][1]
-            
-            info = self._get_info(name)
-            trove_info = ( ( name,version,flavor ), info) 
-            r.append(trove_info)
-            #self._show_package(name, version, flavor, info)
+            if numJobs > 1:
+                if num in updJob.getCriticalJobs():
+                    log.info("critical job>>")
+                log.info("Job %d of %d"%(num+1,numJobs))
+            for troves in job:
+                #example ('Mesa', (VFS('/foresight.rpath.org@fl:2-devel/7.8.1-4-1'), Flavor('is: x86')), (VFS('/foresight.rpath.org@fl:2-devel/7.8.2-1-1'), Flavor('is: x86')), False)
+                name, ( oldver,oldflavor),(newver,newflavor ),flag  = troves
+                log.info(" %s %s[%s] >> %s[%s] " % (name,oldver,oldflavor,newver,newflavor) )
+                if ":" in name:
+                    continue
+                #name = job[0][0]
+                version = newver # job[0][2][0]
+                if version is None:
+                    version = oldver
+
+                flavor = newflavor #job[0][2][1]
+                if flavor is None:
+                    flavor = oldflavor #job[0][1][1]
+                
+                info = self._get_info(name)
+                trove_info = ( ( name,version,flavor ), info) 
+                r.append(trove_info)
         
         pkg_list = Cache().resolve_list([ name for (  ( name,version,flavor), info )  in r ])
         log.info("generate the pkgs ")
@@ -898,9 +907,6 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
                 if name == pkg["name"]:
                     npkg = self._convert_package( trove, pkg)
                     new_res.append( ( npkg, info ) )
-
-        log.info(new_res)
-
         self._show_package_list(new_res)
         log.info("============== end get_updates ========================")
         self.client.setUpdateCallback(self.callback)
@@ -909,15 +915,15 @@ class PackageKitConaryBackend(PackageKitBaseBackend):
         '''
         find a package based on a package id (name;version;arch;summary)
         '''
-        log.info("========== _findPackage ==========")
-        log.info(package_id)
+#        log.info("========== _findPackage ==========")
+ #       log.info(package_id)
         troveTuples = self.get_package_from_id(package_id)
-        log.info(troveTuples)
+  #      log.info(troveTuples)
         for troveTuple in troveTuples:
-            log.info("======== trove ")
-            log.info(troveTuple)
+   #         log.info("======== trove ")
+    #        log.info(troveTuple)
             installed = self.check_installed(troveTuple)
-            log.info(installed)
+     #       log.info(installed)
             name, version, flavor = troveTuple
             return name, version, flavor, installed
         else:
diff --git a/backends/conary/conaryCallback.py b/backends/conary/conaryCallback.py
index 7dc9ffc..62f4a6d 100644
--- a/backends/conary/conaryCallback.py
+++ b/backends/conary/conaryCallback.py
@@ -22,164 +22,110 @@ from packagekit.backend import *
 from conaryProgress import PackagekitProgress
 from pkConaryLog import log
 
-MEGA = 1048576.0
 
+MEGA = 1048576.0
 class UpdateSystemCallback(callbacks.UpdateCallback):
     def __init__(self, backend, cfg=None):
         callbacks.UpdateCallback.__init__(self)
-        log.info("==== callback ==== ")
-        if cfg:
-            self.setTrustThreshold(cfg.trustThreshold)
-
         self.backend = backend
-        self.currentJob = None
-        self.smallUpdate = False
-        self.error = []
-        self.progress = PackagekitProgress()
-        self.progress.set_steps([ 30,60 ]  )
-        self.disablepercent = False
-        self.dostep = True
-    #1
-    #3
+        self.hunk = 0
+        self.totalHunk = 0
+    def preparingChangeSet(self):
+        log.info("Callback UpdateSytem:preparingChangeset")
     def requestingChangeSet(self):
-        log.info("Callback UpdateSystem........ STATUS_REQUEST changeset ")
         self.backend.status(STATUS_REQUEST)
-#        self.backend.percentage(self.progress.percent)
- #       log.info(self.progress.percent)
-    #2
+        log.info("Callback UpdateSytem:requestingChangeset of %s/%s hunks" %(self.hunk,self.totalHunk))
+    def sendingChangeset(self,got,need):
+        log.info("Callback updateSystem:sendingChangeset %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
+
     def downloadingChangeSet(self, got, need):
         self.backend.status(STATUS_DOWNLOAD)
-        log.info("Callback UpdateSystem........ STATUS_DOWNLOAD  Changeset %.2f percent %.2f/%.2f Mbytes" % ( got*100/float(need), got/MEGA,need/MEGA) )
-        self.progress.set_subpercent( got*100 / float(need) )
-        self.backend.percentage( self.progress.percent )
-        log.info( "%s percent" % self.progress.percent)
-        if got == need:
-            log.info("Do a step ========0")
-            self.progress.step()
+        log.info("Callback updateSystem:downloadingChangeSet (%s/%s hunks) %s percent of %.2f/%.2f bytes" % (self.hunk,self.totalHunk, int( got*100/float(need)), got/MEGA,need/MEGA) )
 
-    #4
     def resolvingDependencies(self):
-        log.info("Callback UpdateSystem........ STATUS_DEP_RESOLVE ")
-        self.backend.percentage(self.progress.percent)
         self.backend.status(STATUS_DEP_RESOLVE)
-
-    #5  >> request> download
+        log.info("callBack updateSystem:resolvingDependencies (%s/%s)" % (self.hunk.self.totalHunk))
+    def downloadingFileContents(self,got,need):
+        log.info("Callback updateSystem:downloadingFileContents %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
+    def requestingFileContents(self):
+        log.info("callBack updateSystem:requestingFileContents")
     def setChangesetHunk(self, num, total):
-        log.info("callback. .......... set Changeset HUnk %s/%s" % (num, total ) )
-        if total > 0:
-            p = num*100/float(total)
-        else:
-            p = 0
-        log.info("Do a supercent ========sub")
-        self.progress.set_subpercent(p)
-        self.disablepercent = True
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
-        if num == total:
-            self.dostep =True
+        self.hunk = num
+        self.totalHunk = total
+        log.info("Callback updateSystem:setChangesetHunk countHunk: %.2f/ totalHunk %.2f Hunks" % ( int( num*100/float(total)), num,total) )
     #6 
     def setUpdateHunk(self, hunk, hunkCount):
-        log.info("callback. .......... set update HUnk %s/%s" % ( hunk, hunkCount))
-        if self.dostep:
-            self.disablepercent = True
-            self.dostep = False
-
-
-        if hunk < hunkCount:
-            p = hunk*100/float(hunkCount)
-            log.info("Do a supercent ========sub")
-            self.progress.set_subpercent( p )
-        else:
-            self.smallUpdate = True
-
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
+        num,total = hunk,hunkCount
+        log.info("Callback updateSystem:setUpdateHunk  %d percent of  %.2f/%.2f Hunks" % ( int( num*100/float(total)), num,total) )
 
     def setUpdateJob(self, job):
+        log.info("callback updatesystem:setUpdateJob")
+        log.info(job)
         self.currentJob = job
-        self.backend.percentage(self.progress.percent)
-        log.info("callback UpdateSystem. setUpdateJob")
-        log.info(self.progress.percent)
-        
 
     def creatingRollback(self):
-        #self.backend.status('Creating Rollback')
+        log.info("callback updatesystem:creatingRollback")
         self.backend.status(STATUS_ROLLBACK)
-        self.backend.percentage(self.progress.percent)
-        log.info("callback updateSystem. creatingRollback")
-        log.info(self.progress.percent)
-        log.info(self.progress.percent)
-
 
     def preparingUpdate(self, troveNum, troveCount, add=0):
-        #self.progress.step()
-        log.info("callback updateSystem. preparingUpdate")
+        log.info("callback updatesystem:preparingUpdate (%s/%s) %d percent %.2f/%.2f trove"%( self.hunk,self.totalHunk,int( troveNum*100/float(troveCount)),troveNum,troveCount))
         if not self.currentJob or len(self.currentJob) == 0 or troveNum > troveCount:
             return
-
-
-        self.backend.percentage(self.progress.percent)
         if troveNum > 0:
             troveNum -= 1
-        job = self.currentJob[troveNum]
-        name = job[0]
-        oldVersion, oldFlavor = job[1]
-        newVersion, newFlavor = job[2]
-        #log.info("JOB>>>>>>>> %s " % str(job) )
-        if oldVersion and newVersion:
-            self.backend.status(STATUS_UPDATE)
-            package_id = self.backend.get_package_id(name, newVersion, newFlavor)
-            self.backend.package(package_id, INFO_UPDATING, '')
-        elif oldVersion and not newVersion:
-            self.backend.status(STATUS_REMOVE)
-            package_id = self.backend.get_package_id(name, oldVersion, oldFlavor)
-            self.backend.package(package_id, INFO_REMOVING, '')
-        elif not oldVersion and newVersion:
-            self.backend.status(STATUS_INSTALL)
-            package_id = self.backend.get_package_id(name, newVersion, newFlavor)
-            self.backend.package(package_id, INFO_INSTALLING, '')
-        log.info(self.progress.percent)
-
+        if troveNum <= len(self.currentJob):
+            try:
+                job = self.currentJob[troveNum]
+            except:
+                return 
+            name, ( oldVersion,oldFlavor),(newVersion,newFlavor ),flag  = job
+            #oldVersion, oldFlavor = job[1]
+            #newVersion, newFlavor = job[2]
+            if oldVersion and newVersion:
+                self.backend.status(STATUS_UPDATE)
+                if ":" not  in name:
+                    package_id = self.backend.get_package_id(name, newVersion, newFlavor)
+                    log.info("sending update: %s" % name)
+                    self.backend.package(package_id, INFO_UPDATING, '')
+            """
+            elif oldVersion and not newVersion:
+                self.backend.status(STATUS_REMOVE)
+                package_id = self.backend.get_package_id(name, oldVersion, oldFlavor)
+                self.backend.package(package_id, INFO_REMOVING, '')
+            elif not oldVersion and newVersion:
+                self.backend.status(STATUS_INSTALL)
+                package_id = self.backend.get_package_id(name, newVersion, newFlavor)
+                self.backend.package(package_id, INFO_INSTALLING, '')
+            """
+    def updatingDatabase(self,step,steptotal):
+
+        log.info("callback updatesystem:updatetingDatabase %d percent %.2f/%.2f trove"%( int( step*100/float(steptotal)),step,steptotal))
     def creatingDatabaseTransaction(self, troveNum, troveCount):
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
+        log.info("callback updatesystem:creatingDatabaseTransaction %d percent %.2f/%.2f trove"%( int( troveNum*100/float(troveCount)),troveNum,troveCount))
         self.backend.status(STATUS_COMMIT)
-        #self.preparingUpdate(troveNum, troveCount, add=troveCount)
-        log.info("Callback UpdateSystem........ CreateingDatabaseTransaction %.2f / %.2f " % ( troveNum, troveCount ) )
-        #self.progress.set_subpercent( got*100 / float(need) )
 
     def committingTransaction(self):
-        log.info('callback UpdateSystem......Committing Transaction')
-
+        log.info("callback updatesystem:committingTransaction")
         self.backend.status(STATUS_COMMIT)
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
-
     def updateDone(self):
-        log.info("callback. ..........  update done")
-        self.backend.percentage(self.progress.percent)
+        log.info("callback updatesystem:updateDone")
         self.currentJob = None
-        log.info(self.progress.percent)
-
     def downloadingFileContents(self, got, need):
-        #self.backend.status('Downloading files for changeset')
-        log.info("Callback ........ STATUS_DOWNLOAD  FIle Contents %s " %  str( got*100/need  ))
+        log.info("Callback updateSystem:downloadingChangeSet Changeset %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
+    #4
         self.backend.status(STATUS_DOWNLOAD)
-        #self.backend.sub_percentage(got*100/need)
 
     def requestingFileContents(self):
-        #self.backend.status('Requesting File Contents')
-        log.info("Callback ........ STATUS_REQUEST request File contents ")
+        log.info("callback updatesystem:requestingFileContents")
         self.backend.status(STATUS_REQUEST)
 
     def removeFiles(self, filenum, total):
-        log.info("Callback ........ STATUS_REMOVE %s/%sfiles" %( filenum, total) )
+        log.info("Callback updateSystem:removeFiles %s percent  of %.2f/%.2f files" % ( int( filenum*100/float(total)), filenum,total) )
         self.backend.status(STATUS_REMOVE)
-        self.preparingUpdate(filenum, total, add=total)
+    def restoreFiles(self, size, totalSize):
+        log.info("Callback updateSystem:restoreFiles %s percent  of %.2f/%.2f files" % ( int( size*100/float(totalSize)), size,totalSize) )
     
     def done(self):
-        #self.backend.status('Done')
-    #    self.progress.step()
         log.info("DONEEEEEEEEEEEE")
  
     def warning(self, msg, *args, **kwargs):
@@ -207,32 +153,49 @@ class GetUpdateCallback(callbacks.UpdateCallback):
         self.error = []
         self.progress = PackagekitProgress()
         self.progress.set_steps([1,50, 100 ]  )
-    # 1 >> downloadingChangeSet
-    # 2 >> downloadingChangeSet
+    def preparingChangeSet(self):
+        log.info("Callback getUpdates ......... preparingChangeset")
+    def sendingChangeset(self,  got,need):
+        log.info("Callback getUpdates:sendingChangeset. %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
     def requestingChangeSet(self):
-        log.info("Callback getUpdates ........ STATUS_REQUEST changeset ")
+        log.info("Callback getUpdates:requestingChangeSet  ........ STATUS_REQUEST changeset ")
         self.backend.status(STATUS_REQUEST)
         self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
         self.progress.step()
 
     def downloadingChangeSet(self, got, need):
-       # log.info("Callback getUpdates. Changeset %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
+        log.info("Callback getUpdates:downloadingChangeSet Changeset %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
         self.backend.status(STATUS_DOWNLOAD)
         self.progress.set_subpercent( got*100 / float(need) )
         self.backend.percentage( self.progress.percent )
-       # log.info( "%s percent" % self.progress.percent)
-    # 3
+        log.info( "%s percent" % self.progress.percent)
+    def requestingFileContents(self):
+        log.info("callBack getUpdates requestingFileContents")
+    def downloadingFileContents(self,got,need):
+        log.info("Callback getUpdates:downloadingFileContents  %s percent of %.2f/%.2f bytes" % ( int( got*100/float(need)), got/MEGA,need/MEGA) )
+    def setChangesetHunk(self, hunk, hunkCount):
+        """
+        Called when creating changesets, such as when downloading changesets.
+        @param hunk: the number of the changeset being created (starts at 1)
+        @type hunk: integer
+        @param hunkCount: total number of changesets to be created.
+        @type hunkCount: integer
+        @return: None
+        """
+        log.info("Callback getUpdates:setChangesetHunk  %s percent of %.2f/%.2f bytes" % ( int( hunk*100/float(hunkCount)), hunk/MEGA,hunkCount/MEGA) )
+
+  # 3
     def resolvingDependencies(self):
-        #self.backend.status('Resolving Dependencies')
-        self.backend.status(STATUS_DEP_RESOLVE)
-        self.progress.step()
-        log.info("Callback getUpdates........ STATUS_DEP_RESOLVE ")
-        self.backend.percentage(self.progress.percent)
-        log.info("do a step>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>")
+       # self.backend.status(STATUS_DEP_RESOLVE)
+       # self.progress.step()
+        log.info("Callback getUpdates:resolvingDependencies ...... STATUS_DEP_RESOLVE ")
+       # self.backend.percentage(self.progress.percent)
+    def done(self):
+        self.log("Callback getUpdates:DONE()>>>>>")
+    ## update callback
+    def preparingUpdate(self,troveNum,troveCount):
+        log.info("Callback getUpdates:preparingUpdate  %s percent of %.2f/%.2f bytes" % ( int( hunk*100/float(hunkCount)), hunk/MEGA,hunkCount/MEGA) )
 
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
   
 class UpdateCallback(callbacks.UpdateCallback):
     def __init__(self, backend, cfg=None):
diff --git a/backends/conary/conaryProgress.py b/backends/conary/conaryProgress.py
index 17d4543..1ba6092 100644
--- a/backends/conary/conaryProgress.py
+++ b/backends/conary/conaryProgress.py
@@ -17,6 +17,8 @@
 # Copyright (C) 2008
 #    Richard Hughes <richard@hughsie.com>
 
+from pkConaryLog import log
+
 class PackagekitProgress:
     '''
     Progress class there controls the total progress of a transaction
@@ -43,9 +45,6 @@ class PackagekitProgress:
         if you do a progress.step() and if the next is a sub_percent()  _not print the percente_ first
         set_subpercent an then print progress.percent.
     '''
-
-    #TODO: Add support for elapsed/remaining time
-
     def __init__(self):
         self.percent = 0
         self.steps = []
@@ -60,12 +59,14 @@ class PackagekitProgress:
         self.reset()
         self.steps = steps
         self.current_step = 0
+        log.info("[Progress] Setting the following steps: %s" % (str(self.steps),))
 
     def reset(self):
         self.percent = 0
         self.steps = []
         self.current_step = 0
         self.subpercent = 0
+        log.info("[Progress] Reset")
 
     def step(self):
         '''
@@ -78,6 +79,7 @@ class PackagekitProgress:
         else:
             self.percent = 100
             self.subpercent = 0
+        log.info("[Progress] Step -> %d, Percent -> %d " % (self.current_step, self.percent))
 
     def set_subpercent(self, pct):
         '''
@@ -85,6 +87,7 @@ class PackagekitProgress:
         '''
         self.subpercent = pct
         self._update_percent()
+        log.info("[Progress] Update SubPercent: Percent -> %d, SubPercent -> %d" % (self.percent, self.subpercent))
 
     def _update_percent(self):
         '''
diff --git a/backends/conary/conarypk.py b/backends/conary/conarypk.py
index 7a8628e..a690c32 100644
--- a/backends/conary/conarypk.py
+++ b/backends/conary/conarypk.py
@@ -26,6 +26,9 @@ class ConaryPk:
         cfg.initializeFlavors()
         self.cfg = cfg
 
+        # Don't use threaded mode
+        self.cfg.configLine('threaded False')
+
         cli = ConaryClient(cfg)
 
         # labels enable on /etc/conary/config.d/
@@ -71,6 +74,7 @@ class ConaryPk:
         from conary.deps.deps import compatibleFlavors
         for label in self.default_label:
             trove = where.getTroveLeavesByPath([path_file], label)
+            log.info(trove)
             if trove.get(path_file):
                 for ( name,version,flavor) in trove[path_file]:
                     return name
@@ -132,7 +136,7 @@ class ConaryPk:
 
 if __name__ == "__main__":
     conary = ConaryPk()
-    print conary.search_path("/usr/bin/vim")
+    print conary.search_path("packagekit")
     #print conary.query("gimpasdas")
     #print conary.request_query("dpaster",'zodyrepo.rpath.org@rpl:devel')
     #print conary.request_query("gimp")
diff --git a/backends/conary/generateXML.py b/backends/conary/generateXML.py
index a512aac..1ca14d7 100644
--- a/backends/conary/generateXML.py
+++ b/backends/conary/generateXML.py
@@ -67,20 +67,22 @@ def generate_xml( troves, label):
         document.append(package)
     return document
 
-
-def init(label, fileoutput ):
-    conary = ConaryPk()
-    cli = conary.cli
-
-    cfg = conary.cfg
-    log.info(" write %s on xml" %  label)
-    pkgs = getPackagesFromLabel(cfg,cli,label)
-    troves = conary.repos.getTroves(pkgs,withFiles=False)
-    nodes = generate_xml(troves,label)
-    cElementTree.ElementTree(nodes).write(fileoutput)
-    log.info("%s repo done" % label)
-
-
+def init(label, fileoutput, conarypk=None):
+
+    if not conarypk:
+        conarypk = ConaryPk()
+
+    cli = conarypk.cli
+    cfg = conarypk.cfg
+    log.info("Attempting to retrieve repository data for %s" %  label)
+    try:
+        pkgs = getPackagesFromLabel(cfg,cli,label)
+        troves = conarypk.repos.getTroves(pkgs,withFiles=False)
+        nodes = generate_xml(troves,label)
+        cElementTree.ElementTree(nodes).write(fileoutput)
+        log.info("Successfully wrote XML data for label %s into file %s" % (label, fileoutput))
+    except:
+        log.error("Failed to gather data from the repository")
 
 if __name__ == "__main__":
     init('zodyrepo.rpath.org@rpl:devel','tmp.xml')
diff --git a/backends/conary/pk-backend-conary.c b/backends/conary/pk-backend-conary.c
index 485f61d..bf4d568 100644
--- a/backends/conary/pk-backend-conary.c
+++ b/backends/conary/pk-backend-conary.c
@@ -119,7 +119,7 @@ static void
 backend_get_updates (PkBackend *backend, PkBitfield filters)
 {
 	gchar *filters_text;
-	filters_text = pk_filter_bitfield_to_text (filters);
+	filters_text = pk_filter_bitfield_to_string (filters);
 	pk_backend_spawn_helper (spawn, "conaryBackend.py", "get-updates", filters_text, NULL);
 	g_free (filters_text);
 }
@@ -153,7 +153,7 @@ backend_install_packages (PkBackend *backend, gboolean only_trusted, gchar **pac
 
 	/* send the complete list as stdin */
 	package_ids_temp = pk_package_ids_to_text (package_ids);
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "install-packages", pk_backend_bool_to_text (only_trusted), package_ids_temp, NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "install-packages", pk_backend_bool_to_string (only_trusted), package_ids_temp, NULL);
 	g_free (package_ids_temp);
 }
 
@@ -167,7 +167,7 @@ backend_install_files (PkBackend *backend, gboolean only_trusted, const gchar *f
 	gchar *package_ids_temp;
 
 	package_ids_temp = pk_package_ids_to_text (package_ids);
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "install-files", pk_backend_bool_to_text (only_trusted), full_paths, NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "install-files", pk_backend_bool_to_string (only_trusted), full_paths, NULL);
 	g_free (package_ids_temp);
 }
  */
@@ -185,7 +185,7 @@ backend_refresh_cache (PkBackend *backend, gboolean force)
 		return;
 	}
 
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "refresh-cache", pk_backend_bool_to_text (force), NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "refresh-cache", pk_backend_bool_to_string (force), NULL);
 }
 
 /**
@@ -204,7 +204,7 @@ backend_remove_packages (PkBackend *backend, gchar **package_ids, gboolean allow
 
 	/* send the complete list as stdin */
 	package_ids_temp = pk_package_ids_to_text (package_ids);
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "remove-packages", pk_backend_bool_to_text (allow_deps), pk_backend_bool_to_text (autoremove), package_ids_temp, NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "remove-packages", pk_backend_bool_to_string (allow_deps), pk_backend_bool_to_string (autoremove), package_ids_temp, NULL);
 	g_free (package_ids_temp);
 }
 
@@ -212,12 +212,18 @@ backend_remove_packages (PkBackend *backend, gchar **package_ids, gboolean allow
  * pk_backend_search_name:
  */
 static void
-backend_search_name (PkBackend *backend, PkBitfield filters, const gchar *search)
+backend_search_name (PkBackend *backend, PkBitfield filters, gchar **values)
 {
 	gchar *filters_text;
-	filters_text = pk_filter_bitfield_to_text (filters);
+    gchar *search;
+
+    search = g_strjoinv ("&", values);
+
+	filters_text = pk_filter_bitfield_to_string (filters);
 	pk_backend_spawn_helper (spawn, "conaryBackend.py", "search-name", filters_text, search, NULL);
 	g_free (filters_text);
+    g_free(search);
+    return;
 }
 
 /**
@@ -226,7 +232,7 @@ static void
 backend_search_group (PkBackend *backend, PkBitfield filters, const gchar *search)
 {
 	gchar *filters_text;
-	filters_text = pk_filter_bitfield_to_text (filters);
+	filters_text = pk_filter_bitfield_to_string (filters);
 	pk_backend_spawn_helper (spawn, "conaryBackend.py", "search-group", filters_text, search, NULL);
 	g_free (filters_text);
 }
@@ -241,7 +247,7 @@ static void
 backend_search_details (PkBackend *backend, PkBitfield filters, const gchar *search)
 {
 	gchar *filters_text;
-	filters_text = pk_filter_bitfield_to_text (filters);
+	filters_text = pk_filter_bitfield_to_string (filters);
 	pk_backend_spawn_helper (spawn, "conaryBackend.py", "search-details", filters_text, search, NULL);
 	g_free (filters_text);
 }
@@ -263,7 +269,7 @@ backend_update_packages (PkBackend *backend, gboolean only_trusted, gchar **pack
 	/* send the complete list as stdin */
 	package_ids_temp = pk_package_ids_to_text (package_ids);
 	egg_debug("Updates Packages");
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "update-packages", pk_backend_bool_to_text (only_trusted), package_ids_temp, NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "update-packages", pk_backend_bool_to_string (only_trusted), package_ids_temp, NULL);
 	g_free (package_ids_temp);
 }
 
@@ -273,7 +279,7 @@ backend_update_packages (PkBackend *backend, gboolean only_trusted, gchar **pack
 static void
 backend_update_system (PkBackend *backend, gboolean only_trusted)
 {
-	pk_backend_spawn_helper (spawn, "conaryBackend.py", "update-system", pk_backend_bool_to_text (only_trusted), NULL);
+	pk_backend_spawn_helper (spawn, "conaryBackend.py", "update-system", pk_backend_bool_to_string (only_trusted), NULL);
 }
 
 /**
@@ -297,7 +303,7 @@ static void
 backend_resolve (PkBackend *backend, PkBitfield filters, gchar **package_ids)
 {
 	gchar *filters_text;
-	filters_text = pk_filter_bitfield_to_text (filters);
+	filters_text = pk_filter_bitfield_to_string (filters);
 	pk_backend_spawn_helper (spawn, "conaryBackend.py", "resolve", filters_text, package_ids[0], NULL);
 	g_free (filters_text);
 }
@@ -310,7 +316,7 @@ static void
 backend_get_packages (PkBackend *backend, PkBitfield filters)
 {
     gchar *filters_text;
-    filters_text = pk_filter_bitfield_to_text (filters);
+    filters_text = pk_filter_bitfield_to_string (filters);
     pk_backend_spawn_helper (spawn, "conaryBackend.py", "get-packages", filters_text, NULL);
     g_free (filters_text);
 }
@@ -318,12 +324,17 @@ backend_get_packages (PkBackend *backend, PkBitfield filters)
  * pk_backend_search_file:
  */
 static void
-backend_search_file (PkBackend *backend, PkBitfield filters, const gchar *search)
+backend_search_file (PkBackend *backend, PkBitfield filters, gchar **search)
 {
         gchar *filters_text;
-        filters_text = pk_filter_bitfield_to_text (filters);
-        pk_backend_spawn_helper (spawn, "conaryBackend.py", "search-file", filters_text, search, NULL);
+        gchar *values;
+        values = g_strjoinv("&", search);
+        filters_text = pk_filter_bitfield_to_string (filters);
+
+        pk_backend_spawn_helper (spawn, "conaryBackend.py", "search-file", filters_text, values, NULL);
         g_free (filters_text);
+        g_free (values);
+        return;
 }
 
 /**
@@ -344,10 +355,29 @@ static void
 backend_get_repo_list (PkBackend *backend, PkBitfield filters)
 {
     gchar *filters_text;
-    filters_text = pk_filter_bitfield_to_text (filters);
+    filters_text = pk_filter_bitfield_to_string (filters);
     pk_backend_spawn_helper (spawn, "conaryBackend.py", "get-repo-list", filters_text, NULL);
     g_free (filters_text);
 }
+static void
+backend_simulate_install_packages (PkBackend *backend, gchar **package_ids)
+{
+
+    pk_backend_finished (backend);
+}
+static void
+backend_simulate_remove_packages (PkBackend *backend, gchar **package_ids)
+{
+
+    pk_backend_finished (backend);
+}
+
+static void
+backend_simulate_update (PkBackend *backend, gchar **package_ids)
+{
+
+    pk_backend_finished (backend);
+}
 
 
 PK_BACKEND_OPTIONS (
@@ -389,8 +419,8 @@ PK_BACKEND_OPTIONS (
 	backend_update_system,			/* update_system */
 	NULL,					/* what_provides */
 	NULL,					/* simulate_install_files */
-	NULL,					/* simulate_install_packages */
-	NULL,					/* simulate_remove_packages */
-	NULL					/* simulate_update_packages */
+	backend_simulate_install_packages,					/* simulate_install_packages */
+	backend_simulate_remove_packages,					/* simulate_remove_packages */
+	backend_simulate_update					/* simulate_update_packages */
 );
 
diff --git a/config.h b/config.h
index 0d2e1ef..228f1e3 100644
--- a/config.h
+++ b/config.h
@@ -2,7 +2,7 @@
 /* config.h.in.  Generated from configure.ac by autoheader.  */
 
 /* default backend prefix */
-#define DEFAULT_BACKEND "yum"
+#define DEFAULT_BACKEND "conary"
 
 /* Build test code */
 #define EGG_BUILD_TESTS 1
@@ -14,7 +14,7 @@
 #define GETTEXT_PACKAGE "PackageKit"
 
 /* Define to 1 if you have the <archive.h> header file. */
-#define HAVE_ARCHIVE_H 1
+/* #undef HAVE_ARCHIVE_H */
 
 /* Define to 1 if you have the `bind_textdomain_codeset' function. */
 #define HAVE_BIND_TEXTDOMAIN_CODESET 1
