diff -r 124541567e84 backends/conary/XMLCache.py
--- a/backends/conary/XMLCache.py	Wed Mar 18 12:12:10 2009 -0600
+++ b/backends/conary/XMLCache.py	Wed Mar 25 16:24:46 2009 -0600
@@ -204,14 +204,20 @@
 
     def checkCachedUpdateJob(self, applyList):
         jobPath = self._getJobCachePath(applyList)
+        log.info("CheckjobPath %s" % jobPath)
         if os.path.exists(jobPath):
             return jobPath
     
     def cacheUpdateJob(self, applyList, updJob):
         jobPath = self._getJobCachePath(applyList)
+        log.info("jobPath %s" % jobPath)
         if os.path.exists(jobPath):
+            log.info("deleting the JobPath %s "% jobPath)
             util.rmtree(jobPath)
+            log.info("end deleting the JobPath %s "% jobPath)
+        log.info("making the logPath ")
         os.mkdir(jobPath)
+        log.info("freeze JobPath")
         updJob.freeze(jobPath)
 
     def convertTroveToDict(self, troveTupleList):
diff -r 124541567e84 backends/conary/conaryBackend.py
--- a/backends/conary/conaryBackend.py	Wed Mar 18 12:12:10 2009 -0600
+++ b/backends/conary/conaryBackend.py	Wed Mar 25 16:24:46 2009 -0600
@@ -192,7 +192,7 @@
                 error["group"] = ERROR_GROUP_NOT_FOUND
                 error["details"] = ERROR_PACKAGE_NOT_FOUND
                 error["name"] = error["details"]
-                self.error(error[where], "Not Found %s " % searchlist )
+                #self.error(error[where], "Not Found %s " % searchlist )
             else:
                 troveTupleList = cache.convertTroveToDict( troveTupleList ) 
                 log.info("convert")
@@ -204,7 +204,9 @@
         from conary.conaryclient.update import NoNewTrovesError
         updJob = self.client.newUpdateJob()
         try:
+            log.info("prepare updateJOb...............")
             suggMap = self.client.prepareUpdateJob(updJob, applyList)
+            log.info("end prepare updateJOB..............")
         except NoNewTrovesError:
             self.error(ERROR_NO_PACKAGES_TO_UPDATE, "No new apps were found")
         if cache:
@@ -222,7 +224,7 @@
             except IOError, err:
                 updJob = None
         else:
-            updJob = self._get_update(applyList, cache=False)
+            updJob,suggMap = self._get_update(applyList, cache=False)
         self.allow_cancel(False)
         try:
             restartDir = self.client.applyUpdateJob(updJob)
@@ -280,8 +282,6 @@
         self.allow_cancel(True)
         self.percentage(None)
         self.status(STATUS_INFO)
-
-        log.info("======== resolve =========")
         log.info("filters: %s package:%s " % (filters, package))
 
         cache = Cache()
@@ -448,20 +448,22 @@
         self.status(STATUS_UPDATE)
         self.client.setUpdateCallback( UpdateSystemCallback(self, self.cfg) )
         updateItems = self.client.fullUpdateItemList()
-        pprint(updateItems)
+        [ log.info(i) for i,ver,flav in updateItems]
         applyList = [ (x[0], (None, None), x[1:], True) for x in updateItems ]
 
         log.info(">>>>>>>>>> get update >>>>>>>>>>>>")
         #self._get_update(applyList)
         log.info(">>>>>>>>>> DO Update >>>>>>>>>>>>")
-        self._do_update(applyList)
+        jobs = self._do_update(applyList)
         log.info(">>>>>>>>>>END DO Update >>>>>>>>>>>>")
+        log.info(jobs)
         self.client.setUpdateCallback(self.callback )
 
 #    @ExceptionHandler
     def refresh_cache(self):
         #log.debug("refresh-cache command ")
-        self.percentage()
+    #    self.percentage()
+
         self.status(STATUS_REFRESH_CACHE)
         cache = Cache()
         cache.refresh()
@@ -672,8 +674,10 @@
                 longDesc = metadata["longDesc"] 
             else:
                 longDesc = ""
-
-            url = "http://www.foresightlinux.org/packages/%s.html" % name
+            if "url" in metadata:
+                url = metadata["url"]
+            else:
+                url = "http://www.foresightlinux.org/packages/%s.html" % name
 
             categories  = ""
             if metadata.has_key("category"):
@@ -687,6 +691,7 @@
 
     def _show_package(self, name, version, flavor, status):
         '''  Show info about package'''
+        log.info(name)
         package_id = self.get_package_id(name, version, flavor)
         summary = package_id.split(";")
         if summary[3].split("#")[1]:
@@ -719,22 +724,19 @@
         log.info("callback changed")
         log.info("============== get_updates ========================")
         cli = ConaryPk()
+        log.info("get fullUpdateItemList")
         updateItems =cli.cli.fullUpdateItemList()
 #        updateItems = cli.cli.getUpdateItemList()
-        for i in updateItems:
-            log.info(i[0])
         applyList = [ (x[0], (None, None), x[1:], True) for x in updateItems ]
         log.info("_get_update ....")
+        self.status(STATUS_RUNNING)
         updJob, suggMap = self._get_update(applyList)
         log.info("_get_update ....end.")
 
         jobLists = updJob.getJobs()
-        log.info("get Jobs")
+        log.info("getting JobLists...........")
 
-        totalJobs = len(jobLists)
         for num, job in enumerate(jobLists):
-            status = '2'
-            log.info( (num, job)  )
             name = job[0][0]
 
             # On an erase display the old version/flavor information.
@@ -745,12 +747,11 @@
             flavor = job[0][2][1]
             if flavor is None:
                 flavor = job[0][1][1]
-
-            troveTuple = []
-            troveTuple.append(name)
-            troveTuple.append(version)
-            installed = self.check_installed(troveTuple)
-            self._show_package(name, version, flavor, INFO_NORMAL)
+            if name in self.rebootpkgs:
+                info = INFO_SECURITY
+            else:
+                info = INFO_NORMAL
+            self._show_package(name, version, flavor, info)
         log.info("============== end get_updates ========================")
         self.client.setUpdateCallback(self.callback)
 
diff -r 124541567e84 backends/conary/conaryCallback.py
--- a/backends/conary/conaryCallback.py	Wed Mar 18 12:12:10 2009 -0600
+++ b/backends/conary/conaryCallback.py	Wed Mar 25 16:24:46 2009 -0600
@@ -36,32 +36,33 @@
         self.smallUpdate = False
         self.error = []
         self.progress = PackagekitProgress()
-        self.progress.set_steps([ 50 ]  )
+        self.progress.set_steps([ 30,60 ]  )
         self.disablepercent = False
         self.dostep = True
     #1
     #3
     def requestingChangeSet(self):
         log.info("Callback UpdateSystem........ STATUS_REQUEST changeset ")
-        self.backend.status(STATUS_DOWNLOAD)
-        self.backend.percentage(self.progress.percent)
-        log.info(self.progress.percent)
-        if not self.disablepercent:
-            self.progress.step()
+        self.backend.status(STATUS_REQUEST)
+#        self.backend.percentage(self.progress.percent)
+ #       log.info(self.progress.percent)
     #2
     def downloadingChangeSet(self, got, need):
+        self.backend.status(STATUS_DOWNLOAD)
         log.info("Callback UpdateSystem........ STATUS_DOWNLOAD  Changeset %.2f percent %.2f/%.2f Mbytes" % ( got*100/float(need), got/MEGA,need/MEGA) )
-        if not self.disablepercent:
-            self.progress.set_subpercent( got*100 / float(need) )
+        self.progress.set_subpercent( got*100 / float(need) )
         self.backend.percentage( self.progress.percent )
         log.info( "%s percent" % self.progress.percent)
+        if got == need:
+            log.info("Do a step ========0")
+            self.progress.step()
 
     #4
     def resolvingDependencies(self):
         log.info("Callback UpdateSystem........ STATUS_DEP_RESOLVE ")
         self.backend.percentage(self.progress.percent)
         self.backend.status(STATUS_DEP_RESOLVE)
-        self.progress.step()
+
     #5  >> request> download
     def setChangesetHunk(self, num, total):
         log.info("callback. .......... set Changeset HUnk %s/%s" % (num, total ) )
@@ -69,6 +70,7 @@
             p = num*100/float(total)
         else:
             p = 0
+        log.info("Do a supercent ========sub")
         self.progress.set_subpercent(p)
         self.disablepercent = True
         self.backend.percentage(self.progress.percent)
@@ -79,13 +81,13 @@
     def setUpdateHunk(self, hunk, hunkCount):
         log.info("callback. .......... set update HUnk %s/%s" % ( hunk, hunkCount))
         if self.dostep:
-            self.progress.step()
             self.disablepercent = True
             self.dostep = False
 
 
         if hunk < hunkCount:
             p = hunk*100/float(hunkCount)
+            log.info("Do a supercent ========sub")
             self.progress.set_subpercent( p )
         else:
             self.smallUpdate = True
@@ -96,17 +98,22 @@
     def setUpdateJob(self, job):
         self.currentJob = job
         self.backend.percentage(self.progress.percent)
+        log.info("callback UpdateSystem. setUpdateJob")
         log.info(self.progress.percent)
+        
 
     def creatingRollback(self):
         #self.backend.status('Creating Rollback')
         self.backend.status(STATUS_ROLLBACK)
         self.backend.percentage(self.progress.percent)
+        log.info("callback updateSystem. creatingRollback")
+        log.info(self.progress.percent)
         log.info(self.progress.percent)
 
 
     def preparingUpdate(self, troveNum, troveCount, add=0):
         #self.progress.step()
+        log.info("callback updateSystem. preparingUpdate")
         if not self.currentJob or len(self.currentJob) == 0 or troveNum > troveCount:
             return
 
@@ -136,10 +143,12 @@
     def creatingDatabaseTransaction(self, troveNum, troveCount):
         self.backend.percentage(self.progress.percent)
         log.info(self.progress.percent)
-        self.preparingUpdate(troveNum, troveCount, add=troveCount)
+        self.backend.status(STATUS_COMMIT)
+        #self.preparingUpdate(troveNum, troveCount, add=troveCount)
+        log.info("callback UpdateSystem........creatingDatabaseTransactions")
 
     def committingTransaction(self):
-        #self.backend.status('Committing Transaction')
+        log.info('callback UpdateSystem......Committing Transaction')
 
         self.backend.status(STATUS_COMMIT)
         self.backend.percentage(self.progress.percent)
@@ -327,13 +336,18 @@
         newVersion, newFlavor = job[2]
         #log.info("JOB>>>>>>>> %s " % str(job) )
         if oldVersion and newVersion:
-            log.info("Callback ........ STATUS_UPDATE preparing Update ")
+            log.info("pU.. status Update")
             self.backend.status(STATUS_UPDATE)
             package_id = self.backend.get_package_id(name, newVersion, newFlavor)
             self.backend.package(package_id, INFO_UPDATING, '')
+        elif oldVersion and not newVersion:
+            self.backend.status(STATUS_REMOVE)
+            log.info("pU.. status remove")
+            package_id = self.backend.get_package_id(name, oldVersion, oldFlavor)
+            self.backend.package(package_id, INFO_REMOVING, '')
         elif not oldVersion and newVersion:
-            log.info("Callback ........ STATUS_INSTALL preparing Update")
-            self.backend.status(STATUS_INSTALL)
+            #self.backend.status(STATUS_INSTALL)
+            log.info("pU.. status install")
             package_id = self.backend.get_package_id(name, newVersion, newFlavor)
             self.backend.package(package_id, INFO_INSTALLING, '')
         log.info(self.progress.percent)
@@ -342,7 +356,8 @@
         log.info("callback. .......... creating Database Transactions")
         self.backend.percentage(self.progress.percent)
         log.info(self.progress.percent)
-        self.preparingUpdate(troveNum, troveCount, add=troveCount)
+        self.backend.status(STATUS_COMMIT)
+     #   self.preparingUpdate(troveNum, troveCount, add=troveCount)
 
     # 9
     def committingTransaction(self):
diff -r 124541567e84 backends/conary/pk-backend-conary.c
--- a/backends/conary/pk-backend-conary.c	Wed Mar 18 12:12:10 2009 -0600
+++ b/backends/conary/pk-backend-conary.c	Wed Mar 25 16:24:46 2009 -0600
@@ -321,8 +321,8 @@
 }
 
 PK_BACKEND_OPTIONS (
-	"Conary",				/* description */
-	"Ken VanDine <ken@vandine.org>",
+	"Conary with XMLCache",				/* description */
+	"Andres Vargas <zodman@foresightlinux.org>",
 						/* author */
 	backend_initialize,			/* initalize */
 	backend_destroy,			/* destroy */
diff -r 124541567e84 configure.ac
--- a/configure.ac	Wed Mar 18 12:12:10 2009 -0600
+++ b/configure.ac	Wed Mar 25 16:24:46 2009 -0600
@@ -1,6 +1,6 @@
 AC_PREREQ(2.52)
 
-AC_INIT(PackageKit, 0.4.5)
+AC_INIT(PackageKit, 0.4.6)
 AC_CONFIG_SRCDIR(src)
 AM_INIT_AUTOMAKE(AC_PACKAGE_NAME, AC_PACKAGE_VERSION)
 AM_CONFIG_HEADER(config.h)
@@ -75,11 +75,11 @@
 	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wformat-security"
 	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wmissing-include-dirs"
 	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wmissing-format-attribute"
-	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wclobbered"
-	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wempty-body"
-	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wignored-qualifiers"
+	#WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wclobbered"
+	#ARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wempty-body"
+	#ARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wignored-qualifiers"
 	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wsign-compare"
-	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wtype-limits"
+	#WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wtype-limits"
 	WARNINGFLAGS_CPP="$WARNINGFLAGS_CPP -Wuninitialized"
 
 	# work only in C
@@ -89,8 +89,8 @@
 	WARNINGFLAGS_C="$WARNINGFLAGS_C -Wshadow"
 	WARNINGFLAGS_C="$WARNINGFLAGS_C -Wno-strict-aliasing"
 	WARNINGFLAGS_C="$WARNINGFLAGS_C -Winline"
-	WARNINGFLAGS_C="$WARNINGFLAGS_C -Wmissing-parameter-type"
-	WARNINGFLAGS_C="$WARNINGFLAGS_C -Woverride-init"
+	#WARNINGFLAGS_C="$WARNINGFLAGS_C -Wmissing-parameter-type"
+	#WARNINGFLAGS_C="$WARNINGFLAGS_C -Woverride-init"
 else
 	WARNINGFLAGS_C=""
 	WARNINGFLAGS_CPP=""
