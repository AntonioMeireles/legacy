#
# Copyright (c) 2004-2005 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class GnomePackageRecipe(CPackageRecipe):
    buildRequires = [ 'pkgconfig:devel', 'gtk:devel',
                      'zlib:devel', 'xorg-x11:devel' ]

    name = 'gnomepackage'
    version = '2'
    extraConfig = ''
    preConfigure = ''
    preMake = ''
    preMakeInstall = 'GCONF_DISABLE_MAKEFILE_SCHEMA_INSTALL=1'
    makeArgs = ''
    makeInstallArgs = ''

    # set this to the URL of a source archive if the package
    # is not on GNOME's ftp server.
    externalArchive = None

    checkUseGnome = True

    # standard GNOME docs
    docs = []

    if Use.builddocs:
        extraConfig += ' --enable-gtk-doc'
        buildRequires.append('gtk-doc:runtime')
    else:
        extraConfig += ' --disable-gtk-doc'

    def setup(r):
        # only flavor this as "gnome" or "!gnome" if checkUseGnome is set
        if r.checkUseGnome == True and Use.gnome == False:
            pass
        if r.__class__.__name__ == 'GnomePackageRecipe':
            return
        r.macros.majversion = '.'.join(r.version.split('.')[0:2])

        r.unpack()
        r.build()
        r.install()

    def unpack(r):
        if r.externalArchive:
            r.addArchive(r.externalArchive)
        else:
            r.addArchive('ftp://ftp.gnome.org/pub/GNOME/sources/%(name)s/%(majversion)s/%(name)s-%(version)s.tar.bz2')

    def build(r):
        r.Configure(r.extraConfig, preConfigure=r.preConfigure)
        r.Make(r.makeArgs, preMake=r.preMake)

    def install(r):
        r.MakeInstall(r.makeInstallArgs, preMake=r.preMakeInstall)
        # this really needs to be the other way around, but we need
        # to find a way to automate that first.
        #r.Requires('%s:runtime' %r.macros.name,
        #                '%(libdir)s/gnome-vfs-2.0/modules/.*',
        #                '%(libdir)s/bonobo/.*',
        #                '%(libdir)s/gtk-2.0/modules/.*',
        #                '%(libdir)s/libglade/2.0/.*',
        #                '%(libdir)s/orbit-2.0/.*')
        r.Remove('%(libdir)s/gtk-2.0/modules/*.a',
                 '%(libdir)s/bonobo/*.a',
                 '%(libdir)s/libglade/2.0/*.a')

        # Remove any autogenerated scrollkeeper cache files.
        # Entirely disabling scrollkeeper-update when building
        # the package is preferred, either by modifying the
        # makefile, or passing an option to the configure script,
        # if such an option exists.
        r.Remove('%(localstatedir)s/lib/scrollkeeper/',
                 '%(localstatedir)s/scrollkeeper/',
                 recursive = True)

        if r.docs:
            r.Doc(*r.docs)
        if not Use.desktop:
            r.Remove('%(datadir)s/applications/%(name)s.desktop')

        # GConf schemas should be in :data so that :lib depends on them
        r.ComponentSpec('data', '%(sysconfdir)s/gconf/schemas/')
