Index: widget/src/gtk2/nsFilePicker.cpp
===================================================================
RCS file: /cvsroot/mozilla/widget/src/gtk2/nsFilePicker.cpp,v
retrieving revision 1.6
diff -d -u -p -r1.6 nsFilePicker.cpp
--- widget/src/gtk2/nsFilePicker.cpp	12 Oct 2004 07:00:59 -0000	1.6
+++ widget/src/gtk2/nsFilePicker.cpp	20 Oct 2004 06:07:45 -0000
@@ -38,11 +38,16 @@
 #include <gtk/gtkwindow.h>
 #include <gtk/gtkdialog.h>
 #include <gtk/gtkstock.h>
+#include <gtk/gtklabel.h>
+#include <gtk/gtkimage.h>
+#include <gtk/gtkhbox.h>
 
 #include "nsIFileURL.h"
 #include "nsIURI.h"
 #include "nsIWidget.h"
 #include "nsILocalFile.h"
+#include "nsIStringBundle.h"
+
 #include "nsArrayEnumerator.h"
 #include "nsVoidArray.h"
 #include "nsMemory.h"
@@ -91,6 +96,8 @@ typedef void (*_gtk_file_chooser_set_sel
 typedef void (*_gtk_file_chooser_set_current_name_fn)(GtkFileChooser* chooser, const gchar* name);
 typedef void (*_gtk_file_chooser_set_current_folder_fn)(GtkFileChooser* chooser, const gchar* folder);
 typedef void (*_gtk_file_chooser_add_filter_fn)(GtkFileChooser* chooser, GtkFileFilter* filter);
+typedef GtkFileFilter* (*_gtk_file_chooser_get_filter_fn)(GtkFileChooser* chooser);
+typedef GSList* (*_gtk_file_chooser_list_filters_fn)(GtkFileChooser* chooser);
 typedef GtkFileFilter* (*_gtk_file_filter_new_fn)();
 typedef void (*_gtk_file_filter_add_pattern_fn)(GtkFileFilter* filter, const gchar* pattern);
 typedef void (*_gtk_file_filter_set_name_fn)(GtkFileFilter* filter, const gchar* name);
@@ -103,6 +110,8 @@ DECL_FUNC_PTR(gtk_file_chooser_set_selec
 DECL_FUNC_PTR(gtk_file_chooser_set_current_name);
 DECL_FUNC_PTR(gtk_file_chooser_set_current_folder);
 DECL_FUNC_PTR(gtk_file_chooser_add_filter);
+DECL_FUNC_PTR(gtk_file_chooser_get_filter);
+DECL_FUNC_PTR(gtk_file_chooser_list_filters);
 DECL_FUNC_PTR(gtk_file_filter_new);
 DECL_FUNC_PTR(gtk_file_filter_add_pattern);
 DECL_FUNC_PTR(gtk_file_filter_set_name);
@@ -179,6 +188,8 @@ nsFilePicker::LoadSymbolsGTK24()
   GET_LIBGTK_FUNC(gtk_file_chooser_set_current_name);
   GET_LIBGTK_FUNC(gtk_file_chooser_set_current_folder);
   GET_LIBGTK_FUNC(gtk_file_chooser_add_filter);
+  GET_LIBGTK_FUNC(gtk_file_chooser_get_filter);
+  GET_LIBGTK_FUNC(gtk_file_chooser_list_filters);
   GET_LIBGTK_FUNC(gtk_file_filter_new);
   GET_LIBGTK_FUNC(gtk_file_filter_add_pattern);
   GET_LIBGTK_FUNC(gtk_file_filter_set_name);
@@ -269,6 +280,12 @@ nsFilePicker::ReadValuesFromFileChooser(
     g_free(filename);
   }
 
+  GtkFileFilter *filter = _gtk_file_chooser_get_filter (GTK_FILE_CHOOSER(file_chooser));
+  GSList *filter_list = _gtk_file_chooser_list_filters (GTK_FILE_CHOOSER(file_chooser));
+
+  mSelectedType = NS_STATIC_CAST(PRInt16, g_slist_index (filter_list, filter));
+  g_slist_free(filter_list);
+
   // Remember last used directory.
   nsCOMPtr<nsILocalFile> file;
   GetFile(getter_AddRefs(file));
@@ -435,6 +452,74 @@ nsFilePicker::GetFiles(nsISimpleEnumerat
   return NS_ERROR_FAILURE;
 }
 
+PRBool
+confirm_overwrite_file (GtkWidget *parent, nsILocalFile* file)
+{
+  if (!file) {
+    return PR_FALSE;
+  }
+
+  PRBool file_exists;
+  nsresult rv = file->Exists(&file_exists);
+  if (NS_FAILED(rv)) {
+    return PR_FALSE;
+  }
+
+  if (!file_exists) {
+    return PR_TRUE;
+  }
+
+  nsCOMPtr<nsIStringBundleService> sbs = do_GetService(NS_STRINGBUNDLE_CONTRACTID);
+  nsCOMPtr<nsIStringBundle> bundle;
+  rv = sbs->CreateBundle("chrome://global/locale/filepicker.properties",
+                         getter_AddRefs(bundle));
+  if (NS_FAILED(rv)) {
+    return PR_FALSE;
+  }
+
+  const PRUnichar *formatStrings[] =
+  {
+    NS_LITERAL_STRING("File").get()
+  };
+
+  nsXPIDLString title, message;
+  bundle->GetStringFromName(NS_LITERAL_STRING("confirmTitle").get(),
+                            getter_Copies(title));
+  bundle->FormatStringFromName(NS_LITERAL_STRING("confirmFileReplacing").get(),
+                               formatStrings, NS_ARRAY_LENGTH(formatStrings),
+                               getter_Copies(message));
+
+  GtkWidget *dialog, *hbox, *label;
+  GtkWidget *image;
+
+  dialog = gtk_dialog_new_with_buttons (NS_ConvertUCS2toUTF8(title).get(),
+                                        GTK_WINDOW (parent),
+                                        GTK_DIALOG_MODAL,
+                                        GTK_STOCK_YES, GTK_RESPONSE_YES,
+                                        GTK_STOCK_NO, GTK_RESPONSE_NO,
+                                        NULL);
+  hbox = gtk_hbox_new (FALSE, 6);
+  gtk_box_pack_start (GTK_BOX (GTK_DIALOG (dialog)->vbox), hbox, TRUE, TRUE, 12);
+  image = gtk_image_new_from_stock (GTK_STOCK_DIALOG_WARNING, GTK_ICON_SIZE_DIALOG);
+  gtk_misc_set_alignment (GTK_MISC (image), 0.5, 0.0);
+  gtk_box_pack_start (GTK_BOX (hbox), image, TRUE, TRUE, 0);
+
+  label = gtk_label_new(NS_ConvertUCS2toUTF8(message).get());
+  gtk_label_set_selectable (GTK_LABEL (label), TRUE);
+  gtk_box_pack_start (GTK_BOX (hbox), label, TRUE, TRUE, 0);
+  gtk_widget_show_all (hbox);
+
+  gtk_window_set_resizable (GTK_WINDOW (dialog), FALSE);
+  gtk_window_set_skip_taskbar_hint (GTK_WINDOW (dialog), TRUE);
+  gtk_container_set_border_width (GTK_CONTAINER (GTK_DIALOG (dialog)), 6);
+  gtk_dialog_set_default_response (GTK_DIALOG (dialog), GTK_RESPONSE_NO);
+  PRBool result = (gtk_dialog_run (GTK_DIALOG (dialog)) == GTK_RESPONSE_YES);
+
+  gtk_widget_destroy (dialog);
+
+  return result;
+}
+
 NS_IMETHODIMP
 nsFilePicker::Show(PRInt16 *aReturn)
 {
@@ -513,14 +598,20 @@ nsFilePicker::Show(PRInt16 *aReturn)
     case GTK_RESPONSE_ACCEPT:
     ReadValuesFromFileChooser(file_chooser);
     *aReturn = nsIFilePicker::returnOK;
-    if (mMode == modeSave) {
+    if (mMode == nsIFilePicker::modeSave) {
       nsCOMPtr<nsILocalFile> file;
       GetFile(getter_AddRefs(file));
       if (file) {
         PRBool exists = PR_FALSE;
         file->Exists(&exists);
         if (exists) {
-          *aReturn = nsIFilePicker::returnReplace;
+          PRBool overwrite = confirm_overwrite_file (file_chooser, file);
+
+          if (overwrite) {
+            *aReturn = nsIFilePicker::returnReplace;
+          } else {
+            *aReturn = nsIFilePicker::returnCancel;    
+          }
         }
       }
     }
Index: widget/src/gtk2/Makefile.in
===================================================================
RCS file: /cvsroot/mozilla/widget/src/gtk2/Makefile.in,v
retrieving revision 1.34
diff -d -u -p -r1.34 Makefile.in
--- widget/src/gtk2/Makefile.in	7 Sep 2004 21:21:48 -0000	1.34
+++ widget/src/gtk2/Makefile.in	20 Oct 2004 06:07:45 -0000
@@ -58,6 +58,7 @@ REQUIRES	= xpcom \
 		  dom \
 		  necko \
 		  uconv \
+		  intl \
 		  gtkxtbin \
 		  xremoteservice
 
Index: widget/src/gtk2/nsWidgetFactory.cpp
===================================================================
RCS file: /cvsroot/mozilla/widget/src/gtk2/nsWidgetFactory.cpp,v
retrieving revision 1.19.32.5
diff -d -u -p -r1.19.32.5 nsWidgetFactory.cpp
--- widget/src/gtk2/nsWidgetFactory.cpp	20 Oct 2004 23:55:52 -0000	1.19.32.5
+++ widget/src/gtk2/nsWidgetFactory.cpp	31 Oct 2004 08:54:24 -0000
@@ -132,7 +132,7 @@ nsFilePickerConstructor(nsISupports *aOu
   }
 
   nsCOMPtr<nsIFilePicker> picker;
-  PRBool enabled = PR_FALSE;
+  PRBool enabled = PR_TRUE;
 
   /* need pref fu */
 
