diff -ruN hal-0.4.7.orig/hald/linux/dmi_info.c hal-0.4.7/hald/linux/dmi_info.c
--- hal-0.4.7.orig/hald/linux/dmi_info.c	1970-01-01 01:00:00.000000000 +0100
+++ hal-0.4.7/hald/linux/dmi_info.c	2005-03-01 17:54:45.142706800 +0100
@@ -0,0 +1,208 @@
+/***************************************************************************
+ *
+ * Copyright (C) 2005 Oliver Grawert (ogra) <hostmaster@grawert.net>
+ *
+ * Licensed under the GPL version 2 license.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ **************************************************************************/
+
+#define _GNU_SOURCE
+
+#include <string.h>
+#include <unistd.h>
+#include <stdio.h>
+#include <fcntl.h>
+#include <sys/types.h>
+#include "dmi_info.h"
+#include "../hald.h"
+#include "../callout.h"
+#include "../logger.h"
+
+void dmi_get_info (HalDevice*);
+HalDevice* dmi_info_generic_subdevice (gchar*);
+
+void 
+dmi_get_info (HalDevice* d)
+{
+	const char *command= "/usr/lib/hal/hal-dmiwrapper";
+	gchar str[512], **tokens, *key, *keylower, *value;
+	int fds[2], devnullfd;
+	FILE *dmidecode_in;
+
+	/* open the pipe*/
+	pipe (fds);
+	
+	/* make the parsing easier */
+	dmidecode_in = fdopen (fds[0], "r");
+
+	/* stdin comes from /dev/null */
+	devnullfd = open ("/dev/null", O_RDONLY);
+
+	/* fork the child process */
+	if (0==fork ())
+	{
+		/* copy the descriptors */
+		dup2 (devnullfd, STDIN_FILENO);
+		dup2 (fds[1], STDOUT_FILENO);
+
+		/* close the descriptors */
+	  	close (fds[0]);
+		close (fds[1]);
+
+	  	/* execute the child */ 
+	  	execl (command, command, NULL);
+		
+		/* throw an error if we ever reach this point */
+		HAL_ERROR (("error forking dmidecode"));
+		return;
+	}
+	
+	/* close unused descriptor */
+	close (fds[1]);
+
+	/* read the output of the child */
+	while(fgets(str, sizeof(str), dmidecode_in))
+  	{
+		if ( strlen (str) == sizeof (str)-1) 
+		{
+			HAL_ERROR (("dmidecode input abnormal end"));
+			break;
+		}
+
+		/* strip whitespace from string */
+		g_strstrip (str);
+
+		/* split the string up at delim ":" */
+		tokens = g_strsplit (str, ":", 2);
+		
+		if (tokens[0])
+		{
+			/* convert to lowercase, replace spaces 
+			 * with underscores and make it hal friendly 
+			 */
+			key = g_strconcat ("bios.", tokens[0], NULL);
+			keylower = g_utf8_strdown (key, -1);
+			keylower = g_strdelimit (keylower, " ", '_');
+			g_free (key);
+	
+			/* omit odd key strings */
+			if (!g_pattern_match_simple ("bios.dmi_*", keylower) &&
+				!g_pattern_match_simple ("bios.#_dmi*", keylower) &&
+				!g_pattern_match_simple ("bios.end_of_table*", keylower))
+			{
+				/* create new subdevice for each handle dmidecode offers to us */
+				if (g_pattern_match_simple ("bios.handle*", keylower))
+				{
+					/* close former device */
+					hal_device_store_add (hald_get_gdl (), d);
+					hal_callout_device (d, TRUE);
+		
+					/* create new device */
+					d = dmi_info_generic_subdevice (tokens[0]);
+		
+					/* use the dmi handle id as default product name */
+					hal_device_property_set_string (d, "info.product", tokens[0]);
+				}
+		
+				/* set the key/value pair */
+				else
+				{
+					/* default to true if no value is set for a key */
+					if ((!tokens[1]) || (!strlen(tokens[1])))
+					{
+						value = g_strdup("true");
+					}
+					else
+					{
+						g_strstrip (tokens[1]);
+						value = g_strdup(tokens[1]);
+					}
+
+					hal_device_property_set_string (d, keylower, value);
+					g_free(value);
+	
+					/* if we find a name (key = blah_information), use blah as name */
+					if (g_pattern_match_simple ("bios.*_information", keylower))
+					{
+						/*tokens[0] = strndup (tokens[0], strlen (tokens[0])-12);*/
+						tokens[0][strlen(tokens[0]) - 12] = 0;
+						hal_device_property_set_string (d, "info.product", tokens[0]);
+					}
+				}
+				g_free (keylower);
+			}
+		}
+		g_strfreev(tokens);
+ 	}
+	fclose (dmidecode_in);
+
+	/* close last device */
+	hal_device_store_add (hald_get_gdl (), d);
+	hal_callout_device (d, TRUE);
+}
+
+/*
+ * create subdevice for dmidecode handle
+ */
+HalDevice*
+dmi_info_generic_subdevice (gchar* object_name)
+{
+	HalDevice* d;	
+	gchar* key;
+
+	/* create new HAL Device */
+	d = hal_device_new ();
+
+	/* add bus type, currently "unknown" to keep h-d-m happy */
+	hal_device_property_set_string (d, "info.bus", "unknown");
+
+	/* add device identifier (and make sure there are no spaces) */
+	key = g_strconcat ("/org/freedesktop/Hal/devices/BIOS/", object_name, NULL);
+	key = g_strdelimit (key, " ", '_');
+	hal_device_set_udi (d, key);
+	g_free (key);
+
+	/* attach to the BIOS root device and set sysinfo capability */
+	hal_device_property_set_string (d, "info.parent", "/org/freedesktop/Hal/devices/BIOS");
+	hal_device_add_capability (d, "linux.sysinfo");
+
+	return d;
+}
+
+/*
+ creates a initial HAL BIOS root device
+*/
+void 
+dmi_info_init ()
+{
+	HalDevice* d;
+
+	if (!g_file_test("/usr/lib/hal/hal-dmiwrapper", G_FILE_TEST_IS_EXECUTABLE) )
+	{
+		return;
+	}
+
+	HAL_INFO (("getting dmi data"));
+
+	/* create new HAL Device */
+	d = hal_device_new ();
+
+	/* add bus type, currently "unknown" to keep h-d-m happy */
+	hal_device_property_set_string (d, "info.bus", "unknown");
+
+	/* set the device identifier and attach it to the computer rootdevice */
+	hal_device_set_udi (d, "/org/freedesktop/Hal/devices/BIOS");
+	hal_device_property_set_string (d, "info.parent", "/org/freedesktop/Hal/devices/computer");
+
+	/* add some basic data */
+	hal_device_add_capability (d, "linux.sysinfo");
+	hal_device_property_set_string (d, "info.product", "BIOS");
+	
+	/* add dmi content */
+	dmi_get_info (d);
+}
diff -ruN hal-0.4.7.orig/hald/linux/dmi_info.h hal-0.4.7/hald/linux/dmi_info.h
--- hal-0.4.7.orig/hald/linux/dmi_info.h	1970-01-01 01:00:00.000000000 +0100
+++ hal-0.4.7/hald/linux/dmi_info.h	2005-03-01 17:54:45.154704976 +0100
@@ -0,0 +1,21 @@
+/***************************************************************************
+ *
+ * Copyright (C) 2005 Oliver Grawert (ogra) <hostmaster@grawert.net>
+ *
+ * Licensed under the GPL version 2 license.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ **************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+/* this function calls dmidecode (if installed)
+ * and creates a bios rootdevice with 
+ * subdevices for the particular bios entrys */
+void dmi_info_init ();
diff -ruN hal-0.4.7.orig/hald/linux/osspec.c hal-0.4.7/hald/linux/osspec.c
--- hal-0.4.7.orig/hald/linux/osspec.c	2005-03-01 17:53:50.524010104 +0100
+++ hal-0.4.7/hald/linux/osspec.c	2005-03-01 17:54:51.565730352 +0100
@@ -69,6 +69,9 @@
 /* procfs_patch */
 #include "procfs_info.h"
 
+/* dmi_info patch */
+#include "dmi_info.h"
+
 /** How many ms to sleep on first hotplug event (to queue up other hotplug events) */
 #define FIRST_HOTPLUG_SLEEP 3500
 
@@ -920,6 +923,10 @@
 	/* obtain proc data only if proc is actually mounted */
 	if ( g_file_test("/proc/cpuinfo", G_FILE_TEST_EXISTS) )
 		procfs_info_init();
+	
+	/* dmi_info patch */
+	dmi_info_init();
+
 
 #ifdef HAVE_SELINUX
 	if (is_selinux_enabled()) {
diff -ruN hal-0.4.7.orig/hald/Makefile.am hal-0.4.7/hald/Makefile.am
--- hal-0.4.7.orig/hald/Makefile.am	2005-03-01 17:53:50.529009344 +0100
+++ hal-0.4.7/hald/Makefile.am	2005-03-01 17:57:40.413061656 +0100
@@ -59,6 +59,7 @@
 	linux/linux_dvd_rw_utils.h	linux/linux_dvd_rw_utils.c \
 	linux/lsb_release.h		linux/lsb_release.c		\
 	linux/procfs_info.h		linux/procfs_info.c		\
+	linux/dmi_info.h		linux/dmi_info.c		\
 	linux/hald_helper.h
 
 #					linux/ieee1394_host_class_device.c
diff -ruN hal-0.4.7.orig/tools/linux/hal_dmiwrapper.c hal-0.4.7/tools/linux/hal_dmiwrapper.c
--- hal-0.4.7.orig/tools/linux/hal_dmiwrapper.c	1970-01-01 01:00:00.000000000 +0100
+++ hal-0.4.7/tools/linux/hal_dmiwrapper.c	2005-03-01 18:00:15.231525672 +0100
@@ -0,0 +1,25 @@
+/***************************************************************************
+ *
+ * Copyright (C) 2005 Oliver Grawert (ogra) <hostmaster@grawert.net>
+ *
+ * Licensed under the GPL version 2 license.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ **************************************************************************/
+
+#ifdef HAVE_CONFIG_H
+#  include <config.h>
+#endif
+
+#include <sys/types.h>
+#include <unistd.h>
+
+int main()
+{
+	execv("/usr/sbin/dmidecode", 0);
+	return 0;
+}
diff -ruN hal-0.4.7.orig/tools/linux/Makefile.am hal-0.4.7/tools/linux/Makefile.am
--- hal-0.4.7.orig/tools/linux/Makefile.am	2004-08-30 11:29:09.000000000 +0200
+++ hal-0.4.7/tools/linux/Makefile.am	2005-03-01 17:58:56.088557232 +0100
@@ -9,8 +9,10 @@
 	-I$(top_srcdir) \
 	@PACKAGE_CFLAGS@
 
-libexec_PROGRAMS = hal.hotplug hal.dev hal-hotplug-map
-
+libexec_PROGRAMS = hal-dmiwrapper hal.hotplug hal.dev hal-hotplug-map
+ 
+hal_dmiwrapper_SOURCES = hal_dmiwrapper.c
+	   
 hal_hotplug_SOURCES = hal_hotplug.c
 
 hal_dev_SOURCES = hal_dev.c
