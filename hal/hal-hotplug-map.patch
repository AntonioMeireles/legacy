Index: tools/linux/hal_hotplug_map.c
===================================================================
RCS file: /cvs/hal/hal/tools/linux/hal_hotplug_map.c,v
retrieving revision 1.3
diff -u -r1.3 hal_hotplug_map.c
--- hal/tools/linux/hal_hotplug_map.c	27 Sep 2004 14:52:11 -0000	1.3
+++ hal/tools/linux/hal_hotplug_map.c	6 Nov 2004 18:48:59 -0000
@@ -3,6 +3,9 @@
 #include <stdlib.h>
 #include <string.h>
 
+#include <dirent.h>
+#include <sys/types.h>
+
 #define DBUS_API_SUBJECT_TO_CHANGE
 #include "libhal/libhal.h"
 
@@ -21,6 +24,45 @@
 /* @todo FIXME HACK: it's a hack to hardcode this */
 static const char *usbmapfiles[] = {"/etc/hotplug/usb.usermap", "/etc/hotplug/usb/libsane.usermap", "/etc/hotplug/usb/libgphoto2.usermap",  NULL};
 
+#define BUFSIZE 256
+static int 
+check_usb_masstorage() {
+  char *sysfspath = getenv("HAL_PROP_LINUX_SYSFS_PATH");
+  DIR *sysfsdir;
+  struct dirent *direntry;
+  FILE *f;
+  char buf[BUFSIZE];
+  char path[PATH_MAX];
+
+  if (sysfspath == NULL) { 
+    return FALSE;
+  }
+  sysfsdir = opendir(sysfspath);
+  if (sysfsdir == NULL) {
+    return FALSE;
+  }
+  while ((direntry = readdir(sysfsdir)) != NULL)  {
+    if (direntry->d_type == DT_DIR) {
+      snprintf(path, PATH_MAX, "%s/%s/bInterfaceClass", 
+               sysfspath, direntry->d_name);
+      f = fopen(path, "r");
+      if (f == NULL)
+        continue;
+      if (fgets(buf, BUFSIZE, f) == NULL) {
+        fclose(f);
+        continue;
+      }
+      fclose(f);
+      if (atoi(buf) == 8) {
+        /* usb mass storage endpoint */
+        dbg("Found USB Mass Storage endpoint!\n");
+        return TRUE;
+      }
+    }
+  }
+  return FALSE;
+}
+
 static int
 handle_usb_found (const char *module)
 {
@@ -35,7 +77,8 @@
 	if (hal_context == NULL)
 		return FALSE;
 
-	if (strcmp (module, "usbcam") == 0 || strcmp(module, "libgphoto2") == 0) {
+	if ((strcmp (module, "usbcam") == 0 || strcmp(module, "libgphoto2") == 0) 
+       && !check_usb_masstorage()) {
 		hal_device_add_capability (hal_context, udi, "camera");
 		hal_device_set_property_string (hal_context, udi, "info.category", "camera");
 		hal_device_set_property_string (hal_context, udi, "camera.access_method", "user");
