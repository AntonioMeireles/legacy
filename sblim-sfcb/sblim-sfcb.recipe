#
# Copyright (c) 2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class SblimSfcb(AutoPackageRecipe):
    name = 'sblim-sfcb'
    version = '1.3.2'

    buildRequires = [
        'chkconfig:runtime',
        'curl:devel',
        'flex:runtime',
        'pam:devel',
        'perl:devel',
        'perl:runtime',
        'unzip:runtime',
        'zlib:devel',
    ]

    cimSchema = "cimv217Final-MOFs.zip"
    cimSchemaUrl = "http://www.dmtf.org/standards/cim/cim_schema_v217/%(cimSchema)s"

    def unpack(r):
        r.macros.cimSchema = r.cimSchema
        r.addArchive('mirror://sourceforge/sblim/')
        r.addSource(r.cimSchemaUrl)
        r.addSource('cimom.tagdescription', dest='%(tagdescriptiondir)s/cimom',
                    macros = True)
        r.addSource('cimom.taghandler', dest='%(taghandlerdir)s/cimom',
                    mode=0755, macros = True)
        r.addSource('provider-register.sh', dest='%(sbindir)s/', mode=0755)

    def configure(r):
        r.Configure("--enable-ssl --enable-pam")

    def makeinstall(r):
        r.MakeInstall()
        r.Install('sfcb.init-redhat', "%(initdir)s/sfcb", mode=0755)
        r.Environment("CIMSCHEMA_SOURCE", r.cimSchema)
        r.Environment("CIMSCHEMA_SUBDIRS", "yes")
        r.Run("sh getSchema.sh -f %(destdir)s%(datadir)s/sfcb")
        r.Install('%(localstatedir)s/lib/sfcb/stage/default.reg',
                  '%(localstatedir)s/lib/sfcb/registration/providerRegister')

        r.Replace('sfcbmof', '$DESTDIR/usr/bin/sfcbmof', "sfcbrepos")
        r.Environment('DESTDIR', '%(destdir)s')
        r.Environment('LD_LIBRARY_PATH', '%(destdir)s/usr/bin')

        # Copy header files, they are not installed automatically
        for f in ['cmpidt.h', 'cmpift.h', 'cmpimacs.h', 'cmpios.h', 'cmpipl.h']:
            r.Install(f, "%(includedir)s/cmpi/")

        # Create the interop dir
        r.MakeDirs("%(localstatedir)s/lib/sfcb/registration/repository/root/interop")

    def policy(r):
        r.ExcludeDirectories(exceptions="%(localstatedir)s/lib/sfcb/registration/repository/root/.*")
