# Copyright (c) 2006-2008 Foresight Linux Project
# Copyright (c) 2004-2008 rPath, Inc.
#
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#
import datetime
class GroupDesktopPlatform(GroupRecipe):
    name = 'group-desktop-platform'
    version = '2.0.5'

    autoResolve = True

    Flags.local_tools = True
    depCheck = True
    # we handle this on the group-{gnome,xfce,dist}-dist stage
    checkPathConflicts = False
    checkOnlyByDefaultDeps = True
    requireLatest = False

    x86_64rplGroupsFlavorString = 'is: x86 x86_64'
    x86_64FlavorString = 'is: x86_64'
    x86FlavorString  = 'is: x86'
    x86rplGroupsFlavorString = x86FlavorString

    rPathVersionStr = None

    supDocComponents = [ 'supdoc', ]
    develComponents  = [ 'devellib', 'devel']
    docComponents  = [ 'supdoc', 'doc']
    localeComponents  = [ 'locale']

    rplGroups = [ 'group-base',
                  'group-bootable',
                  'group-core',
                  'group-printing',
                  'group-text-tools',
                  'group-devel',
                  'group-os-devel',
                  'group-anaconda-deps'
                  ]

    kdegroups = [
        'group-kde',
        'group-kde-core',
        'group-kde-devel',
        'group-kde-dist',
        'group-kdeaccessibility',
        'group-kdeadmin',
        'group-kdeartwork',
        'group-kdebase',
        'group-kdeedu',
        'group-kdegames',
        'group-kdegraphics',
        'group-kdemultimedia',
        'group-kdenetwork',
        'group-kdepim',
        'group-kdesdk',
        'group-kdetoys',
        'group-kdeutils',
        'group-kdewebdev',
        'group-koffice'
        ]

    xfcegroups = [
        'group-xfce',
        'group-xfce-core',
        'group-xfce-devel',
        'group-xfce-apps',
        'group-xfce-extras',
    ]

    bucketDevelGroups = [ 'group-devel',
                          'group-os-devel',
                          'group-gnome-devel',
                          'group-kde-devel',
                          'group-xfce-devel',
                          'group-desktop-common-devel',
                          ]
    bucketExtraDocGroups = [ 'group-extra-docs']

    rplLabel = 'conary.rpath.com@rpl:2-qa'
    rplLabelCompat = 'conary.rpath.com@rpl:1-compat'

    conaryVersion = 'conary.rpath.com@rpl:2-qa'

    compatLabel = 'foresight.rpath.org@fl:2-compat'
    rplGroupUmbrella = 'group-os=' + rplLabel + '[%s]'

    if Arch.x86_64:
        rplGroupUmbrella = rplGroupUmbrella % x86_64rplGroupsFlavorString
        # we need the one bellow to make sure choices in compat32 are allways
        # in sync with one in x86_64
        rplGroupUmbrellaCompat32 = 'group-os=' + rplLabel + '[%s]'
        rplGroupUmbrellaCompat32 = rplGroupUmbrellaCompat32 % x86rplGroupsFlavorString
    else:
        rplGroupUmbrella = rplGroupUmbrella % x86rplGroupsFlavorString

    def flCreateGroup(r, name, parentGroup=None, depCheck=False,
                      byDefault=True, checkOnlyByDefaultDeps=True,
                      autoResolve = False, dynamicGroup = False, checkPathConflicts=None):
        # creates group named 'name', adds it to the toplevel group,
        # and sets the current group to that name.  calls to r.add()
        # will use the current group by default.

        # note: byDefault applies to whether the group is included by
        # default in its parent group, not whether the troves in
        # the group are added by default. (use the setByDefault() command
        # to get that)

        # get all the the default for the new group from its parent group.
        if parentGroup:
            r.setDefaultGroup(parentGroup)
        r.createGroup(name, autoResolve=autoResolve, depCheck=depCheck,
                      checkOnlyByDefaultDeps=checkOnlyByDefaultDeps, 
                      byDefault=byDefault,  checkPathConflicts=checkPathConflicts)
        if parentGroup:
            r.addNewGroup(name, groupName=parentGroup, byDefault=byDefault)
        r.setDefaultGroup(name)


        if parentGroup and not name in r.bucketExtraDocGroups:
            r.moveComponents(r.supDocComponents, name, 'group-extra-docs')

        if parentGroup and not dynamicGroup:
            if name in r.xfcegroups:
                r.copyComponents(r.develComponents,  name, 'group-xfce-devel')
            elif name in r.kdegroups:
                r.copyComponents(r.develComponents,  name, 'group-kde-devel')
            elif name == 'group-gnome':
               r.copyComponents(r.develComponents,  name, 'group-gnome-devel')

            elif name not in r.bucketDevelGroups and name not in r.bucketExtraDocGroups and name not in ['group-gnome' ] and name not in r.kdegroups and name not in r.xfcegroups:
                r.copyComponents(r.develComponents,  name, 'group-desktop-common-devel')

    def rplAddGroup(r, name, flavor = None):
        if not flavor:
            if Arch.x86_64:
                flavor = r.x86_64rplGroupsFlavorString
            else:
                flavor = r.x86rplGroupsFlavorString

        # copyScripts = True gives interesting errors...
        # has to do with group recursion
        r.addCopy(name, flavor=flavor, searchPath = r.rplGroupUmbrella)

        # below until rpl:2-qa decides to do it too...
        r.moveComponents(r.supDocComponents, name, 'group-rpl-extra-docs')

    def flAdd(r, name, components = None, source=None, versionStr=None, \
              groupName=None, flavor=None, byDefault=True, singleArch=False):

        searchPath = (r.foresightLinuxLabel)

        if not versionStr:
            versionStr = r.foresightLinuxLabel

        if isinstance(name, tuple):
            # This allows us to put troves created with PackageSpec into
            # lists where each trove is added iteratively, and still specify
            # an explicit source.
            name, source = name

        if not flavor:
            if Arch.x86_64:
                flavor = r.x86_64rplGroupsFlavorString
            else:
                flavor = r.x86rplGroupsFlavorString

        #  first, we add the trove, normally
        r.add(name,
              components = components,
              versionStr = versionStr,
              source=source,
              groupName=groupName,
              flavor=flavor,
              byDefault=byDefault,
              searchPath=searchPath,
              )

        # second, we check if that trove is already in any of the upstream, pre-built,
        # groups, we use, and - there - we replace it.
        if Arch.x86_64 and not name == 'anaconda' and not singleArch:

            r.replace(name,
                      groupName='group-compat32',
                      allowNoMatch=True,
                      newVersionStr = versionStr,
                      newFlavor = r.x86FlavorString,
                      searchPath=searchPath,
                      )

        if not singleArch:
            for g in r.rplGroups:
                r.replace(name,
                          newVersionStr = versionStr,
                          groupName = g,
                          newFlavor=flavor,
                          searchPath=searchPath,
                          allowNoMatch=True)


    # for replacing stuff also in compat32
    def flReplace(r, name, groupName=None, flavor=None):
        if not flavor:
            if Arch.x86_64:
                flavor = r.x86_64FlavorString
            else:
                flavor = r.x86FlavorString

        r.replace(name, groupName=groupName, newFlavor=flavor)

        if Arch.x86_64:

            r.replace(name,
                      groupName='group-compat32',
                      allowNoMatch=True,
                      newFlavor=r.x86FlavorString)

    def rplAdd(r, name, versionStr=None, groupName=None, components=None, byDefault=True, flavor = None, source = None):

        if not flavor:
            if Arch.x86_64:
                flavor = r.x86_64FlavorString
            else:
                flavor = r.x86FlavorString

        if not versionStr:
            versionStr = r.rplLabel

        searchPath = (r.rplGroupUmbrella)

        if isinstance(name, tuple):
            # This allows us to put troves created with PackageSpec into
            # lists where each trove is added iteratively, and still specify
            # an explicit source.
            name, source = name

        if Arch.x86_64:
            flavor32 = r.x86FlavorString

            r.replace(name,
                      newVersionStr = versionStr,
                      groupName='group-compat32',
                      newFlavor=flavor32,
                      allowNoMatch=True,
                      searchPath=searchPath
                      )

        r.add(name,
              source = source,
              versionStr = versionStr,
              components = components,
              groupName = groupName,
              flavor = flavor,
              byDefault = byDefault,
              searchPath = searchPath
              )

        # in the case when we are not using tip of what is in rpl groups...
        if versionStr:
            for g in r.rplGroups:
                r.replace(name,
                          newVersionStr = versionStr,
                          groupName = g,
                          newFlavor=flavor,
                          allowNoMatch=True,
                          searchPath=searchPath
                          )

    def setup(r):
        r.foresightLinuxLabel = r.macros.buildlabel
        r.foresightLinuxKernelLabel = r.macros.buildlabel + '-kernel'

        # PreUpdateScript for migrating firefox and alsa needs to
        # be attached to group-core to execute on migrations from
        # fl:1 (since it runs on update, not install, and the
        # group-desktop-common group does not exist on fl:1) and
        # to group-desktop-common to ensure that it executes at
        # the right time on fl:2 alpha updates.  This second
        # link (group-desktop-common) is needed only if group-core
        # has not changed contents, so in a few weeks it can be
        # removed, and can certainly be removed before fl:2 is final.
        r.addPreUpdateScript('fl2-core-pre-update.script',
                             groupName = 'group-core')
        r.addPreUpdateScript('fl2-core-pre-update.script',
                             groupName = 'group-desktop-common')
        # Attempt to work around pam changes.  This should not
        # be needed for final migrations, as pam and authconfig
        # are set up the same on :1 and :2
        r.addPostUpdateScript('fl2-core-post-update.script',
                             groupName = 'group-core')
        # work around flakeyness in nspluginwrapper
        r.addPostUpdateScript('fl2-mozilla-update.script',
                             groupName = 'group-mozilla')
        # work around for lm_sensors update bug
        r.addPostUpdateScript('fl2-gnome-dist-update.script',
                             groupName = 'group-gnome-dist')

        r.setSearchPath(r.foresightLinuxLabel, r.rplGroupUmbrella, r.foresightLinuxKernelLabel, r.rplLabelCompat)

        # Create a out shell group for all the belong to (no parent)
        r.flCreateGroup('group-world')

        r.addNewGroup('group-desktop-platform', groupName='group-world')

        r.flCreateGroup('group-extra-docs', parentGroup='group-desktop-platform', dynamicGroup = True)
        r.flCreateGroup('group-rpl-extra-docs', parentGroup='group-desktop-platform', dynamicGroup = True)

        # stuff we re{use,factor} from upstream (rpl:2-qa)
        r.flCreateGroup('group-rpl-fullpack', parentGroup='group-desktop-platform', dynamicGroup = True)

        for groupName in r.rplGroups:
            r.rplAddGroup(groupName)

        if Arch.x86_64:
            r.rplAddGroup('group-compat32')

        # we don't ship those anymore
        r.remove('xf86-video-i810:devellib', groupName='group-devel')
        r.remove('xf86-video-via:devellib', groupName='group-devel')
        # deprecated. now in gtk
        r.remove('gail', groupName='group-devel')

        # replaced by ptlib
        r.remove('pwlib', groupName='group-devel')

        # we want more terminfo than rpl:2 ships
        r.rplAdd('ncurses:supterminfo', groupName='group-core')

        # devel groups
        r.flCreateGroup('group-gnome-devel', parentGroup='group-desktop-platform',
                        dynamicGroup = True,
                        depCheck=False, autoResolve = False, # checkPathConflicts=True
        )
        r.flCreateGroup('group-desktop-common-devel', parentGroup='group-gnome-devel',
                        dynamicGroup = True)
        r.addNewGroup('group-devel', groupName='group-gnome-devel')
        r.flCreateGroup('group-kde-devel', parentGroup='group-desktop-platform',
                        depCheck=False,  autoResolve = False, # checkPathConflicts=True,
                        dynamicGroup = True)
        r.addNewGroup('group-devel', groupName='group-kde-devel')
        r.addNewGroup('group-desktop-common-devel', groupName='group-kde-devel')
        r.flCreateGroup('group-xfce-devel', parentGroup='group-desktop-platform',
                        depCheck=False,  autoResolve = False, # checkPathConflicts=True,
                        dynamicGroup = True)
        r.addNewGroup('group-devel', groupName='group-xfce-devel')
        r.addNewGroup('group-desktop-common-devel', groupName='group-xfce-devel')


        # common bits
        r.flCreateGroup('group-desktop-common', parentGroup='group-desktop-platform')
        # bits from rpl that ship by default
        r.flCreateGroup('group-rpl-derived', parentGroup='group-desktop-common', dynamicGroup = True)

        for i in r.rplGroups:
            if i not in [ 'group-devel','group-anaconda-deps', 'group-os-devel' ]:
                r.addNewGroup(i, groupName='group-rpl-derived')

        if Arch.x86_64:
            r.addNewGroup('group-compat32', groupName='group-rpl-derived')

#        # we need to create this one before we call flAdd first time.
#        if Arch.x86_64:
            # this on x86_64 gets :lib of each pkg we ship by default.
            # Should this be group-desktop-platform or group-desktop-common?
#            r.flCreateGroup('group-desktop-platform-compat32', parentGroup='group-desktop-platform',
#                            depCheck=False, byDefault=False, dynamicGroup = True)

        # the real show beguins here
        r.flCreateGroup('group-desktop-common-extras', parentGroup='group-desktop-platform', dynamicGroup = True)
        # above dynamicGroup = True because we don't want the :devel 's there to go to 'group-desktop-common-devel'

        # kernel
        if Arch.x86:
            # FIXME: should we ever ship kernel.pae ?
            # any desktop hardware that could make use a PAE-capable
            # kernel probably is 64-bit capable, and 64-bit fl:2 should be
            # the answer.  PAE takes extra memory to support, and therefore
            # is harmful for desktop use on normal 32-bit hardware
            kernelFlavor = 'kernel.smp,!kernel.pae is: x86(i486,i586,i686)'
        elif Arch.x86_64:
            kernelFlavor = 'kernel.smp'

        r.replace('kernel', r.foresightLinuxKernelLabel+'/2.6.26.3-1-1', newFlavor = kernelFlavor)
        r.replace('conary', r.conaryVersion)

        #
        # stuff specific to foresight and common across all editions
        # will need to be spslit later in three extra sub-groups - -gnome, -kde, -xfce, maybe.
        r.flCreateGroup('group-foresight-basics', parentGroup='group-desktop-common')

        # libs we want in all editions
        #
        r.flAdd('qt', groupName='group-foresight-basics')
        r.flAdd('gtk', groupName='group-foresight-basics')

        r.flAdd('pango', groupName='group-foresight-basics')

        # fl specific variations
        r.flAdd('mkinitrd', groupName = 'group-foresight-basics')
        r.flAdd('initscripts', groupName = 'group-foresight-basics')

        r.rplAdd('pam', groupName='group-foresight-basics')
        r.rplAdd('authconfig', groupName='group-foresight-basics')

        # 3G modem support. 
        r.flAdd('usb_modeswitch', groupName='group-foresight-basics')

        # we should include samba... people do actually share files
        r.rplAdd('samba', groupName='group-foresight-basics')
        r.rplAdd('samba-client', groupName='group-foresight-basics')
        r.rplAdd('samba-server', groupName='group-foresight-basics')

        r.replace('distro-release', r.foresightLinuxLabel)

        # freedesktop.org xdg stuff
        r.flAdd('xdg-user-dirs', groupName='group-foresight-basics')
        r.flAdd('xdg-user-dirs-gtk', groupName='group-foresight-basics')
        r.flAdd('xdg-utils', groupName='group-foresight-basics')
        r.flAdd('pyxdg', groupName='group-foresight-basics')
        # end of freedesktop.org xdg stuff

        # need for abiword/OOO/koffice
        r.flAdd('libwpd', groupName='group-foresight-basics')

        r.flAdd('ilmbase', groupName='group-foresight-basics')
        r.flAdd('OpenEXR', groupName='group-foresight-basics')

        # gstreamer wants a newer version than the one in rPL-2
        r.flAdd('flex', groupName='group-desktop-common-devel')  

        # Firefox with gnome support wants it
        r.flAdd('GConf', groupName='group-foresight-basics')

        # we need this. otherwise no crypted mail in our gfx MUAs
        r.rplAdd('pinentry-gtk-2', groupName='group-foresight-basics')

        # Branding
        r.flAdd('branding', groupName='group-foresight-basics')

        # Generic Xorg configurator
        r.flAdd('xconfigurator', groupName='group-foresight-basics')

        # Various deps with byDefault=False
        commonDeps = [
            ('avahi-qt4', 'avahi'),
            'exiv2',
            'libgphoto2',
            'xvidcore',
            'gsm',
            'x264',
            'imlib2',
            'ffmpeg',
            'libdvdnav',
            'mplayer', #TODO: install by default?
            'gnome-mplayer',
            'mplayer-codecs',
            'qt4',
                ('qt4-core', 'qt4'),
                ('qt4-gui', 'qt4'),
                ('qt4-qt3support', 'qt4'),
                ('qt4-sql', 'qt4'),
            'poppler-data',
            'poppler',
                ('poppler-glib', 'poppler'),
                ('poppler-qt', 'poppler'),
                ('poppler-qt4', 'poppler'),
            'libpqxx',
            'wv2',
            'libzip',
            'libvncserver',
            'wxGTK',
            'wxPython',
            ('svncpp', 'rapidsvn'),
            'rapidsvn',
            'libical',
            'libopensync',
            'gnokii',
            'chmlib',
            'libetpan',
            'gst-python',
            'cddb-py', 'mutagen', 'notify-python', 'python-ctypes',
            'PokerTH',
            'commoncpp',
            'libspectre',
            'taglib',
            'gmm',
            'gtk-chtheme',
            'giver',
            'reportlab',
            'gourmet',
            'gthumb',
        ]
        for p in commonDeps:
            r.flAdd(p, groupName='group-foresight-basics', byDefault=False)

        # extra stuff to anaconda-deps, per elliot request
        r.flAdd('anaconda', groupName='group-anaconda-deps')
        r.rplAdd('booty', groupName='group-anaconda-deps')
        r.rplAdd('busybox', groupName='group-anaconda-deps')
        r.rplAdd('bogl', groupName='group-anaconda-deps')
        r.rplAdd('device-mapper', groupName='group-anaconda-deps')
        r.rplAdd('dmraid', groupName='group-anaconda-deps')
        r.rplAdd('libdhcp', groupName='group-anaconda-deps')
        r.rplAdd('libdhcp4client', groupName='group-anaconda-deps')
        r.rplAdd('libdhcp6client', groupName='group-anaconda-deps')
        r.rplAdd('pykickstart', groupName='group-anaconda-deps')
        r.rplAdd('pyblock', groupName='group-anaconda-deps')
        r.rplAdd('pyparted', groupName='group-anaconda-deps')
        r.rplAdd('pyxf86config', groupName='group-anaconda-deps')
        r.flAdd('vnc', groupName='group-anaconda-deps')
        r.rplAdd('font-util', groupName='group-anaconda-deps')
        # end of extra stuff to anaconda-deps

        r.flCreateGroup('group-drivers', parentGroup='group-desktop-common')

        # firmware is a tricky business. (allways use r.add here)
        r.add('ipw2200-fw', groupName='group-drivers', components = ['lib'])
        r.add('ipw2100-fw', groupName='group-drivers', components = ['lib'])
        r.add('iwlwifi-3945-ucode', groupName='group-drivers', components = ['lib'])
        r.add('iwlwifi-4965-ucode', groupName='group-drivers', components = ['lib'])
        r.add('rt61pci-firmware', groupName='group-drivers', components = ['lib'])
        r.add('rt71pci-firmware', groupName='group-drivers', components = ['lib'])
        # end of firmware

        r.add('ndiswrapper', groupName='group-drivers')
        r.add('ndiswrapper-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')

        r.flAdd('madwifi', groupName='group-drivers')
        r.flAdd('madwifi-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')   

        # webcams ;)
        r.add('gspcav1-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')
        r.add('uvcvideo-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')

        # those  below are ALLWAYS byDefault=False
        if Arch.x86_64:
            r.add('nvidia', flavor='is: x86 x86_64', groupName='group-drivers', byDefault = False)
            r.add('ati-fglrx', flavor='is: x86 x86_64', groupName='group-drivers', byDefault = False)
        else:
            r.add('nvidia', groupName='group-drivers', byDefault = False)
            r.add('ati-fglrx', groupName='group-drivers', byDefault = False)

        r.add('nvidia-kernel', versionStr =  r.foresightLinuxKernelLabel, groupName='group-drivers', byDefault = False)
        r.add('ati-fglrx-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers', byDefault = False)

        # virtualization...
        r.add('kqemu', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')
        r.add('kvm-kernel', versionStr = r.foresightLinuxKernelLabel, groupName='group-drivers')

        #

        #
        # Alsa/pulseaudio/sound bloc
        #

        # Alsa sound system
        # FIXME: research about utility of having alsa-firmware
        r.flAdd('info-audio')
        r.flAdd('alsa-plugins')
        r.flAdd('alsa-lib')
        r.flAdd('alsa-utils')
        r.flAdd('alsa-oss')
        # end of Alsa pack

        # device related info packages
        r.flAdd('info-powerdev', groupName='group-foresight-basics')
        r.flAdd('info-plugdev', groupName='group-foresight-basics')
        r.flAdd('info-netdev', groupName='group-foresight-basics')

        # pulseaudio & associates {info-pulse,info-pulse-access,info-pulse-rt,libatomic_ops}
        r.flAdd('info-pulse', groupName='group-foresight-basics')
        r.flAdd('info-pulse-rt', groupName='group-foresight-basics')
        r.flAdd('info-pulse-access', groupName='group-foresight-basics')
        r.flAdd('libatomic_ops', groupName='group-foresight-basics')

        r.flAdd('pulseaudio', groupName='group-foresight-basics')
        r.flAdd('esound', groupName='group-foresight-basics')

        r.flAdd('paprefs', groupName='group-foresight-basics')
        r.flAdd('pavucontrol', groupName='group-foresight-basics')
        r.flAdd('pavumeter', groupName='group-foresight-basics')

        r.flAdd('libao-pulse', groupName='group-foresight-basics')
        r.flAdd('gstreamer-plugins-pulse', groupName='group-foresight-basics')

        r.flAdd('libsamplerate', groupName='group-foresight-basics')
        r.flAdd('libsndfile',  groupName='group-foresight-basics')
        r.flAdd('jack', groupName='group-foresight-basics')
        r.flAdd('portaudio', groupName='group-foresight-basics')

        # end off pulseaudio & associates

        r.flAdd('gstreamer', groupName='group-foresight-basics')
        r.flAdd('SDL', groupName='group-foresight-basics')
        r.flAdd('SDL_mixer', groupName='group-foresight-basics')

        # FIXME: check if the one bellow is still needed
        r.flAdd('alsa-lib', groupName='group-anaconda-deps')

        #
        # end of Alsa/pulseaudio/sound bloc
        #

        # needed at least by gst-plugins
        r.flAdd('libtheora', groupName='group-foresight-basics')
        r.flAdd('libvorbis', groupName='group-foresight-basics')
        r.flAdd('vorbis-tools', groupName='group-foresight-basics')
        r.flAdd('libao', groupName='group-foresight-basics')


        # other free media codecs
        r.rplAdd('fribidi', groupName='group-foresight-basics')

        # gst-plugins-base demands it
        r.flAdd('cdparanoia', groupName='group-foresight-basics')


        # wanted/expected for gdm Xsession plumbing
        r.rplAdd('xterm', groupName='group-foresight-basics')

        r.rplAdd('info-wheel', groupName='group-foresight-basics')
        r.flReplace('sudo')
        r.flReplace('setup')

        r.flAdd('info-kvm', groupName='group-foresight-basics')
        r.flAdd('info-bitlbee', groupName='group-foresight-basics')

        r.flAdd('info-polkituser', groupName='group-foresight-basics')
        r.flAdd('ConsoleKit', groupName='group-foresight-basics')
        r.flAdd('udev', groupName='group-foresight-basics')
        r.flAdd('dbus', groupName='group-foresight-basics')
        r.flAdd('dbus-glib', groupName='group-foresight-basics')
        r.flAdd('dbus-x11', groupName='group-foresight-basics', source='dbus')
        r.flAdd('dbus-sharp', groupName='group-foresight-basics')
        r.flAdd('ndesk-dbus', groupName='group-foresight-basics')
        r.flAdd('ndesk-dbus-glib', groupName='group-foresight-basics')
        r.flAdd('hal', groupName='group-foresight-basics')
        r.flAdd('hal-info', groupName='group-foresight-basics')
        r.flAdd('smbios', groupName='group-foresight-basics')
        r.flAdd('PolicyKit', groupName='group-foresight-basics')
        r.flAdd('PackageKit', groupName='group-foresight-basics')
        r.flAdd('openvpn', groupName='group-foresight-basics')
        r.flAdd('vpnc', groupName='group-foresight-basics')
        r.flAdd('pptpclient', groupName='group-foresight-basics')
        r.flAdd('laptop-detect', groupName='group-foresight-basics')
        # This contains service ordering information, useful for all foresight editions
        r.flAdd('foresight-services', groupName='group-foresight-basics')

        # needed for thunbails, etc
        r.rplAdd('ImageMagick', groupName='group-foresight-basics')

        #  bluetooth pack
        r.flAdd('bluez-firmware', groupName='group-foresight-basics')
        r.flAdd('bluez-hcidump', groupName='group-foresight-basics')
        r.flAdd('bluez-libs', groupName='group-foresight-basics')
        r.flAdd('bluez-utils', groupName='group-foresight-basics')
        r.flAdd('libbtctl', groupName='group-foresight-basics')
        r.flAdd('openobex', groupName='group-foresight-basics')
        r.flAdd('obex-data-server', groupName='group-foresight-basics')
        # end of bluetooth pack

        r.rplAdd('info-bin', groupName='group-foresight-basics')

        r.rplAdd('info-nobody', groupName='group-foresight-basics')
        r.rplAdd('mailx', groupName='group-foresight-basics')

        r.flAdd('nss', groupName='group-foresight-basics')
        r.flAdd('nspr', groupName='group-foresight-basics')

        r.flAdd('mono', groupName='group-foresight-basics')

        r.flAdd('kerneloops', groupName='group-foresight-basics')

        # we want our craptastic interactive=True configs to be easily
        # overridable by folks building on top of us :)
        r.add('foresight-conary-config')

        r.flAdd('dbus-python', groupName='group-foresight-basics')
        r.flAdd('perl-Net-DBus', groupName='group-foresight-basics')

        r.flAdd('flac','group-foresight-basics')

        #Placeholder trove that anaconda looks for in setting the default runlevel
        r.add('xorg-x11', 'foresight.rpath.org@fl:1', groupName='group-foresight-basics')

        r.flAdd('nas', groupName='group-foresight-basics')
        r.flAdd('unixODBC', groupName='group-foresight-basics')
        r.flAdd('doxygen', groupName='group-foresight-basics')
        r.rplAdd('unzip', groupName='group-foresight-basics')
        r.flAdd('libdvdcss', groupName='group-foresight-basics')

        # rpl's one is too old
        r.flAdd('python-sqlite', groupName='group-foresight-basics')

        r.flCreateGroup('group-internet', parentGroup='group-desktop-common')

        # r.flAdd('gizmo', groupName='group-internet',  flavor='is: x86', singleArch=True, byDefault=False)
        r.flAdd('skype', groupName='group-internet',  flavor='is: x86', singleArch=True, byDefault=False)
        r.flAdd('transmission', groupName='group-internet')

        r.flCreateGroup('group-mozilla', parentGroup='group-desktop-common')
        r.flAdd('flashplayer', groupName='group-mozilla',  flavor='is: x86', singleArch=True)
        r.flAdd('firefox', groupName='group-mozilla')
        r.flAdd('firefox-rpathwiki-search', groupName='group-mozilla')   

        r.flAdd('google-earth', groupName='group-mozilla', byDefault=False, flavor='is: x86', singleArch=True)

        if Arch.x86_64:
            r.flAdd('libflashsupport', groupName='group-mozilla')
            r.flAdd('libflashsupport', flavor='is: x86', groupName='group-mozilla',
                    singleArch=True, components = ['lib'])
            r.flAdd('nspluginwrapper', flavor='is: x86_64', groupName='group-mozilla', singleArch=True)
            r.flAdd('nspluginwrapper', flavor='is: x86', groupName='group-mozilla',
                    singleArch=True, components = ['lib'])
        else:
            r.flAdd('libflashsupport', groupName='group-mozilla')

        r.flAdd('nss', groupName='group-internet')
        r.flAdd('nspr', groupName='group-internet')
        r.flAdd('thunderbird', groupName='group-mozilla', byDefault=False)
        r.flAdd('xulrunner', groupName='group-internet')
        r.flAdd('libpurple', groupName='group-internet', source='pidgin')

        # elisa media pack
        r.flCreateGroup('group-elisa-media', parentGroup='group-desktop-platform')
        r.flAdd('elisa', groupName='group-elisa-media')
        r.flAdd('elisa-plugins-bad', groupName='group-elisa-media')
        r.flAdd('elisa-plugins-good', groupName='group-elisa-media')
        r.flAdd('elisa-plugins-ugly', groupName='group-elisa-media')
        r.flAdd('pigment', groupName='group-elisa-media')
        r.flAdd('pigment-python', groupName='group-elisa-media')
        r.flAdd('twill', groupName='group-elisa-media')
        r.flAdd('python-twisted', groupName='group-elisa-media')
        r.flAdd('python-twisted-web', groupName='group-elisa-media')
        r.flAdd('python-twisted-web2', groupName='group-elisa-media')
        r.flAdd('python-zopeinterface', groupName='group-elisa-media')
        r.flAdd('pyOpenSSL', groupName='group-elisa-media')
        r.flAdd('python-cssutils', groupName='group-elisa-media')
        r.flAdd('coherence', groupName='group-elisa-media')
        r.flAdd('python-hashlib', groupName='group-elisa-media')

        # pidgin pack
        r.flCreateGroup('group-pidgin', parentGroup='group-desktop-platform')
        r.flAdd('pidgin', groupName='group-pidgin')
        r.flAdd('pidgin-plugin_pack', groupName='group-pidgin')
        r.flAdd('pidgin-encryption', groupName='group-pidgin')
        r.flAdd('pidgin-libnotify', groupName='group-pidgin')
        r.flAdd('pidgin-webkit', groupName='group-pidgin')
        r.flAdd('libotr', groupName='group-pidgin')
        r.flAdd('pidgin-otr', groupName='group-pidgin')
        # end of pidgin pack

        # telepathy goodness
        r.flCreateGroup('group-telepathy', parentGroup='group-desktop-platform', byDefault=False)
        r.flAdd('libtelepathy', groupName='group-telepathy')
        # r.flAdd('telepathy-butterfly', groupName='group-telepathy')
        r.flAdd('telepathy-gabble', groupName='group-telepathy')
        r.flAdd('telepathy-glib', groupName='group-telepathy')
        r.flAdd('telepathy-idle', groupName='group-telepathy')
        r.flAdd('telepathy-mission-control', groupName='group-telepathy')
        r.flAdd('telepathy-sharp', groupName='group-telepathy')
        r.flAdd('telepathy-haze', groupName='group-telepathy')
        r.flAdd('empathy', groupName='group-telepathy')
        # end of telepathy goodness

        # fuse
        r.rplAdd('fuse',  groupName='group-desktop-common')

        # cpuspeed
        r.flAdd('cpuspeed', groupName='group-desktop-common')

        # ntfs-3g
        r.flAdd('ntfs-3g', groupName='group-desktop-common')

        # monitoring tools
        r.flAdd('conky', groupName='group-desktop-common-extras')
        r.flAdd('htop', groupName='group-desktop-common-extras')

        # graphics
        r.flAdd('gimp', groupName='group-desktop-common-extras')
        r.flAdd('gutenprint', groupName='group-desktop-common-extras')
        r.flAdd('inkscape', groupName='group-desktop-common-extras')
        r.flAdd('vsdviewer', groupName='group-desktop-common-extras')
        r.flAdd('libwmf', groupName='group-desktop-common-extras') # dep for gimp
        r.flAdd('libexif', groupName='group-desktop-common') # dep for gimp and f-spot
        r.rplAdd('libjpeg',  groupName='group-desktop-common')

        r.flAdd('unrar', groupName='group-desktop-common')
        r.flAdd('p7zip', groupName='group-desktop-common')

        # burning libs
        r.flAdd('libisofs', groupName='group-desktop-common') # dep for xfburn and brasero
        r.flAdd('libburn', groupName='group-desktop-common') # dep for xfburn and brasero

        # (sun) java is gone
        #r.add('sun-jre', versionStr = r.foresightLinuxLabel, flavor = '~!gcj', groupName='group-desktop-common)'
        #r.add('sun-jdk', versionStr = r.foresightLinuxLabel, flavor = '~!gcj', groupName='group-desktop-common-devel')
        #r.add('sun-jre', versionStr = r.foresightLinuxLabel, flavor = '~!gcj', groupName='group-desktop-common-devel')
        # icedtea is in
        r.flAdd('icedtea-jre', groupName='group-desktop-common', source='icedtea')
        r.flAdd('icedtea-gcjwebplugin', groupName='group-desktop-common', source='icedtea')
        r.flAdd('icedtea-jdk', groupName='group-desktop-common-devel', source='icedtea')

        r.flCreateGroup('group-gnome-extras', parentGroup='group-desktop-platform', depCheck=False)

        r.flCreateGroup('group-gnome', parentGroup='group-desktop-platform', depCheck=False)
        r.flCreateGroup('group-kde', parentGroup='group-desktop-platform', depCheck=False)

        # default gnome .wav
        r.flAdd('gnome-audio', groupName='group-gnome')

        r.flAdd('usermode', groupName='group-foresight-basics')
        r.flAdd(('usermode-gtk', 'usermode'), groupName='group-gnome')

        r.flAdd('system-config-display', groupName='group-gnome')
        r.flAdd('system-config-users', groupName='group-gnome')
        r.flAdd('libgksu', groupName='group-gnome')
        r.flAdd('gksu', groupName='group-gnome')

        r.flAdd('PolicyKit-gnome', groupName='group-gnome')
        r.flAdd('gnome-packagekit', groupName='group-gnome')

        r.flAdd('gnome-bluetooth', groupName='group-gnome')
        r.flAdd('bluez-gnome', groupName='group-gnome')

        r.flAdd('compiz-gnome', groupName='group-gnome', source='compiz')
        r.flAdd('graphviz-gnome', groupName='group-gnome', source='graphviz')

        r.flAdd('gnome-do', groupName='group-gnome')
        r.flAdd('do-plugins', groupName='group-gnome')

        # codecs we don't ship by default
        r.flCreateGroup('group-codecs', parentGroup='group-desktop-platform', byDefault=False, depCheck=False)
        r.flAdd('gst-plugins-ugly', groupName='group-codecs')
        r.flAdd('gst-plugins-ffmpeg', groupName='group-codecs')

        #deps for gst-plugins-ugly
        r.flAdd('mpeg2dec', groupName='group-codecs')
        r.flAdd('a52dec', groupName='group-codecs')
        r.flAdd('libdvdread', groupName='group-codecs')

        r.flAdd('gst-plugins-bad', groupName='group-codecs')
        #deps for gst-plugins-bad
        r.flAdd('faac', groupName='group-codecs')
        r.flAdd('faad2', groupName='group-codecs')
        r.flAdd('lame', groupName='group-codecs')
        r.flAdd('libid3tag', groupName='group-codecs')
        r.flAdd('libmpcdec', groupName='group-codecs')

        r.flAdd('libmad', groupName='group-codecs')

        r.flAdd('mplayerplug-in', groupName='group-codecs')

        #deps for mplayer not included above
        r.flAdd('libdv', groupName='group-codecs')

        #dep for amarok
        r.flAdd('xine-lib', groupName='group-codecs')

        r.flAdd('libsexy', groupName='group-gnome')

        r.flAdd('libgalago', groupName='group-gnome')
        r.flAdd('galago-sharp', groupName='group-gnome')
        r.flAdd('gtk-sharp', groupName='group-gnome')
        r.flAdd('gnome-sharp', groupName='group-gnome')
        r.flAdd('gnome-desktop-sharp', groupName='group-gnome')
        r.flAdd('gecko-sharp', groupName='group-gnome')
        r.flAdd('tomboy', groupName='group-gnome')
        r.flAdd('nautilus-open-terminal', groupName='group-gnome')

        # Internet stuff
        r.flAdd('epiphany', groupName='group-gnome', byDefault=False)
        r.flAdd('epiphany-extensions', groupName='group-gnome', byDefault=False)

        r.flAdd('liferea', groupName='group-gnome')
        r.flAdd('filezilla', groupName='group-gnome-extras')
        r.flAdd('pan', groupName='group-gnome-extras')
        r.flAdd('xchat-gnome', groupName='group-gnome')

        # evolution et al.
        r.flAdd('evolution', groupName='group-gnome')
        r.flAdd('evolution-data-server', groupName='group-gnome')
        r.flAdd('evolution-exchange', groupName='group-gnome')
        r.flAdd('evolution-webcal', groupName='group-gnome')
        r.flAdd('gnome-pilot', groupName='group-gnome')
        r.flAdd('gnome-spell', groupName='group-gnome')

        ## NetworkManager
        r.flAdd('wpa_supplicant', groupName='group-desktop-common')
        r.flAdd('NetworkManager', groupName='group-desktop-common')
        r.flAdd('network-manager-applet', groupName='group-gnome')
        r.flAdd('network-manager-applet', groupName='group-kde') # There's no KDE/QT UI for the version we ship
        r.flAdd('NetworkManager-OpenVPN', groupName='group-desktop-common')
        r.flAdd('NetworkManager-vpnc', groupName='group-desktop-common')
        r.flAdd('NetworkManager-pptp', groupName='group-desktop-common')

        r.rplAdd('dhclient', source='dhcp', groupName='group-desktop-common')
        r.rplAdd('libdhcp4client', source='dhcp', groupName='group-desktop-common')
        r.rplAdd('libdhcp6client', source='dhcp', groupName='group-desktop-common')

        ## theming / goodlooking stuff
        r.flAdd('gtk-theme-foresight', groupName='group-desktop-common')
        r.flAdd('human-cursors-theme', groupName='group-desktop-common')
        r.flAdd('tango-icon-theme', groupName='group-desktop-common')
        r.flAdd('tango-icon-theme-extras', groupName='group-desktop-common')

        r.flAdd('sound-theme-freedesktop', groupName='group-desktop-common')

        # this way groups will behave (!)
        r.rplAdd('splashy', versionStr='/conary.rpath.com@rpl:devel//2-qa/0.3.5-20-0.1', groupName='group-desktop-common')
        r.flAdd('splashy-theme', groupName='group-desktop-common')

        ## inotify bits
        r.flAdd('libnotify', groupName='group-desktop-common')

        ## 3d desktop stuff
        # compiz is now in all editions, as it has now kde support

        r.flAdd('compiz', groupName='group-desktop-common')
        r.flAdd('compiz-manager', groupName='group-desktop-common')

        r.flAdd('compiz-gnome', groupName='group-gnome', source='compiz')

        r.flAdd('avant-window-navigator', groupName='group-gnome')
        r.flAdd('awn-extras', groupName='group-gnome')

        # assuming compiz-manager is really reliable
        # compiz-fusion will go nowhere.
        #r.flAdd('fusion-icon', groupName='group-gnome', byDefault=False)

        r.flAdd('bcop', groupName='group-desktop-common')
        r.flAdd('compizconfig', groupName='group-desktop-common')
        r.flAdd('simple-ccsm', groupName='group-desktop-common')
        r.flAdd('libcompizconfig', groupName='group-desktop-common')
        r.flAdd('compizconfig-python', groupName='group-desktop-common')
        r.flAdd('compizconfig-backend-gconf', groupName='group-desktop-common')
        r.flAdd('compiz-fusion-plugins-main', groupName='group-desktop-common')
        r.flAdd('compiz-fusion-plugins-extra', groupName='group-desktop-common')
        r.flAdd('compiz-fusion-plugins-unsupported', groupName='group-desktop-common')
        r.flAdd('emerald', groupName='group-gnome')
        r.flAdd('emerald-themes', groupName='group-gnome')

        ## theme engines
        r.flAdd('gtk-engine-murrine', groupName='group-gnome-extras')
        r.flAdd('gtk-nodoka-engine', groupName='group-gnome-extras')
        r.flAdd('gtk-engine-ubuntulooks', groupName='group-gnome-extras')
        r.flAdd('theme-engine-sun-nimbus', groupName='group-gnome-extras')
        r.flAdd('gtk-aurora-engine', groupName='group-gnome-extras')
        r.flAdd('QGtkStyle', groupName='group-gnome-extras')
        r.flAdd('gnome-themes-extras', groupName='group-gnome-extras')

        ## graphics tools
        r.flAdd('f-spot', groupName='group-gnome')

        r.flAdd('graphviz', groupName='group-desktop-common-devel')
        r.flAdd('graphviz-mono', groupName='group-desktop-common-devel', source='graphviz')
        r.flAdd('graphviz-ruby', groupName='group-desktop-common-devel', source='graphviz')
        #r.flAdd('graphviz-java', groupName='group-desktop-common-devel', source='graphviz')
        #r.flAdd('graphviz-guile', groupName='group-desktop-common-devel', source='graphviz')
        r.flAdd('graphviz-perl', groupName='group-desktop-common-devel', source='graphviz')
        r.flAdd('graphviz-tcl', groupName='group-desktop-common-devel', source='graphviz')


        # foresight build related stuff
        r.flAdd('foresight-recipes', groupName='group-desktop-common-devel')

        ## brasero bits
        r.flAdd('brasero', groupName='group-gnome')

        #
        # foresight gnome stack
        #
        # the bits below are automatically generated from  gnome f.d.o jhbuild xml files
        # [http://ftp.gnome.org/pub/GNOME/teams/releng/...]
        # plz do not remove  them, or alter order if you don't know what you are doing ;)
        #
        # FIXME: I need to script  a smart way of parse what is strict userland and what is
        # strict group-devel-gnome stuff

        # FIXME: make tests to check/handle handle pkgs listed below when they are pkgSpeced


        #  MISSING   'libcolorblind', 'opencdk', - xchat

        #  gnome external modules (xulrunner is in group-internet). the others for now remain here

        # avahi, hal  and dbus are PkgSpeced
        # r.flAdd('hal-gnome', groupName='group-gnome')
        r.flAdd('dbus-x11', groupName='group-gnome', source='dbus')
        r.rplAdd('info-avahi', groupName='group-gnome')
        r.flAdd('avahi-tools', groupName='group-gnome', source='avahi', byDefault=False)
        r.flAdd('avahi-glib', groupName='group-gnome', source='avahi')
        r.flAdd('avahi-sharp', groupName='group-gnome', source='avahi')
        r.flAdd('gnome-mount', groupName='group-gnome')
        r.flAdd('libcanberra', groupName='group-gnome')

        #  meta-gnome-core
        for g in [
            'gnome-desktop',
            'gnome-panel',
            'gnome-panel-layout',
            'gnome-session',
            'gnome-terminal',
            'gnome-applets',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-nautilus
        for g in [
            'nautilus',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-devel-tools
        for g in [
            'glade',
            'gconf-editor',
            'devhelp',
            ]:
            r.flAdd(g, groupName='group-gnome-devel')

        #  meta-gnome-python
        for g in [
            'pygtk',
            'gnome-python',
            'gnome-python-desktop',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-c++
        for g in [
            'gtkmm',
            'libgnomeuimm',
            'gnome-vfsmm',
            'libxml++',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-accessibility
        for g in [
            'dasher',
            'gnome-mag',
            'gok',
            'gnome-speech',
            'orca',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-devel-platform-upcoming-deprecations
        for g in [
            'ORBit2',
            'audiofile',
            'esound',
            'libIDL',
            'libart_lgpl',
            'libbonobo',
            'libbonoboui',
            'libgnome',
                ('libgnome-background', 'libgnome'),
            'libgnomecanvas',
            'libgnomeui',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-devel-platform
        for g in [
            'GConf',
            'at-spi',
            'atk',
            'glib',
            'gnome-mime-data',
            'gnome-vfs',
            'gvfs',
            'gtk',
            'gtk-doc',
            'intltool',
            'libglade',
            'libxml2',
            'libxslt',
            'pango',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-desktop-upcoming-deprecations
        for g in [
            'libgnomeprint',
            'libgnomeprintui',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-desktop-suite
        for g in [
            'alacarte',
            'bug-buddy',
            'gnome-control-center',
            'mousetweaks',
            'gnome-settings-daemon',
            'deskbar-applet',
            'eel',
            'ekiga',
            'eog',
            'evince',
            'evolution-data-server',
            'evolution',
            'evolution-exchange',
            'evolution-webcal',
            'file-roller',
            'gcalctool',
            'gdm',
            'gdm-user-switch-applet',
            'gedit',
            'gnome-backgrounds',
            'gnome-doc-utils',
            'gnome-games',
            'gnome-icon-theme',
            'gnome-keyring',
            'gnome-netstatus',
            'gnome-nettool',
            'gnome-media',
            'gnome-menus',
            'gnome-main-menu',
            'gnome-shutdown',
            'gnome-power-manager',
            'gnome-screensaver',
            'gnome-system-monitor',
            'gnome-system-tools',
            'gnome-themes',
            'gnome-user-docs',
            'gnome-utils',
            'gnome-volume-manager',
            'gstreamer',
            'gst-plugins-base',
            'gst-plugins-good',
            'gtk-engines',
            'gtkhtml',
            'gtksourceview',
            'gucharmap',
            'libgnomekbd',
            'libgtop',
            'liboobs',
            'librsvg',
            'libsoup',
            'libwnck',
            'metacity',
            'nautilus-cd-burner',
            'seahorse',
            'seahorse-plugins',
            'tomboy',
            'totem',
            'vino',
            'vte',
            'yelp',
            'zenity',
            'hamster-applet',
            ]:
            r.flAdd(g, groupName='group-gnome')

        r.flAdd('sound-juicer', groupName='group-gnome', byDefault=False)

        #  meta-gnome-bindings-c++
        for g in [
            'glibmm',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-bindings-c++
        for g in [
            'libglademm',
            'gconfmm',
            'libgnomecanvasmm',
            'libgnomemm',
            ]:
            r.flAdd(g, groupName='group-gnome-extras')

        #  meta-gnome-bindings-python
        for g in [
            'pygobject',
            'pyorbit',
            ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-admin
        for g in [
            'pessulus',
            'sabayon',
            ]:
            r.flAdd(g, groupName='group-gnome-extras')

        #  meta-gnome-proposed
        for g in [
            'pygtksourceview',
            ]:
            r.flAdd(g, groupName='group-gnome')

        # upstream gnome required dependencies
        for g in [
            'rarian',
            'libxklavier',
#            'libcolorblind',
            'system-tools-backends',
#            'opencdk',
            'icon-naming-utils',
            ('libXft', 'xorg-libs'),
            #'camorama',
            'cheese',
            'enchant',
            'libdaemon',
            'fontconfig',
            'hicolor-icon-theme',
            'dbus',
            'cairomm',
            'avahi',
            'hal',
            'libgcrypt',
            'gnome-vfs-monikers',
            'libcroco',
            'liboil',
            'guile',
            'libgsf',
            'autogen',
#            'xchat',
            'opal',
            'cairo',
            'libgpg-error',
            'dbus-glib',
            'iso-codes',
            'startup-notification',
            'libtasn1',
            'xdg-user-dirs',
            'gob2',
            'libmusicbrainz',
            'gnome-common',
            'pycairo',
            'libsigc++',
            'libgnomecups',
            'gamin',
            'shared-mime-info',
            ]:
            r.flAdd(g, groupName='group-gnome')

        r.flAdd('gnome-cups-manager', groupName='group-gnome')
        r.flAdd('foresight-user-guide', groupName='group-gnome')
        r.flAdd('gnutls', groupName='group-gnome')

        # FIXME
        # we will want in the future to extend the tag handlers 
        # to call desktop-file-install   --vendor=foresight ...
        r.rplAdd('desktop-file-utils', groupName='group-foresight-basics')

        #
        # end of 'default' f.d.o gnome stuff.
        #

        #
        # 'closures' section
        #

        r.flAdd('gnome-python-extras', groupName='group-devel')

        # needed for evince
        r.flAdd('djvulibre', groupName='group-gnome')

        # complement for gedit
        r.flAdd('gedit-plugins', groupName='group-gnome')

        # complement for gnome-games
        r.flAdd('gnome-games-extra-data', groupName='group-gnome')

        # needed by cairo
        r.flAdd('glitz', groupName='group-gnome')

        # needed by gimp and f-spot
        r.flAdd('libgtkhtml', groupName='group-gnome')

        # needed at least by pygtk
        r.flAdd('python-numeric', groupName='group-gnome')

        # needed at least by eog
        r.flAdd('lcms', groupName='group-gnome')

        # needed at least by tomboy
        r.flAdd('gmime', groupName='group-gnome')
        r.flAdd('gtkspell', groupName='group-gnome')

        # needed for hal
        r.flAdd('smbios', groupName='group-gnome')
        r.flAdd('hal-info', groupName='group-gnome')
        r.flAdd('ConsoleKit', groupName='group-gnome')

        # media tools
        r.flAdd('banshee', groupName='group-gnome')
        r.flAdd('hal-sharp', groupName='group-gnome') # dep for banshee
        r.flAdd('ipod-sharp', groupName='group-gnome') # dep for banshee
        r.flAdd('podsleuth', groupName='group-gnome') # dep for banshee
        r.flAdd('mono-zeroconf', groupName='group-gnome') # dep for banshee
        r.flAdd('libgphoto2-sharp', groupName='group-gnome') # needed by banshee for mtp support
        r.flAdd('libgphoto2', groupName='group-gnome') # needed by f-spot

        # needed at least by yelp and nautilus
        r.flAdd('beagle', groupName='group-gnome')
        r.rplAdd('info-beagleindex', groupName='group-gnome')

        r.flAdd('gtksourceview-sharp', groupName='group-gnome-devel') #dep for monodevelop
        r.flAdd('libgdiplus', groupName='group-gnome-devel') #dep for monodevelop
        r.flAdd('mono-addins', groupName='group-gnome-devel') #dep for monodevelop
        r.flAdd('mono-tools', groupName='group-gnome-devel')
        r.flAdd('monodevelop', groupName='group-gnome-devel')
        r.flAdd('monodoc', groupName='group-gnome-devel')
        r.flAdd('meld', groupName='group-gnome-devel')
        r.flAdd('gnome-build', groupName='group-gnome-devel')
        r.flAdd('valgrind', groupName='group-gnome-devel')
        r.flAdd('anjuta', groupName='group-gnome-devel')
        r.flAdd('stetic', groupName='group-gnome-devel')
        r.flAdd('PyYAML', groupName='group-gnome-devel')

        # translation stuff
        r.flAdd('translate-toolkit', groupName='group-gnome-devel')
        r.flAdd('poedit', groupName='group-gnome-devel')

        # needed at least by evolution
        r.flAdd('gal', groupName='group-gnome')


        # needed at least by beagle
        r.flAdd('evolution-sharp', groupName='group-gnome')
        r.flAdd('gsf-sharp', groupName='group-gnome')

        # needed by pwlib at least
        r.flAdd('libavc1394', groupName='group-gnome')
        r.flAdd('libdv', groupName='group-gnome')
        r.flAdd('libraw1394', groupName='group-gnome')

        # needed at least by gst-plugins-good
        r.flAdd('speex', groupName='group-gnome')

        # needed at least by gnome-compiz-manager
        r.flAdd('gob2', groupName='group-gnome')

        #
        r.flAdd('freetype', groupName='group-gnome')

        # needed  by bug-buddy
        r.rplAdd('libelf', groupName='group-gnome')


        # needed by gnome-games
        r.flAdd('libggz', groupName='group-gnome')
        r.flAdd('ggz-server', groupName='group-gnome')
        r.flAdd('ggz-client-libs', groupName='group-gnome')
        r.flAdd('ggz-gtk-client', groupName='group-gnome-extras')

        # byDefault=False stuff
        r.flAdd('camorama', groupName='group-gnome', byDefault=False)

        # get group-gnome-devel usefull by default...
        #
        r.flAdd('gmime', groupName='group-gnome-devel')
        r.flAdd('gnome-common', groupName='group-gnome-devel')
        r.flAdd('gnome-doc-utils', groupName='group-gnome-devel')
        r.flAdd('gtk-doc', groupName='group-gnome-devel')
        r.flAdd('gtkspell', groupName='group-gnome-devel')
        r.rplAdd('libtool', groupName='group-desktop-common-devel')

        # end of group-gnome
        #

        #
        # xfce block
        #

        # Create group-xfce, which all other xfce groups become children of
        r.flCreateGroup('group-xfce', parentGroup='group-desktop-platform', depCheck=False)
        r.flCreateGroup('group-xfce-core', parentGroup='group-xfce', depCheck=False)
        xfce = [
            'gtk-xfce-engine',
            'libexo',
            'libxfce4menu',
            'libxfce4util',
            'libxfcegui4',
            'mousepad',
            'orage',
            'xarchiver',
            'Thunar',
            'thunar-volman',
            'xfce4-appfinder',
            'xfce4-icon-theme',
            'xfce4-mixer',
            'xfce4-panel',
            'xfce4-places-plugin',
            'xfce4-session',
            'xfconf',
            'xfce4-settings',
            'xfce-terminal',
            'xfce-utils',
            'xfdesktop',
            'xfprint',
            'xfwm4',
            'xfwm4-themes',
            'xscreensaver' ]

        for p in xfce:
            r.flAdd(p, groupName='group-xfce-core')

        # these aren't xfce packages, but are needed
        gnomepackages = [
            'gtk-engines',
            'gdm',
            'gnome-session',
            'libgnome-background',
            'gnome-settings-daemon', # needed by gdm
            'hicolor-icon-theme',
            'gnome-packagekit',
            'PolicyKit-gnome',
            'network-manager-applet',
            'shared-mime-info',
            
        ]

        for p in gnomepackages:
            r.flAdd(p, groupName='group-xfce')

        # satisfy dependencies
        for p in [
            # seahorse deps
            'libgnomeui',
            'libgnome',
            # abiword deps
            'enchant',
            'gucharmap',
            'libgnomeprint', # hopefully removed with abiword 2.8
            'libgnomeprintui', # hopefully removed with abiword 2.8
            'psiconv',
            'libwmf',
            'wv',
            # misc
            'libcddb',
            'libcdio',
            'libsexy',
            'librsvg', # cheese, abiword, gdm, ...
            'glitz',
            'gst-plugins-base', # exaile, totem, whaawmp
            'gst-plugins-good',
            # gdm 
            'iso-codes',
            'at-spi',
            'gnome-icon-theme',
            ]:
            r.flAdd(p, groupName='group-xfce')

        r.flCreateGroup('group-xfce-apps', parentGroup='group-xfce', depCheck=False)
        # some other applications we want, might go in different groups later.
        for p in [
            'bogofilter',
            'claws-mail',
            'claws-mail-extra-plugins',
            'ekiga',
            'evince',
            'goffice',
            'gnumeric',
            'abiword',
            'abiword-plugins',
            'seahorse',
            'seahorse-plugins',
            ]:
            r.flAdd(p, groupName='group-xfce-apps')

        # multimedia applications for xfce edition.
        for p in [
            'pulseaudio-xfce',
            'exaile',
            'ristretto',
            'cheese',
            'totem',
            'xfburn',
            ]:
            r.flAdd(p, groupName='group-xfce-apps')
        # end of group-xfce-apps

        for p in [
            'geany',
            'glade',
            'xfce4-dev-tools',
            ]:
            r.flAdd(p, groupName='group-xfce-devel')

        r.flCreateGroup('group-xfce-extras', parentGroup='group-xfce', depCheck=False)
        # packages not installed by default
        for p in [
            # goodies
            'xfce4-battery-plugin',
            'xfce4-cddrive-plugin',
            'xfce4-cellmodem-plugin',
            'xfce4-cpugraph-plugin',
            'xfce4-dict-plugin',
            'xfce4-fsguard-plugin',
            'xfce4-genmon-plugin',
            'xfce4-modemlights-plugin',
            'xfce4-notes-plugin',
            'xfce4-quicklauncher-plugin',
            'xfce4-radio-plugin',
            'xfce4-screenshooter-plugin',
            'xfce4-sensors-plugin',
            'xfce4-smartbookmark-plugin',
            'xfce4-taskmanager',
            'xfce4-systemload-plugin',
            'xfce4-volstatus-icon',
            'xfce4-wavelan-plugin',
            'xfce4-weather-plugin',
            'xfce4-xfapplet-plugin',
            'xfce4-xkb-plugin',
            # 3rd party apps
            'abiword-docs',
            'abiword-extras',
            'whaawmp',
            ]:
            r.flAdd(p, groupName='group-xfce-extras')

        # end of xfce block

        #
        # kde block
        #

        # Deps for various kde apps
        kdeDeps = [
            #core kde deps
            # digikam
            'libkdcraw', 'libkexiv2', 'libkipi',
            # k3b
            'cdrdao',
        ]
        for p in kdeDeps:
            r.flAdd(p, groupName='group-kde', byDefault=False)

        # TODO: Various apps, we need to decide where to put them later
        kdeApps = [
            'kkbswitch',
            #'ktorrent', # readd when fixed to not use kdelibs4
            #'yakuake', # readd when fixed to not use kdelibs4
            'quassel',
        ]
        for p in kdeApps:
            r.flAdd(p, groupName='group-kde', byDefault=True)

        r.flCreateGroup('group-kde-core', parentGroup='group-kde', depCheck=False)

        # These should go into group-foresight-basics

        r.flAdd('libmad', groupName='group-kde-core', components = ['lib'])

        # Core kde libs
        kdeLibs = [
            # kde3 deps
            'arts',
            'akode',
            ('avahi-qt3', 'avahi'),
            'dbus-qt3',
            'kdelibs',
            'kdnssd-avahi',
            #'gtk-qt-engine', # readd when fixed to not use kdelibs4
            'kde-settings',
        ]
        for p in kdeLibs:
            r.flAdd(p, groupName='group-kde-core')

        r.flCreateGroup('group-kdebase', parentGroup='group-kde', depCheck=False)
        #r.flAdd('kde-i18n', groupName='group-kdebase')

        kdebase = [
            'kdebase',
            'kdebase-workspace',
            'kappfinder',
            'kate',
            'kdcop',
            'kdeeject',
            'kdepasswd',
            'kdeprint',
            'kdialog',
            'kdm',
            'kfind',
            'khelpcenter',
            'khotkeys',
            'knetattach',
            'konqueror',
            'konqueror-nsplugins',
            'konsole',
            'kpager',
            'kxkb',
            'libkonq',

            ]
        for p in kdebase:
            r.flAdd(p, groupName='group-kdebase', source='kdebase')

        r.flCreateGroup('group-kdeaccessibility', parentGroup='group-kde', depCheck=False)
        kdeaccessibility = [
            'kbstate',
            'kdeaccessibility-icons-mono',
            'kmag',
            'kmousetool',
            'kmouth',
            'ksayit',
            'kttsd',
        ]
        for p in kdeaccessibility:
            r.flAdd(p, groupName='group-kdeaccessibility', source='kdeaccessibility')

        r.flCreateGroup('group-kdeaddons', parentGroup='group-kde', depCheck=False)
        kdeaddons = [
            'atlantik-designer',
            'kaddressbook-plugins',
            'kate-plugins',
            'kfile-plugins-addons',
            'kicker-applets',
            'knewsticker-scripts',
            'konq-plugins',
            'ksig',
            'noatun-plugins',
            'renamedlg-plugins',
        ]
        for p in kdeaccessibility:
            r.flAdd(p, groupName='group-kdeaddons', source='kdeaddons')

        r.flCreateGroup('group-kdeadmin', parentGroup='group-kde', depCheck=False)
        kdeadmin = [
            'kcron',
            'kdat',
            'kfile-plugins-admin',
            'knetworkconf',
            'ksysv',
            'kuser',
            'secpolicy',
        ]
        for p in kdeadmin:
            r.flAdd(p, groupName='group-kdeadmin', source='kdeadmin')

        r.flCreateGroup('group-kdeartwork', parentGroup='group-kde', depCheck=False)
        kdeartwork = [
            'kdeartwork-emoticons',
            'kdeartwork-icewm-themes',
            'kdeartwork-icon-themes',
            'kdeartwork-kwin-styles',
            'kdeartwork-kworldclock',
            'kdeartwork-sounds',
            'kdeartwork-styles',
            'kdeartwork-wallpapers',
            'kscreensaver-extra',
        ]
        for p in kdeartwork:
            r.flAdd(p, groupName='group-kdeartwork', source='kdeartwork')

        r.flCreateGroup('group-kdeedu', parentGroup='group-kde', depCheck=False)
        kdeedu = [
            'blinken',
            'kalzium',
            'kanagram',
            'kbruch',
            'kdeedu',
            'keduca',
            'kgeography',
            'khangman',
            'kig',
            'kiten',
            'klatin',
            'klettres',
            'kmplot',
            'kpercentage',
            'kstars',
            'ktouch',
            'kturtle',
            'kverbos',
            'kvoctrain',
            'kwordquiz'
        ]
        for p in kdeedu:
            r.flAdd(p, groupName='group-kdeedu', source='kdeedu')

        r.flCreateGroup('group-kdegames', parentGroup='group-kde', depCheck=False)
        kdegames = [
            'kasteroids',
            'katomic',
            'kbackgammon',
            'kbattleship',
            'kblackbox',
            'kbounce',
            'kdegames',
            'kenolaba',
            'kfouleggs',
            'kgoldrunner',
            'kjumpingcube',
            'klickety',
            'klines',
            'kmahjongg',
            'kmines',
            'knetwalk',
            'kolf',
            'konquest',
            'kpat',
            'kpoker',
            'kreversi',
            'ksame',
            'kshisen',
            'ksirtet',
            'ksmiletris',
            'ksnake',
            'ksokoban',
            'kspaceduel',
            'ktron',
            'ktuberling',
            'kwin4',
        ]
        for p in kdegames:
            r.flAdd(p, groupName='group-kdegames', source='kdegames')

        for p in ['atlantik', 'lskat']:
            r.flAdd(p, groupName='group-kdegames', source='kdegames', byDefault=False)

        r.flCreateGroup('group-kdegraphics', parentGroup='group-kde', depCheck=False)

        kdegraphics = [
            'kamera',
            'kcoloredit',
            'kdvi',
            'kfax',
            'kfaxview',
            'kfile-plugins-graphics',
            'kgamma',
            'kghostview',
            'kiconedit',
            'kmrml',
            'kolourpaint',
            'kpdf',
            'kruler',
            'ksnapshot',
            'ksvg',
            'kview',
            'kviewshell',
            'libkscan',

            #Not kde, but we want it anyway
            'gimp'

        ]
        for p in kdegraphics:
            r.flAdd(p, groupName='group-kdegraphics', source='kdegraphics')

        for p in ['kooka', 'kpovmodeler']:
            r.flAdd(p, groupName='group-kdegraphics', source='kdegraphics', byDefault=False)
            

        r.flCreateGroup('group-kdemultimedia', parentGroup='group-kde', depCheck=False)

        kdemultimedia = [
          # kdemultimedia
            'arts-plugin-akode',
            'arts-plugin-audiofile',
            'arts-plugin-mpeglib',
            'artsbuilder',
            'kappfinder-multimedia',
            'kaudiocreator',
            'kfile-plugins-multimedia',
            'kio-plugins-multimedia',
            'kmid',
            'kmix',
            'krec',
            'kscd',
            'libkcddb',
            'noatun',

          #other, not part of kdemultimedia
            'k3b',
            'PyQt', #Amarok Deps
            'sip',
            'libgpod',
            'libofa',
            'libtunepimp',
            'libwmf',
            'fftw',
        ]
        for p in kdemultimedia:
            r.flAdd(p, groupName='group-kdemultimedia', source='kdemultimedia')

        for p in ['juk', 'kaboodle']:
            r.flAdd(p, groupName='group-kdemultimedia', source='kdemultimedia', byDefault=False)

        r.flCreateGroup('group-kdenetwork', parentGroup='group-kde', depCheck=False)
        kdenetwork = [
            'dcoprss',
            'kdenetwork-filesharing',
            'kdenetwork-lanbrowsing',
            'kdenetwork-librss',
            'kdict',
            'kdnssd',
            'kdnssd-avahi',
            'kfile-plugins-network',
            'kget',
            'knewsticker',
            'kopete',
            'qca-tls',
            'kpf',
            'kppp',
            'krdc',
            'krfb',
            'konversation',
            'ktalkd',
            'kwifimanager',
        ]
        for p in kdenetwork:
            r.flAdd(p, groupName='group-kdenetwork', source='kdenetwork')

        for p in ['ksirc']:
            r.flAdd(p, groupName='group-kdenetwork', source='kdenetwork', byDefault=False)

        r.flCreateGroup('group-kdepim', parentGroup='group-kde', depCheck=False)
        kdepim = [
            'akregator',
            'kaddressbook',
            'kalarm',
            'kandy',
            'karm',
            'kdepim',
            'kdepim-wizards',
            'kfile-plugins-pim',
            'kio-plugins-pim',
            'kleopatra',
            'kmail',
            'kmobile',
            'knode',
            'knotes',
            'kode',
            'konsolekalendar',
            'kontact',
            'korganizer',
            'korn',
            'kpilot',
            'kresources',
            'ktnef',
            'libemailfunctions',
            'libkcal',
            'libkdenetwork',
            'libkholidays',
            'libkpgp',
            'libkpimexchange',
            'libkpimidentities',
        ]
        for p in kdepim:
            r.flAdd(p, groupName='group-kdepim', source='kdepim')

        r.flCreateGroup('group-kdesdk', parentGroup='group-kde', depCheck=False, byDefault=False)
        kdesdk = [
            'cervisia',
            'kapptemplate',
            'kbabel',
            'kbugbuster',
            'kcachegrind',
            'kdeaccounts-plugin',
            'kdesdk-scheck',
            'kdesdk-scripts',
            'kfile-plugins-sdk',
            'kmtrace',
            'kompare',
            'kprofilemethod',
            'kspy',
            'kuiviewer',
            'kunittest',
            'poxml',
            'umbrello',
        ]
        for p in kdesdk:
            r.flAdd(p, groupName='group-kdesdk', source='kdesdk')

        r.flCreateGroup('group-kdetoys', parentGroup='group-kde', depCheck=False, byDefault=False)
        kdetoys = [
            'amor',
            'keyes',
            'kfifteen',
            'kmoon',
            'kodo',
            'kteatime',
            'ktux',
            'kweather',
            'kworldwatch',
        ]
        for p in kdetoys:
            r.flAdd(p, groupName='group-kdetoys', source='kdetoys')

        r.flCreateGroup('group-kdeutils', parentGroup='group-kde', depCheck=False)
        kdeutils = [
            'ark',
            'kcalc',
            'kcharselect',
            'kdelirc',
            'kdessh',
            'kdf',
            'kedit',
            'kfloppy',
            'kgpg',
            'khexedit',
            'kjots',
            'klaptopdaemon',
            'kmilo',
            'kregexpeditor',
            'ksim',
            'ktimer',
            'kwallet',
            'superkaramba',
        ]
        for p in kdeutils:
            r.flAdd(p, groupName='group-kdeutils', source='kdeutils')

        r.flCreateGroup('group-kdewebdev', parentGroup='group-kde', depCheck=False, byDefault=False)
        kdewebdev = [
            'kfilereplace',
            'kimagemapeditor',
            'klinkstatus',
            'kommander',
            'kxsldbg',
            'quanta',
        ]
        for p in kdewebdev:
            r.flAdd(p, groupName='group-kdewebdev', source='kdewebdev')

        r.flCreateGroup('group-koffice', parentGroup='group-kde', depCheck=False)
        kdekoffice = [
            'koffice-common',
            'karbon',
            'kchart',
            'kexi',
            'kexi-mysql',
            'kexi-postgresql',
            'kformula',
            'kivio',
            'kplato',
            'kpresenter',
            'krita',
            'kspread',
            'kugar',
            'kword',
        ]
        for p in kdekoffice:
            r.flAdd(p, groupName='group-koffice', source='kdekoffice')


        # we're jumping into python2.5
        # Will need to have both python2.4 and python2.5 installed
        # side-by-side -- conary hasn't been ported to 2.5 yet,
        # and all python deps are now specific to the python version
        # in use.  So this will have to be add, not replace...
        # r.replace('python', r.foresightLinuxLabel)
        # r.replace('idle', r.foresightLinuxLabel)

        #FIXME.
        r.flAdd('guile', groupName = 'group-devel')

        # docbook stuff. we want more recent stuff than rPL's
        r.flAdd('docbook-dtds', groupName = 'group-devel')
        r.flAdd('docbook-xsl', groupName = 'group-devel')

        # FIXME: should _not_ be needed (but otherwise breaks groups)
        # to be fixed properly later
        if Arch.x86_64:
            for p in [ 'idle', 'sqlite', 'audit', 'openslp',
                       'parted', 'postgresql', 'perl', 'jasper',
                       ]:
                r.add( p + ':lib', groupName='group-compat32',
                       flavor = r.x86FlavorString,
                       searchPath = r.rplGroupUmbrellaCompat32)
            for p in [ 'Mesa', 'libXxf86vm', 'libexif',
                       'libgphoto2' ,'libXtst'
                       ]:
                r.add( p + ':lib', groupName='group-compat32',
                       flavor = r.x86FlavorString,
                       searchPath = r.foresightLinuxLabel)

        # rMake and friends
        r.flAdd('conary-repository', versionStr=r.conaryVersion, groupName='group-desktop-common-devel')
        r.flAdd('conary-build', versionStr=r.conaryVersion, groupName='group-desktop-common-devel')
        for rbuild in 'decorator','rpath-common','rpath-xmllib','rpath-product-definition','rbuild':
            r.flAdd(rbuild, versionStr='mkj.rpath.org@rpl:2', groupName='group-desktop-common-devel')
        #r.rplAdd('rmake', groupName='group-devel')


        # the ones below should (had) be(en) in group-devel from rpl...
        # More group-devel stuff that we need for anaconda
        r.rplAdd('elementtree', groupName='group-desktop-common-devel')
        r.rplAdd('neon', groupName='group-desktop-common-devel')
        r.rplAdd('gd', groupName='group-desktop-common-devel')
        r.rplAdd('htmlview', groupName='group-desktop-common-devel')
        r.rplAdd('kid', groupName='group-desktop-common-devel')

        # more group-devel stuff
        r.remove('python:test', groupName='group-world')
        
        r.flAdd('bzr', groupName='group-desktop-common-devel')
        r.rplAdd('ConfigObj', groupName='group-desktop-common-devel')
        r.flAdd('eclipse-sdk', groupName='group-desktop-common-devel', byDefault=False)
        r.flAdd('emacs', groupName='group-desktop-common-devel', byDefault=False)
        r.flAdd('scons', groupName='group-desktop-common-devel')

        #
        # our own xorg stack

        r.flCreateGroup('group-xorg', parentGroup='group-desktop-common', depCheck=False)

        r.flAdd('xorg-server', groupName='group-xorg')
        r.flAdd('system-config-keyboard', groupName='group-xorg')

        ## packages built by xorg-utils

        utils = [ 'gccmakedep',
                  'imake',
                  'xorg-cf-files',
                  'lndir',
                  'makedepend',
                  ]

        for p in utils:
            r.flAdd(p, source='xorg-utils', groupName='group-desktop-common-devel')

        ## end of packages built by xorg-utils

        r.flAdd('xtrans', groupName='group-desktop-common-devel')

        ## packages built by xorg-proto
        proto  = [
            'applewmproto',
            'bigreqsproto',
            'compositeproto',
            'damageproto',
            'dmxproto',
            'fixesproto',
            'fontcacheproto',
            'fontsproto',
            'glproto',
            'inputproto',
            'kbproto',
            'printproto',
            'randrproto',
            'recordproto',
            'renderproto',
            'resourceproto',
            'scrnsaverproto',
            'trapproto',
            'util-macros',
            'videoproto',
            'windowswmproto',
            'xcmiscproto',
            'xextproto',
            'xf86bigfontproto',
            'xf86dgaproto',
            'xf86driproto',
            'xf86miscproto',
            'xf86rushproto',
            'xf86vidmodeproto',
            'xineramaproto',
            'xproto',
            'xproxymanagementprotocol',
            'evieext',
            'xcb-proto',
            'libpthread-stubs',
            'vncproto',
            'xcliplistproto',
            'dri2proto'
             ]
        for p in proto:
            r.flAdd(p, source='xorg-proto', groupName='group-desktop-common-devel')

        ## end of list of packages built by xorg-proto

        r.flAdd('xcursor-themes', groupName='group-xorg', source='xorg-apps')
        r.rplAdd('xkeyboard-config', groupName='group-xorg')
        r.rplAdd('xorg-sgml-doctools', groupName='group-desktop-common-devel')

        ## packages built by xorg-libs

        libs = [
            'libAppleWM',
            'libdmx',
            'libFS',
            'liblbxutil',
            'liboldX',
            'libvnc',
            'libWindowsWM',
            'libXaw',
            'libXcliplist',
            'libXcomposite',
            'libXcursor',
            'libXdamage',
            'libXevie',
            'libXfont',
            'libXfontcache',
            ('libXft', 'xorg-libs'),
            'libXft1',
            'libXi',
            'libXinerama',
            'libxkbui',
            'libXprintAppUtil',
            'libXrandr',
            'libXres',
            'libXScrnSaver',
            'libXTrap',
            'libXtst',
            'libXvMC',
            'libXxf86dga',
            'libXxf86misc',
            'libXxf86vm',
            'xbitmaps',
            'xcb-util',
            'pixman',
            'libpciaccess'
            ]

        for p in libs:
            r.flAdd(p, source='xorg-libs', groupName='group-xorg')


        ## end of packages built by xorg-libs

        r.flAdd('libfontenc', groupName='group-xorg')
        r.flAdd('libICE', groupName='group-xorg')
        r.flAdd('libSM', groupName='group-xorg')
        r.flAdd('libX11', groupName='group-xorg')
        r.flAdd('libXau', groupName='group-xorg')
        r.flAdd('libxcb', groupName='group-xorg')
        r.flAdd('libXdmcp', groupName='group-xorg')
        r.flAdd('libXext', groupName='group-xorg')
        r.flAdd('libXfixes', groupName='group-xorg')
        r.flAdd('libxkbfile', groupName='group-xorg')
        r.flAdd('libXmu', groupName='group-xorg')
        r.flAdd('libXp', groupName='group-xorg')
        r.flAdd('libXpm', groupName='group-xorg')
        r.flAdd('libXprintUtil', groupName='group-xorg')
        r.flAdd('libXrender', groupName='group-xorg')
        r.flAdd('libXt', groupName='group-xorg')
        r.flAdd('libXv', groupName='group-xorg')
        r.flAdd('Mesa', groupName='group-xorg')

        # tricky. we need to explicitly install Mesa:lib{x86}
        if Arch.x86_64:
                r.flAdd('Mesa:lib', flavor='is: x86', groupName='group-xorg')

        r.flAdd('glx-utils', source='Mesa', groupName='group-xorg')
        r.flAdd('libdrm', groupName='group-xorg')

        ## packages built by xorg-apps

        apps = [
            'appres',
            'bdftopcf',
            'beforelight',
            'bitmap',
            'editres',
            'fonttosfnt',
            'fslsfonts',
            'fstobdf',
            'iceauth',
            'ico',
            'lbxproxy',
            'listres',
            'luit',
            'mkfontdir',
            'mkfontscale',
            'oclock',
            'proxymngr',
            'rgb',
            'rstart',
            'scripts',
            'sessreg',
            'setxkbmap',
            'showfont',
            'smproxy',
            'twm',
            'viewres',
            'x11perf',
            'xauth',
            'xbiff',
            'xcalc',
            'xclipboard',
            'xclock',
            'xcmsdb',
            'xconsole',
            # order is important here...
            'xcursorgen',
            ('xcursor-themes', 'xorg-apps'),
            #
            'xdbedizzy',
            'xditview',
            'xdm',
            'xdpyinfo',
            'xedit',
            'xev',
            'xeyes',
            'xf86dga',
            'xfd',
            'xfindproxy',
            'xfontsel',
            'xfs',
            'xfsinfo',
            'xfwp',
            'xgamma',
            'xgc',
            'xhost',
            'xinit',
            'xkbcomp',
            'xkbevd',
            'xkbprint',
            'xkbutils',
            'xkill',
            'xload',
            'xlogo',
            'xlsatoms',
            'xlsclients',
            'xlsfonts',
            'xmag',
            'xman',
            'xmessage',
            'xmh',
            'xmodmap',
            'xmore',
            'xphelloworld',
            'xplsprinters',
            'xpr',
            'xprehashprinterlist',
            'xprop',
            'xrandr',
            'xrdb',
            'xrefresh',
            'xrx',
            'xset',
            'xsetmode',
            'xsetpointer',
            'xsetroot',
            'xsm',
            'xstdcmap',
            'xtrap',
            'xvidtune',
            'xvinfo',
            'xwd',
            'xwininfo',
            'xwud',
            'mkcomposecache',
            'rendercheck',
            'xbacklight',
            'xinput',
            'xcompmgr'
            ]

        for p in apps:
            r.flAdd(p, source='xorg-apps', groupName='group-xorg')

        ## end of packages built by xorg-apps

        r.flCreateGroup('group-xorg-fonts', parentGroup='group-xorg', depCheck=False)
        ## packages built by xorg fonts
        fonts = [
            'encodings',
            'font-adobe-100dpi',
            'font-adobe-75dpi',
            'font-adobe-utopia-100dpi',
            'font-adobe-utopia-75dpi',
            'font-adobe-utopia-type1',
            'font-alias',
            'font-arabic-misc',
            'font-bh-100dpi',
            'font-bh-75dpi',
            'font-bh-lucidatypewriter-100dpi',
            'font-bh-lucidatypewriter-75dpi',
            'font-bh-ttf',
            'font-bh-type1',
            'font-bitstream-100dpi',
            'font-bitstream-75dpi',
            'font-bitstream-speedo',
            'font-bitstream-type1',
            'font-cronyx-cyrillic',
            'font-cursor-misc',
            'font-daewoo-misc',
            'font-dec-misc',
            'font-ibm-type1',
            'font-isas-misc',
            'font-jis-misc',
            'font-micro-misc',
            'font-misc-cyrillic',
            'font-misc-ethiopic',
            'font-misc-meltho',
            'font-misc-misc',
            'font-mutt-misc',
            'font-schumacher-misc',
            'font-screen-cyrillic',
            'font-sony-misc',
            'font-sun-misc',
            'font-winitzki-cyrillic',
            'font-xfree86-type1',
             ]

        for p in fonts:
            r.flAdd(p, source='xorg-fonts', groupName='group-xorg-fonts')

        ## end of packages built by xorg-fonts

        # extra fonts we ship
        r.flAdd('urw-fonts', groupName='group-xorg-fonts')
        r.flAdd('liberation-fonts-ttf', groupName='group-xorg-fonts')
        r.flAdd('msttcorefonts', groupName='group-xorg-fonts')
        r.rplAdd('bitstream-vera-fonts', groupName='group-xorg-fonts')

        r.flAdd('charis-fonts', groupName='group-xorg-fonts')
        r.flAdd('gentium-fonts', groupName='group-xorg-fonts')

        r.flAdd('dejavu-fonts-ttf', groupName='group-xorg-fonts')

        r.flCreateGroup('group-xorg-fonts-extra', parentGroup='group-xorg', depCheck=False, byDefault=False)
        r.flAdd('sazanami-font', groupName='group-xorg-fonts-extra')
        r.flAdd('scim')
        r.flAdd('scim-anthy')
        r.flAdd('anthy')
        r.flAdd('jd')

        r.flCreateGroup('group-xorg-drivers', parentGroup='group-xorg', depCheck=False)

        ## packages built by xorg-drivers-input
        inputDrivers = [
            'xf86-input-acecad',
            'xf86-input-aiptek',
            'xf86-input-calcomp',
            'xf86-input-citron',
            'xf86-input-digitaledge',
            'xf86-input-dmc',
            'xf86-input-dynapro',
            'xf86-input-elo2300',
            'xf86-input-elographics',
            'xf86-input-evdev',
            'xf86-input-fpit',
            'xf86-input-hyperpen',
            'xf86-input-jamstudio',
            'xf86-input-joystick',
            'xf86-input-keyboard',
            'xf86-input-magellan',
            'xf86-input-magictouch',
            'xf86-input-microtouch',
            'xf86-input-mouse',
            'xf86-input-mutouch',
            'xf86-input-palmax',
            'xf86-input-penmount',
            'xf86-input-spaceorb',
            'xf86-input-summa',
            'xf86-input-tek4957',
            'xf86-input-ur98',
            'xf86-input-vmmouse',
            'xf86-input-void',
            'xf86-input-diamondtouch'
            ]

        for p in inputDrivers:
            r.flAdd(p, source='xorg-driver-input', groupName='group-xorg-drivers')
        ## end of packages built by xorg-drivers-input

        # synaptic driver
        r.flAdd('x11-input-synaptics', groupName='group-xorg-drivers')

        ## packages built by xorg-drivers-video

        videoDrivers = [
            'xf86-video-apm',
            'xf86-video-ark',
            'xf86-video-ast',
            'xf86-video-ati',
            'xf86-video-chips',
            'xf86-video-cirrus',
            'xf86-video-dummy',
            'xf86-video-fbdev',
            'xf86-video-glint',
            'xf86-video-i128',
            'xf86-video-i740',
            'xf86-video-mga',
            'xf86-video-neomagic',
            'xf86-video-newport',
            'xf86-video-nv',
            'xf86-video-rendition',
            'xf86-video-s3',
            'xf86-video-s3virge',
            'xf86-video-savage',
            'xf86-video-siliconmotion',
            'xf86-video-sis',
            'xf86-video-sisusb',
            'xf86-video-tdfx',
            'xf86-video-trident',
            'xf86-video-tseng',
            'xf86-video-v4l',
            'xf86-video-vesa',
            'xf86-video-unichrome',
            'xf86-video-vmware',
            'xf86-video-voodoo',
            'xf86-video-intel',
            'xf86-video-xgi',
            'xf86-video-radeonhd'
            ]

        for p in videoDrivers:
            r.flAdd(p, source='xorg-driver-video', groupName='group-xorg-drivers')
        #Cheap hack for now to get around CNY-3000
        r.flAdd('xf86-video-i810', source='xorg-driver-video', groupName='group-xorg-drivers')

        ## end of packages built by xorg-drivers-video
        #
        #   end of our xorg stack
        #

        r.flAdd('cmake', groupName='group-desktop-common-devel')
        # Deps for cmake
        r.flAdd('xmlrpc-c', groupName='group-desktop-common-devel')

        # remainings

        r.flCreateGroup('group-supported-stuff-extra', parentGroup='group-desktop-platform', dynamicGroup = False)
        # here goes everything that isn't fit for any other group but _is_ in our labels
        for p in [
            'vnc',
            # java reqs
            'ant',
            'xalan-j',
            'xerces-j',
            'Sablot',
            'agg',
            'openmotif',
            # mono bindings...
            'evolution-sharp',
            'galago-sharp',
            'gecko-sharp',
            # 'gnome-desktop-sharp',
            'gnome-keyring-sharp',
            'gnome-sharp',
            'gsf-sharp',
            'gtk-sharp',
            'gtksourceview-sharp',
            'gtkspell-sharp',
            'hal-sharp',
            'ipod-sharp',
            'libgphoto2-sharp',
            'notify-sharp',
            'taglib-sharp',
            'telepathy-sharp',
            'libgpod',
            'eyeD3',
            'papi',
            #
            'iasl',
            'wv',
            'libmtp',
            'fontforge',
            'freeglut',
            'gtk-vnc',
            'vinagre',
            'lirc',
            'libirman',
            'evolution-python',
            'goocanvas',
            'libgmail',
            'pygoocanvas',
            'python-dateutil',
            'vobject',
            'docutils',
            'perl-Locale-gettext',
            'vala',
            'openbox',
            'obconf',
            'obmenu',
            'gajim',
            'billreminder',
            'gtk-recordmydesktop',
            'Cheetah',
            'powertop',
            'libmad',
            'psiconv',
            'Pyrex',
            'pwcrypt',
            'gnome-specimen',
            'cabextract',
            'dynamite',
            'orange',
            'libsynce',
            'unshield',
            'avidemux',
            'ipython',
            'rhythmbox',
            'loudmouth',
            'opera',
            'audacity',
            'tasque',
            'thoggen',
            'wireshark',
            'tsclient',
            'gtkglext',
            'lyx',
            'mugshot',
            'glipper',
            'nautilus-actions',
            'twitux',
            'mzscheme',
            'eclipse-sdk',
            'rdesktop',
#            'tightvnc',
            'gnome-rdp',
            'tsclient',
            # sword + frontends
            'sword',
            'gnomesword',
            #
            'firestarter',
            'id3lib',
            'likewise-open',
            'libgssglue',
            'easytag',
            'python-feedparser',
            'python-alsaaudio',
            'weechat',
            'bsddb3',
            'Miro',
            'net6',
            'obby',
            'gobby',
            'sobby',
            'sexy-python',
            'glabels',
            'irssi',
            'dvgrab',
            'kino',
            'libiec61883',
            'libquicktime',
            'alltray',
            'python-feedparser',
            'awn-extras',
            'easytag',
            'foobillard',
            'dia',
            'planner',
            'ufraw',
            'mozilla-filesystem',
            'desktop-data-model',
            'hippo-canvas',
            'xulrunner-1.8-compat',
            'gtksourceview-1.0-compat',
            'babl',
            'gegl',
            'monsoon',
            'cairo-dock',
            ('cairo-dock-plug-ins-xfce', 'cairo-dock'),
            'gtk-vnc',
            'dvda-author',
            'libvirt',
            'virtinst',
            'virt-manager',
            'virt-viewer',
            'js',
            'google-gadgets',
            'amarok',
            'terminator',
            'clutter',
            'clutter-cairo',
            'clutter-gtk',
            'clutter-gst',
            'pyclutter',
            'libmikmod',
            'dnsmasq',
            'latencytop',
            'soundconverter',
            'pilot-link',
            'pypanel',
            'python-xlib',
            'vanilla-dmz-cursor-theme',
            'vanilla-dmz-aa-cursor-theme',
            'yasm',
            'libcddb',
            'libcdio',
            'parcellite',
            'wesnoth',
            'libtar',
            # commented out for now, need to get the deps right
            #'PyOpenGL',
            #'SDL_Pango',
            #'SDL_gfx',
            #'SDL_ttf',
            #'compiz-check',
            #'conky',
            #'dvgrab',
            #'extremetuxracer',
            #'freealut',
            #'gbrainy',
            #'ghex',
            #'ghostscript',
            #'gnome-commander',
            #'griffith',
            #'hotwire-ssh',
            #'htop',
            #'kino',
            #'libiec61883',
            #'libmspack',
            #'libpaper',
            #'libquicktime',
            #'openal',
            #'pdftk',
            #'perl-ExtUtils-CBuilder',
            #'perl-File-BaseDir',
            #'perl-File-DesktopEntry',
            #'perl-File-MimeInfo',
            #'perl-PathTools',
            #'plib',
            #'pygame',
            #'pyrenamer',
            #'reportlab',
            #'smpeg',
            #'tuxpaint',
            #'tuxpaint-stamps',
            #'tuxpaint-ttf',
            #'tuxtype2',
            #'tvtime',
            'foresight-wallpapers-zinden',
            'WebKit',
            'pywebkitgtk',
            'gwibber',
            'paramiko',
            'bzr-svn',
            'ume-launcher', #netbook
            'maximus', #netbook
            'go-home-applet', #netbook
            'window-picker-applet', #netbook
            'desktop-switcher', #netbook
            'libfakekey',
            'deluge',
            'supertux',
            'supertuxkart',
            'tuxmath',
            'cuyo',
            'recordmydesktop',
            'wavpack',
            'libcddb',
            'libcdio',
            'smplayer',
            'check',
#            'bitlbee',
            'nautilus-dropbox',
            'soundtouch',
            'gtkunique',
            'pitivi',
            'gnonlin',
            'SILLY',
            'CEGUI',
            'smc',
            'espeak',
            'aspell-es',
            'libcanberra',
            'pangomm',
            'ptlib',
            'seahorse-plugins',
            'pastebinit',
            'guake',
            'sshfs',
            'gftp',
            'gnuplot',
            'gnucash',
            'aqbanking', # dep for gnucash
            'guile', # dep for gnucash
            'gwenhywfar', # dep for gnucash
            'perl-Crypt-SSLeay', # dep for gnucash
            'perl-Finance-Quote', # dep for gnucash
            'perl-Finance-QuoteHist', # dep for gnucash
            'ktoblzcheck', # dep for gnucash
            'libgsf', # dep for gnucash
            'libofx', # dep for gnucash
            'slib', # dep for gnucash
            'libchipcard3', # dep for gnucash
            'perl-HTML-TableExtract', # dep for gnucash
            ]:
            r.flAdd(p, groupName='group-supported-stuff-extra')

        # single arch troves
        r.flAdd('wine', groupName='group-supported-stuff-extra', flavor='is: x86', singleArch=True)

        # pkgSpec pkgs
        r.flAdd('tshark', groupName='group-supported-stuff-extra', source = 'wireshark')

        r.flAdd('emacs', groupName='group-supported-stuff-extra', source = 'emacs')
        # r.flAdd('emacs-leim', groupName='group-supported-stuff-extra', source = 'emacs')

        # until RPL-2554 is solved...
        r.flAdd('libmspack', groupName='group-supported-stuff-extra')

        # OpenOffice.org iceberg
        # we want all to appear in searchPath...
        OOObase = [ 'openoffice.org',
                    'openoffice.org-calc',
                    'openoffice.org-draw',
                    'openoffice.org-impress',
                    'openoffice.org-math',
                    'openoffice.org-mono',
                    'openoffice.org-writer'
                    ]

        # pre-made packs for gnome/kde users pleasure...
        r.flCreateGroup('group-ooo-gnome', parentGroup='group-supported-stuff-extra', dynamicGroup = False)
        r.flCreateGroup('group-ooo-kde', parentGroup='group-supported-stuff-extra', dynamicGroup = False)

        for p in OOObase:
            r.flAdd(p, groupName='group-ooo-gnome', source='openoffice.org')
            r.flAdd(p, groupName='group-ooo-kde', source='openoffice.org')

        r.flAdd('openoffice.org-kde', groupName='group-ooo-kde', source='openoffice.org')
        r.flAdd('openoffice.org-gnome', groupName='group-ooo-gnome', source='openoffice.org')

        # i18n

        OOOi18nDocLangs = [
        'br',
        'cs',
        'cy',
        'da',
        'de',
        'es',
        'et',
        'fr',
        'he',
        'hu',
        'it',
        'ja',
        'km',
        'ko',
        'nl',
        'pa-IN',
        'pl',
        'pt-BR',
        'ru',
        'rw',
        'sv',
        'vi',
        'zh-CN',
        'zh-TW',
        ]

        OOOi18nLangs = [
                     'af',
                     'ar',
                     'be-BY',
                     'bg',
                     'bn-IN',
                     'br',
                     'ca',
                     'cs',
                     'cy',
                     'da',
                     'de',
                     'el',
                     'en-GB',
                     'es',
                     'et',
                     'fi',
                     'fr',
                     'gu-IN',
                     'he',
                     'hi-IN',
                     'hr',
                     'hu',
                     'it',
                     'ja',
                     'km',
                     'ko',
                     'lt',
                     'lv',
                     'mk',
                     'mr-IN',
                     'nb',
                     'nl',
                     'nn',
                     'pa-IN',
                     'pl',
                     'pt',
                     'pt-BR',
                     'ru',
                     'rw',
                     'sk',
                     'sl',
                     'sv',
                     'ta-IN',
                     'tr',
                     'vi',
                     'xh',
                     'zh-CN',
                     'zh-TW',
                     'zu',
                         ]

        r.flCreateGroup('group-ooo-locales', parentGroup='group-supported-stuff-extra', dynamicGroup = False)

        for l in OOOi18nLangs:
            r.flAdd('openoffice.org-locale-' + l, groupName='group-ooo-locales', source='openoffice.org')

        for l in OOOi18nDocLangs:
            r.flAdd('openoffice.org-doc-' + l, groupName='group-ooo-locales', source='openoffice.org')

        # final housekeeping

        # we  need this as we use now copyComponents
        # for develComponents.
        groupList = r.getChildGroups('group-desktop-platform')
        for g in groupList:
            if g[0].name not in r.bucketDevelGroups:
                r.removeComponents(r.develComponents, g[0].name)

        # FIXME: this is freak. r.add(..., component=['lib'], flavor = is: x86) installs
        # remaining components with byDefault=False
        # obviously this messes everything, as conary still tries to resolve them...
        # and checkPathConflicts complains loudly
        if Arch.x86_64:
            legacyArchGroups = ['group-compat32',] #  'group-desktop-platform-compat32']
            for g in legacyArchGroups:
                r.removeComponents( [ 'devel', 'python', 'doc', 'data', 'runtime', 'test', 'perl',
                                      'supdoc', 'locale', 'config', 'devellib'],
                                    groupName=g)

        #
        # Everything below here define 'official' foresight editions (gnome,kde,xfce,etc)

        # Define GNOME Edition
        r.flCreateGroup('group-gnome-dist', parentGroup='group-desktop-platform',
                        checkOnlyByDefaultDeps=False,
                        depCheck=True, autoResolve=True, checkPathConflicts=True,
                        dynamicGroup = True)

        r.addNewGroup('group-desktop-common', groupName='group-gnome-dist')
        r.addNewGroup('group-gnome', groupName='group-gnome-dist')
        r.addNewGroup('group-mozilla', groupName='group-gnome-dist')
        r.addNewGroup('group-pidgin', groupName='group-gnome-dist')
        r.addNewGroup('group-ooo-gnome', groupName='group-gnome-dist')
        r.flAdd('gimp', groupName='group-gnome-dist')

        # Define KDE Edition
        r.flCreateGroup('group-kde-dist', parentGroup='group-desktop-platform',
                        checkOnlyByDefaultDeps=False,
                        depCheck=True, autoResolve=True, checkPathConflicts=True,
                        dynamicGroup = True)
        r.addNewGroup('group-desktop-common', groupName='group-kde-dist')
        r.addNewGroup('group-kde', groupName='group-kde-dist')
        r.addNewGroup('group-ooo-kde', groupName='group-kde-dist')
        r.addNewGroup('group-mozilla', groupName='group-kde-dist')
        r.addNewGroup('group-desktop-common-extras', groupName='group-kde-dist')

        # Define XFCE Edition
        r.flCreateGroup('group-xfce-dist', parentGroup='group-desktop-platform',
                        checkOnlyByDefaultDeps=False,
                        depCheck=True, autoResolve=True, checkPathConflicts=True,
                        dynamicGroup = True)
        r.addNewGroup('group-desktop-common', groupName='group-xfce-dist')
        r.addNewGroup('group-xfce', groupName='group-xfce-dist')
        r.addNewGroup('group-mozilla', groupName='group-xfce-dist')
        r.addNewGroup('group-pidgin', groupName='group-xfce-dist')
        r.addNewGroup('group-desktop-common-extras', groupName='group-xfce-dist')
        # gdm stuff
        r.flAdd('xfce-default-session', groupName='group-xfce-dist')
        r.flAdd('gdm', groupName='group-xfce-dist')


        # Define GNOME Lite Edition
        r.flCreateGroup('group-gnome-lite-dist', parentGroup='group-desktop-platform',
                        depCheck=True, autoResolve=True, # checkPathConflicts=True,
                        dynamicGroup = True)
        r.addNewGroup('group-desktop-common', groupName='group-gnome-lite-dist')

        # overrides for services and dbus service activation files
        r.add('foresight-services', groupName='group-gnome-lite-dist')
        r.flAdd('atk', groupName='group-gnome-lite-dist')
        r.flAdd('at-spi', groupName='group-gnome-lite-dist')
        r.flAdd('banshee', groupName='group-gnome-lite-dist')
        r.flAdd('brasero', groupName='group-gnome-lite-dist')
        r.flAdd('cairo', groupName='group-gnome-lite-dist')
        r.flAdd('cheese', groupName='group-gnome-lite-dist')
        r.flAdd('compiz-gnome', groupName='group-gnome-lite-dist')
        r.flAdd('evince', groupName='group-gnome-lite-dist')
        r.flAdd('evolution', groupName='group-gnome-lite-dist')
        r.flAdd('file-roller', groupName='group-gnome-lite-dist')
        r.flAdd('firefox', groupName='group-gnome-lite-dist')
        r.flAdd('foresight-user-guide', groupName='group-gnome-lite-dist')
        r.flAdd('f-spot', groupName='group-gnome-lite-dist')
        r.flAdd('gcalctool', groupName='group-gnome-lite-dist')
        r.flAdd('gdm', groupName='group-gnome-lite-dist')
        r.flAdd('gedit', groupName='group-gnome-lite-dist')
        r.flAdd('gksu', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-applets', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-audio', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-control-center', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-desktop', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-doc-utils', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-do', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-icon-theme', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-keyring', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-main-menu', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-media', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-menus', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-mime-data', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-mount', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-packagekit', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-panel', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-panel-layout', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-power-manager', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-screensaver', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-session', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-settings-daemon', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-sharp', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-spell', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-terminal', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-themes', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-utils', groupName='group-gnome-lite-dist')
        r.flAdd('gnome-volume-manager', groupName='group-gnome-lite-dist')
        r.flAdd('gst-plugins-base', groupName='group-gnome-lite-dist')
        r.flAdd('gst-plugins-good', groupName='group-gnome-lite-dist')
        r.flAdd('gtkmm', groupName='group-gnome-lite-dist')
        r.flAdd('gtk-sharp', groupName='group-gnome-lite-dist')
        r.flAdd('gvfs', groupName='group-gnome-lite-dist')
        r.flAdd('hal-sharp', groupName='group-gnome-lite-dist')
        r.flAdd('hicolor-icon-theme', groupName='group-gnome-lite-dist')
        r.flAdd('icon-naming-utils', groupName='group-gnome-lite-dist')
        r.flAdd('ipod-sharp', groupName='group-gnome-lite-dist')
        r.flAdd('iso-codes', groupName='group-gnome-lite-dist')
        r.flAdd('libbonobo', groupName='group-gnome-lite-dist')
        r.flAdd('libbonoboui', groupName='group-gnome-lite-dist')
        r.flAdd('libgksu', groupName='group-gnome-lite-dist')
        r.flAdd('libgnome-background', groupName='group-gnome-lite-dist')
        r.flAdd('libgnome', groupName='group-gnome-lite-dist')
        r.flAdd('libgnomeui', groupName='group-gnome-lite-dist')
        r.flAdd('libgphoto2-sharp', groupName='group-gnome-lite-dist')
        r.flAdd('libgphoto2', groupName='group-gnome-lite-dist')
        r.flAdd('metacity', groupName='group-gnome-lite-dist')
        r.flAdd('mousetweaks', groupName='group-gnome-lite-dist')
        r.flAdd('nautilus', groupName='group-gnome-lite-dist')
        r.flAdd('nautilus-open-terminal', groupName='group-gnome-lite-dist')
        r.flAdd('network-manager-applet', groupName='group-gnome-lite-dist')
        r.flAdd('pidgin', groupName='group-gnome-lite-dist')
        r.flAdd('podsleuth', groupName='group-gnome-lite-dist')
        r.flAdd('seahorse', groupName='group-gnome-lite-dist')
        r.flAdd('seahorse-plugins', groupName='group-gnome-lite-dist')
        r.flAdd('shared-mime-info', groupName='group-gnome-lite-dist')
        r.flAdd('tomboy', groupName='group-gnome-lite-dist')
        r.flAdd('totem', groupName='group-gnome-lite-dist')
        r.flAdd('yelp', groupName='group-gnome-lite-dist')
        r.remove('gutenprint', groupName='group-gnome-lite-dist')
        r.remove('ghostscript', groupName='group-gnome-lite-dist')
        r.remove('hplip', groupName='group-gnome-lite-dist')
        r.removeComponents(r.docComponents, 'group-gnome-lite-dist')
        r.removeComponents(r.develComponents, 'group-gnome-lite-dist')
        r.flCreateGroup('group-gnome-lite-locales', parentGroup='group-world', dynamicGroup = True)
        r.moveComponents(r.localeComponents, 'group-gnome-lite-dist', 'group-gnome-lite-locales')


        # dist-devel groups
        # simplifies life to devs, as it makes  sync/update group-`edition`-{devel,dist} unnecessary
        for edition in [ 'gnome', 'kde', 'xfce']:
            r.flCreateGroup('group-' + edition + '-dist-devel', parentGroup='group-desktop-platform',
                        depCheck=True, autoResolve=True, checkPathConflicts=True,
                        dynamicGroup = True)
            r.addNewGroup('group-'+ edition + '-dist', groupName='group-' + edition + '-dist-devel')
            r.addNewGroup('group-'+ edition + '-devel', groupName='group-' + edition + '-dist-devel')
            # this one avoids having to close each 'group-'+ edition + '-devel'
            r.Requires('group-'+ edition + '-devel', groupName='group-' + edition + '-dist-devel')

# vi: set ts=4 sts=4 sw=4 expandtab:

