#
# Copyright (c) 2007 Foresight Linux Project
# Copyright (c) 2004-2007 rPath, Inc.
#
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class GroupDesktopPlatform(GroupRecipe):
    name = 'group-desktop-platform'
    version = '1.9.0.0.3'

    autoResolve = True

    Flags.local_tools = True
    depCheck = True
    checkPathConflicts = True
    x86_64FlavorString = 'is: x86(i486,i586,i686) x86_64'
    rPathVersionStr = None

    unwantedComponents = [ 'supdoc', ] # ? 'devel', 'devellib']

    def startGroup(r, name, parentGroup, depCheck=False, byDefault=True, autoResolve = False):
        # creates group named 'name', adds it to the toplevel group,
        # and sets the current group to that name.  calls to r.add()
        # will use the current group by default.

        # note: byDefault applies to whether the group is included by
        # default in its parent group, not whether the troves in
        # the group are added by default. (use the setByDefault() command
        # to get that)

        # get all the the default for the new group from its parent group.
        if parentGroup:
            r.setDefaultGroup(parentGroup)
        r.createGroup(name, autoResolve=autoResolve, depCheck=depCheck, 
                      byDefault=True)
        if parentGroup:
            r.addNewGroup(name, groupName=parentGroup, byDefault=byDefault)
        r.setDefaultGroup(name)
        r.removeComponents(r.unwantedComponents)

    def flAddCopy(r, name, version, flavor=None):
        if not flavor:
            if Arch.x86_64:
                flavor = 'is: x86(i486,i586,i686) x86_64'
            else:
                flavor = 'is: x86(i486,i586,i686)'

        r.addCopy(name, version, flavor)

    # this allows us to 'derive' nicely upstream groups (rpl:devel), overwritting them with our own stuff
    def flAdd(r, name, source=None, groupName=None, flavor=None, byDefault=True):
        if not flavor:
            if Arch.x86_64:
                flavor = 'is: x86_64'# (i486,i586,i686) x86_64'
            else:
                flavor = 'is: x86(i486,i586,i686)'

        #  first, we add the trove, normally
        r.add(name, source=source, groupName=groupName, flavor=flavor, byDefault=byDefault)

        # second, we check if that trove is already in any of the upstream, pre-built,
        # groups, we use, and - there - we replace it.
        if Arch.x86_64:
            # All :lib components land in compat32. this may need to be refined in the future

            r.add(name, groupName='group-desktop-platform-compat32', flavor='is: x86(i486,i586,i686)', components=['lib'])
            r.replace(name, groupName='group-compat32', allowNoMatch=True, 
                      newFlavor='is: x86(i486,i586,i686)')


            for g in ['group-devel', 'group-base', 'group-core', 'group-os-devel', 'group-bootable',
                      'group-text-tools', 'group-printing', ]:
                r.replace(name, groupName=g, newFlavor='is: x86_64', # WARNING: this needs to be double
                          allowNoMatch=True)                         # checked for x86_only apps we want in x86_64
        else:
            for g in ['group-devel', 'group-base', 'group-os-devel', 'group-core', 'group-bootable',
                      'group-text-tools',  'group-printing', ]: 
                r.replace(name, groupName=g, allowNoMatch=True, 
                          newFlavor='is: x86(i486,i586,i686)')

    # for replacing stuff also in compat32
    def flReplace(r, name, groupName=None, flavor=None):
        if not flavor:
            if Arch.x86_64:
                flavor = 'is: x86_64'
            else:
                flavor = 'is: x86(i486,i586,i686)'

        r.replace(name, groupName=groupName, newFlavor=flavor)

        if Arch.x86_64:
            r.remove(name, groupName='group-compat32', allowNoMatch=True, 
                      flavor='is: x86_64')
            r.replace(name, groupName='group-compat32', allowNoMatch=True, 
                      newFlavor='is: x86(i486,i586,i686)')


    def setup(r):
        rplBranch = 'conary.rpath.com@rpl:devel'
        groupOs = 'group-os=' + rplBranch + '[%s]'

        if Arch.x86_64:
            groupOs = groupOs % 'is: x86(i486,i586,i686) x86_64'
        else:
            groupOs = groupOs % 'is: x86(i486,i586,i686)'

        r.setSearchPath('foresight.rpath.org@fl:2-devel', groupOs)

        # stuff we reuse from upstream (rpl:devel)
        for groupName in ('bootable',
                          'base',
                          'core',
                          'printing',
                          'text-tools',
                          'devel',
                          'os-devel',
                          ):
            r.flAddCopy('group-'+groupName, rplBranch)

        if Arch.x86_64:
            r.flAddCopy('group-compat32', rplBranch)

        r.replace('distro-release', 'foresight.rpath.org@fl:2-devel',)

        r.add('authconfig', groupName='group-core')
        r.add('authconfig-gtk', groupName='group-base')

        # we need to create this one before we call flAdd first time.
        if Arch.x86_64:
            # this on x86_64 gets :lib of each pkg we ship by default.   
            r.startGroup('group-desktop-platform-compat32', parentGroup='group-desktop-platform')
            # some stuff we need that not's land here from flAdd.
            for l in ['libsigc++', 'lzo', 'opensp', 'taglib', 'SDL', 'gpgme', 'sqlite', 'ImageMagick', 'jasper', 'pth' ]:
                r.add(l, 'conary.rpath.com@rpl:devel', groupName='group-desktop-platform-compat32',
                      flavor='is: x86(i486,i586,i686)', components=['lib'],)

                # we should have not need to specicy ref above. but since  we have an arch dependent searchPath (regarding 
                # the stuff we import from rpl:devel), if we don't use it conary will never find rpl:devel x86 troves due to 
                # the fact that they are not in searchPath. This may be considered either a bug or a feature. need to bug mkj
                # TODO: check regularly if we ever move any off those troves for our own repo 


        # those should be too in -internet perhaps ?
        r.flAdd('nss', groupName='group-base')
        r.flAdd('nspr', groupName='group-base')

        r.flAdd('mono', groupName='group-base')

        r.flAdd('dbus-python', groupName='group-base')
        r.flAdd('perl-Net-DBus', groupName='group-base')

        ### placeholder until we have it too. 
        r.add('flac','conary.rpath.com@rpl:devel/1.1.4-1-4','group-base')


        #Placeholder trove that anaconda looks for in setting the default runlevel
        r.add('xorg-x11', 'foresight.rpath.org@fl:1', groupName='group-base')

        r.add('autoconfig', flavor='is: x86(i486,i586,i686)', groupName='group-base')
        r.flReplace('sudo')
        r.flReplace('setup')
        r.flAdd('info-wheel', groupName='group-base')
        r.flAdd('info-nobody', groupName='group-base')
        r.add('mailx', groupName='group-base')

        # Alsa sound system
        # FIXME: reserarch about utility of having alsa-oss, alsa-plugins and alsa-firmware
        r.flAdd('info-audio')
        r.flReplace('alsa-lib')
        r.flReplace('alsa-utils')

        # we want our craptastic interactive=True configs to be easily
        # overridable by folks building on top of us :)
        r.add('foresight-conary-config')

        # XXX: I'm not sure where to put this (it's used by kexi (kde db tool) to access postgres)
        #r.add('libpqxx', groupName='group-base')
        # XXX: used by kword,abiword,openoffice(probably) to read *.doc files
        #r.add('wv2', groupName='group-base')


        r.startGroup('group-internet', parentGroup='group-desktop-platform')
        # although we mook x86 and x86_64 we will ship in
        # production x86, by default, in order to handle java
        # and plugins smoothly. This hits mozilla.org stuff and stuff that
        # deps on it (and is expected to take advantage of java or other
        # plugins)
        r.flAdd('firefox', groupName='group-internet')

        r.flAdd('nss', groupName='group-internet')
        r.flAdd('nspr', groupName='group-internet')

        r.flAdd('thunderbird', groupName='group-internet')
        r.flAdd('xulrunner', groupName='group-internet')
        r.flAdd('epiphany', groupName='group-internet')
        r.flAdd('epiphany-extensions', groupName='group-internet')
        r.flAdd('xchat-gnome', groupName='group-internet')
        r.flAdd('pidgin', groupName='group-internet')
        # makes pidgin segfault big time at startup (mooks cleanly) 
        #r.flAdd('pidgin-plugin_pack', groupName='group-internet')
        # evolution et al. 
        r.flAdd('evolution', groupName='group-internet')
        r.flAdd('evolution-data-server', groupName='group-internet')
        r.flAdd('evolution-exchange', groupName='group-internet')
        r.flAdd('evolution-webcal', groupName='group-internet')

        # quoted here until going to a proper place
        # r.flAdd('sun-jre/jdk')

        r.startGroup('group-gnome', parentGroup='group-desktop-platform')

        #r.flAdd('gst-plugins-ugly')
        #r.flAdd('gst-plugins-bad') #Doesn't build yet...
        r.flAdd('libsexy', groupName='group-gnome')

        r.flAdd('libgalago', groupName='group-gnome')
        r.flAdd('galago-sharp', groupName='group-gnome')
        r.flAdd('gtk-sharp', groupName='group-gnome')
        r.flAdd('gnome-sharp', groupName='group-gnome')
        r.flAdd('tomboy', groupName='group-gnome')

        ## NetworkManager
        r.flAdd('NetworkManager', groupName='group-gnome')
        r.flAdd('network-manager-applet', groupName='group-gnome')
        r.flAdd('wpa_supplicant', groupName='group-gnome')
        r.flAdd('dhcdbd', groupName='group-gnome')
        r.flAdd('dhclient', source='dhcp', groupName='group-core')
        r.flAdd('libdhcp4client', source='dhcp', groupName='group-core')


        ## theming / goodlooking stuff
        r.flAdd('gtk-theme-foresight', groupName='group-gnome')
        r.flAdd('human-cursors-theme', groupName='group-gnome')
        r.flAdd('tango-icon-theme', groupName='group-gnome')
        r.flAdd('tango-icon-theme-extras', groupName='group-gnome')

        ## theme engines
        r.flAdd('gtk-engine-murrine', groupName='group-gnome')
        r.flAdd('gtk-engine-ubuntulooks', groupName='group-gnome')
        r.flAdd('theme-engine-sun-nimbus', groupName='group-gnome')

        ## inotify bits
        r.flAdd('notification-daemon', groupName='group-gnome')
        r.flAdd('libnotify', groupName='group-gnome')


        #
        # foresight gnome stack
        #
        # the bits bellow are automatically generated from  gnome f.d.o jhbuild xml files
        # [http://ftp.gnome.org/pub/GNOME/teams/releng/...]
        # plz do not remove  them, or alter order if you don't know what you are doing ;)
        #
        # Note: 06/jun'07 we will be adding 2.18.x pkgs for now, but already with the 2.19.x
        # xml jhbuild's grouping layout
        #
        # FIXME: I need to script  a smart way of parse what is strict userland and what is
        # strict group-devel-gnome stuff

        # FIXME: make tests to check/handle handle pkgs listed bellow when they are pkgSpeced


        #  gnome external modules (xulrunner is in group-internet). the others for now remain here

#  MISSING   'libcolorblind', 'opencdk',

        for g in ['avahi', 'cairo', 'cairomm', 'dbus', 'dbus-glib', 'desktop-file-utils', 'enchant', 'fontconfig', 'gamin', 'gnutls', 'hal', 'hicolor-icon-theme', 'icon-naming-utils', 'iso-codes', 'libcroco', 'libdaemon', 'libgpg-error', 'libgcrypt', 'libgsf', 'libmusicbrainz', 'liboil', 'libxklavier', 'opal', 'poppler', 'pycairo', 'pwlib', 'shared-mime-info', 'startup-notification', 'system-tools-backends' ]:
            r.flAdd(g, groupName='group-gnome')

        # avahi, hal  and dbus are PkgSpeced
        r.flAdd('hal-gnome', groupName='group-gnome')
        r.flAdd('dbus-x11', groupName='group-gnome')
        r.flAdd('avahi-tools', groupName='group-gnome')
        r.flAdd('avahi-glib', groupName='group-gnome')
        r.flAdd('avahi-sharp', groupName='group-gnome')

        # end of gnome external modules

        #  meta-gnome-devel-platform-upcoming-deprecations

        for g in ['ORBit2', 'audiofile', 'esound', 'libIDL', 'libart_lgpl', 'libbonobo', 'libbonoboui', 'libgnome', 'libgnomecanvas', 'libgnomeui', ]:
              r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-devel-platform

        for g in [ 'GConf', 'at-spi', 'atk', 'gail', 'glib', 'gnome-mime-data', 'gnome-vfs', 'gtk', 'gtk-doc', 'intltool', 'libglade', 'libxml2', 'libxslt', 'pango', ]:
            r.flAdd(g, groupName='group-gnome')


        #  meta-gnome-desktop-upcoming-deprecations

        for g in ['libgnomeprint', 'libgnomeprintui', ]:
            r.flAdd(g, groupName='group-gnome')

#         #  meta-gnome-desktop-suite

#  MISSING    'gnome-games',  'gnome-volume-manager',   ]:

            for g in [ 'alacarte', 'bug-buddy', 'control-center', 'dasher', 'deskbar-applet', 'eel', 'eog', 'epiphany', 'evolution', 'evolution-data-server', 'evolution-exchange', 'evolution-webcal', 'fast-user-switch-applet', 'file-roller', 'gcalctool', 'gconf-editor', 'gdm', 'gedit', 'gnome-applets', 'gnome-backgrounds', 'gnome-desktop', 'gnome-icon-theme', 'gnome-keyring', 'gnome-keyring-manager', 'gnome-netstatus', 'gnome-nettool', 'gnome-mag', 'gnome-media', 'gnome-menus', 'gnome-panel', 'gnome-power-manager', 'gnome-python-desktop', 'gnome-screensaver', 'gnome-session', 'gnome-speech', 'gnome-system-monitor', 'gnome-system-tools', 'gnome-terminal', 'gnome-themes', 'gnome-user-docs', 'gnome-utils', 'gok', 'gstreamer', 'gst-plugins-base', 'gtk-engines', 'gtkhtml', 'gtksourceview', 'gucharmap', 'libgail-gnome', 'libgnomekbd', 'libgtop', 'liboobs', 'librsvg', 'libsoup', 'libwnck', 'metacity', 'nautilus', 'nautilus-cd-burner', 'orca', 'scrollkeeper', 'sound-juicer', 'totem', 'vino', 'vte', 'yelp', 'zenity', 'tomboy', 'gst-plugins-good', 'gnome-doc-utils', 'seahorse', 'ekiga', 'gnome-volume-manager']:
              r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-bindings-c++

        for g in  [ 'glibmm', 'gtkmm', 'libglademm', 'gconfmm', 'libgnomecanvasmm', 'gnome-vfsmm', 'libgnomemm', 'libgnomeuimm', 'libxml++', ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-bindings-python

        for g in [ 'pygobject', 'pygtk', 'pyorbit', 'gnome-python', ]:

            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-admin

        for g in[ 'pessulus', 'sabayon', ]:
            r.flAdd(g, groupName='group-gnome')

        #  meta-gnome-devtools-suite

        for g in        [ 'devhelp', 'glade', ]:
            r.flAdd(g, groupName='group-gnome')

        # jhbuild's 'groups are not 'closed' so we get those two 'orfan' pkgs

        for g in  [ 'libgnomecups', 'gnome-common', ]:
            r.flAdd(g, groupName='group-gnome')


        #
        # end of 'default' f.d.o gnome stuff.
        #

        #
        # 'closures' section
        #


        # gnome-common wants it
        # there's something  fishy with pkgconfig. adding it breaks group cooks
        # r.flAdd('pkgconfig', groupName='group-devel')

        # needed at least by pygtk
        r.flAdd('python-numeric', groupName='group-gnome')

        # needed at least by eog
        r.flAdd('lcms', groupName='group-gnome')

        # needed at least by tomboy
        r.flAdd('gmime', groupName='group-gnome')
        r.flAdd('gtkspell', groupName='group-gnome')

        # needed for hal
        r.flAdd('smbios', groupName='group-gnome')
        r.flAdd('hal-info', groupName='group-gnome')
        r.flAdd('ConsoleKit', groupName='group-gnome')

        # needed at least by gst-plugins
        r.flAdd('libtheora', groupName='group-gnome')
        r.flAdd('libvorbis', groupName='group-gnome')
        r.flAdd('vorbis-tools', groupName='group-gnome')
        r.flAdd('libao', groupName='group-gnome')

        # needed at least by yelp and nautilus
        r.flAdd('beagle', groupName='group-gnome')
        r.flAdd('info-beagleindex', groupName='group-gnome')

        # needed at least by beagle
        r.flAdd('evolution-sharp', groupName='group-gnome')
        r.flAdd('gsf-sharp', groupName='group-gnome')

        # needed for totem (shouldn 't we use gstreamer stuff ?)
        r.flAdd('xine-lib', groupName='group-gnome') # broken badly in x86_64

        # here for now
        r.flAdd('foresight-gdm-login-simple-green', groupName='group-gnome')

        # needed by pwlib at least
        r.flAdd('libavc1394', groupName='group-gnome')
        r.flAdd('libdv', groupName='group-gnome')
        r.flAdd('libraw1394', groupName='group-gnome')

        # needed at least by gst-plugins-good
        r.flAdd('speex', groupName='group-gnome')

        # needed at least by gnome-compiz-manager
        r.flAdd('gob2', groupName='group-gnome')

        # 
        r.flAdd('freetype', groupName='group-gnome')


        # end of group-gnome
        #

        # we're jumping into python2.5
        # r.replace('python', 'foresight.rpath.org@fl:2-devel')
        # r.replace('idle', 'foresight.rpath.org@fl:2-devel')



        #
        # ruby stack

        r.flAdd('ruby')
        r.flAdd('rubygems')
        # using locally the gem version, for now
#        r.flAdd('rake', groupName='group-devel')

        # end of ruby stack

        #
        # our own xorg stack

        r.startGroup('group-xorg', parentGroup='group-desktop-platform')

        r.flAdd('xorg-server', groupName='group-xorg')

        ## packages built by xorg-utils

        utils = [ 'gccmakedep', 
                  'imake', 
                  'xorg-cf-files', 
                  'lndir', 
                  'makedepend', 
                  ]

        for p in utils:
            r.flAdd(p, source='xorg-utils', groupName='group-devel')

        ## end of packages built by xorg-utils

        r.flAdd('xtrans', groupName='group-devel')

        ## packages built by xorg-proto
        proto  = [
            'applewmproto', 
            'bigreqsproto', 
            'compositeproto', 
            'damageproto', 
            'dmxproto', 
            'evieext', 
            'fixesproto', 
            'fontcacheproto', 
            'fontsproto', 
            'glproto', 
            'inputproto', 
            'kbproto', 
            'libpthread-stubs', 
            'printproto', 
            'randrproto', 
            'recordproto', 
            'renderproto', 
            'resourceproto', 
            'scrnsaverproto', 
            'trapproto', 
            'util-macros', 
            'videoproto', 
            'vncproto', 
            'windowswmproto', 
            'xcb-proto', 
            'xcliplistproto', 
            'xcmiscproto', 
            'xextproto', 
            'xf86bigfontproto', 
            'xf86dgaproto', 
            'xf86driproto', 
            'xf86miscproto', 
            'xf86rushproto', 
            'xf86vidmodeproto', 
            'xineramaproto', 
            'xproto', 
            'xproxymanagementprotocol', 
            ]
        for p in proto:
            r.flAdd(p, source='xorg-proto', groupName='group-devel')

        ## end of list of packages built by xorg-proto

        r.flAdd('xcursor-themes', groupName='group-xorg')
        r.flAdd('xkeyboard-config', groupName='group-xorg')
        r.flAdd('xorg-sgml-doctools', groupName='group-devel')

        ## packages built by xorg-libs

        libs = [
            #            'libAppleWM',
            'libdmx', 
            'libFS', 
            'liblbxutil', 
            'liboldX', 
            'libvnc', 
            #            'libWindowsWM',
            'libXaw', 
            'libXcliplist', 
            'libXcomposite', 
            'libXcursor', 
            'libXdamage', 
            'libXevie', 
            'libXfont', 
            'libXfontcache', 
            'libXft', 
            'libXft1', 
            'libXi', 
            'libXinerama', 
            'libxkbui', 
            'libXprintAppUtil', 
            'libXrandr', 
            'libXres', 
            'libXScrnSaver', 
            'libXTrap', 
            'libXtst', 
            'libXvMC', 
            'libXxf86dga', 
            'libXxf86misc', 
            'libXxf86vm', 
            'xbitmaps', 
            'xcb-util', 
             ]

        for p in libs:
            r.flAdd(p, source='xorg-libs', groupName='group-xorg')


        ## end of packages built by xorg-libs

        r.flAdd('libfontenc', groupName='group-xorg')
        r.flAdd('libICE', groupName='group-xorg')
        r.flAdd('libSM', groupName='group-xorg')
        r.flAdd('libX11', groupName='group-xorg')
        r.flAdd('libXau', groupName='group-xorg')
        r.flAdd('libxcb', groupName='group-xorg')
        r.flAdd('libXdmcp', groupName='group-xorg')
        r.flAdd('libXext', groupName='group-xorg')
        r.flAdd('libXfixes', groupName='group-xorg')
        r.flAdd('libxkbfile', groupName='group-xorg')
        r.flAdd('libXmu', groupName='group-xorg')
        r.flAdd('libXp', groupName='group-xorg')
        r.flAdd('libXpm', groupName='group-xorg')
        r.flAdd('libXprintUtil', groupName='group-xorg')
        r.flAdd('libXrender', groupName='group-xorg')
        r.flAdd('libXt', groupName='group-xorg')
        r.flAdd('libXv', groupName='group-xorg')
        r.flAdd('Mesa', groupName='group-xorg')
#        r.flAdd('glx-utils', source='Mesa', groupName='group-xorg')
        r.flAdd('libdrm', groupName='group-xorg')

        ## packages built by xorg-apps

        apps = [
            'appres', 
            'bdftopcf', 
            'beforelight', 
            'bitmap', 
            'editres', 
            'fonttosfnt', 
            'fslsfonts', 
            'fstobdf', 
            'iceauth', 
            'ico', 
            'lbxproxy', 
            'listres', 
            'luit', 
            'mkcomposecache', 
            'mkfontdir', 
            'mkfontscale', 
            'oclock', 
            'proxymngr', 
            'rendercheck', 
            'rgb', 
            'rstart', 
            'scripts', 
            'sessreg', 
            'setxkbmap', 
            'showfont', 
            'smproxy', 
            'twm', 
            'viewres', 
            'x11perf', 
            'xauth', 
            'xbiff', 
            'xcalc', 
            'xclipboard', 
            'xclock', 
            'xcmsdb', 
            'xconsole', 
            'xcursorgen', 
            'xcursor-themes', 
            'xdbedizzy', 
            'xditview', 
            'xdm', 
            'xdpyinfo', 
            # we do not ship it
            # 'xdriinfo',
            'xedit', 
            'xev', 
            'xeyes', 
            'xf86dga', 
            'xfd', 
            'xfindproxy', 
            'xfontsel', 
            'xfs', 
            'xfsinfo', 
            'xfwp', 
            'xgamma', 
            'xgc', 
            'xhost', 
            'xinit', 
            'xkbcomp', 
            'xkbevd', 
            'xkbprint', 
            'xkbutils', 
            'xkill', 
            'xload', 
            'xlogo', 
            'xlsatoms', 
            'xlsclients', 
            'xlsfonts', 
            'xmag', 
            'xman', 
            'xmessage', 
            'xmh', 
            'xmodmap', 
            'xmore', 
            # FIXME try to get 'xphelloworld' to behave when rMooked
            # 'xphelloworld',
            'xplsprinters', 
            'xpr', 
            'xprehashprinterlist', 
            'xprop', 
            'xrandr', 
            'xrdb', 
            'xrefresh', 
            'xrx', 
            'xset', 
            'xsetmode', 
            'xsetpointer', 
            'xsetroot', 
            'xsm', 
            'xstdcmap', 
            'xtrap', 
            'xvidtune', 
            'xvinfo', 
            'xwd', 
            'xwininfo', 
            'xwud', 
             ]

        for p in apps:
            r.flAdd(p, source='xorg-apps', groupName='group-xorg')

        ## end of packages built by xorg-apps

        r.startGroup('group-xorg-fonts', parentGroup='group-xorg', depCheck=False)
        ## packages built by xorg fonts
        fonts = [
            'encodings', 
            'font-adobe-100dpi', 
            'font-adobe-75dpi', 
            'font-adobe-utopia-100dpi', 
            'font-adobe-utopia-75dpi', 
            'font-adobe-utopia-type1', 
            'font-alias', 
            'font-arabic-misc', 
            'font-bh-100dpi', 
            'font-bh-75dpi', 
            'font-bh-lucidatypewriter-100dpi', 
            'font-bh-lucidatypewriter-75dpi', 
            'font-bh-ttf', 
            'font-bh-type1', 
            'font-bitstream-100dpi', 
            'font-bitstream-75dpi', 
            'font-bitstream-speedo', 
            'font-bitstream-type1', 
            'font-cronyx-cyrillic', 
            'font-cursor-misc', 
            'font-daewoo-misc', 
            'font-dec-misc', 
            'font-ibm-type1', 
            'font-isas-misc', 
            'font-jis-misc', 
            'font-micro-misc', 
            'font-misc-cyrillic', 
            'font-misc-ethiopic', 
            'font-misc-meltho', 
            'font-misc-misc', 
            'font-mutt-misc', 
            'font-schumacher-misc', 
            'font-screen-cyrillic', 
            'font-sony-misc', 
            'font-sun-misc', 
            'font-winitzki-cyrillic', 
            'font-xfree86-type1', 
             ]

        for p in fonts:
            r.flAdd(p, source='xorg-fonts', groupName='group-xorg-fonts')

        ## end of packages built by xorg-fonts

        # extra fonts we ship
        r.flAdd('urw-fonts', groupName='group-xorg-fonts')
        r.flAdd('liberation-fonts-ttf', groupName='group-xorg-fonts')
        r.flAdd('msttcorefonts', groupName='group-xorg-fonts')
        r.flAdd('bitstream-vera-fonts', groupName='group-xorg-fonts')

        #        r.startGroup('group-xorg-fonts-extra', parentGroup='group-xorg', depCheck=False)
        #         r.flAdd('scim')
        #         r.flAdd('scim-anthy')
        #         r.flAdd('anthy')
        #         r.flAdd('sazanami')

        r.startGroup('group-xorg-drivers', parentGroup='group-xorg', depCheck=False)

        ## packages built by xorg-drivers-input
        inputDrivers = [
            'xf86-input-jamstudio', 
            'xf86-input-ur98', 
            'xf86-input-citron', 
            'xf86-input-elo2300', 
            'xf86-input-dmc', 
            'xf86-input-evdev', 
            'xf86-input-digitaledge', 
            'xf86-input-acecad', 
            'xf86-input-mutouch', 
            'xf86-input-mouse', 
            'xf86-input-dynapro', 
            'xf86-input-keyboard', 
            'xf86-input-magellan', 
            'xf86-input-void', 
            'xf86-input-aiptek', 
            'xf86-input-summa', 
            'xf86-input-penmount', 
            'xf86-input-elographics', 
            'xf86-input-microtouch', 
            'xf86-input-calcomp', 
            'xf86-input-hyperpen', 
            'xf86-input-magictouch', 
            'xf86-input-tek4957', 
            'xf86-input-fpit', 
            'xf86-input-spaceorb', 
            'xf86-input-vmmouse', 
            'xf86-input-joystick', 
            'xf86-input-palmax', 
            ]

        for p in inputDrivers:
            r.flAdd(p, source='xorg-driver-input', groupName='group-xorg-drivers')
        ## end of packages built by xorg-drivers-input

        ## packages built by xorg-drivers-video

        videoDrivers = [
            'xf86-video-mga', 
            'xf86-video-ati', 
            'xf86-video-trident', 
            'xf86-video-sisusb', 
            'xf86-video-cirrus', 
            'xf86-video-sis', 
            'xf86-video-vesa', 
            'xf86-video-suncg3', 
            'xf86-video-neomagic', 
            'xf86-video-i128', 
            'xf86-video-s3', 
            'xf86-video-v4l', 
            'xf86-video-chips', 
            'xf86-video-sunffb', 
            'xf86-video-imstt', 
            'xf86-video-savage', 
            'xf86-video-tseng', 
            'xf86-video-nsc', 
            'xf86-video-vga', 
            'xf86-video-via', 
            'xf86-video-suncg6', 
            'xf86-video-s3virge', 
            'xf86-video-dummy', 
            'xf86-video-newport', 
            'xf86-video-voodoo', 
            # 'xf86-video-impact',
            'xf86-video-ast', 
            'xf86-video-intel', 
            'xf86-video-i810', 
            'xf86-video-sunbw2', 
            'xf86-video-cyrix', 
            'xf86-video-vmware', 
            'xf86-video-suncg14', 
            'xf86-video-tdfx', 
            'xf86-video-tga', 
            'xf86-video-suntcx', 
            'xf86-video-glint', 
            'xf86-video-nv', 
            'xf86-video-apm', 
            'xf86-video-sunleo', 
            'xf86-video-ark', 
            'xf86-video-rendition', 
            'xf86-video-siliconmotion', 
            'xf86-video-i740', 
            'xf86-video-fbdev', 
            ]

        for p in videoDrivers:
            r.flAdd(p, source='xorg-driver-video', groupName='group-xorg-drivers')

        ## end of packages built by xorg-drivers-video
        #
        #   end of our xorg stack
        #

        # final housekeeping
        # the r.replace in flAdd sadly doesn't allways replace **only** the components
        # already in the original group-compat32, so we need a final cleanup there to avoid dups.
        if Arch.x86_64:
            r.removeComponents(['devel', 'doc', 'data', 'runtime', 'supdoc', 'locale', 'config', 'devellib'], groupName='group-compat32')

            for p in ['xorg-server', 'mono', 'avahi-sharp', 'gmime', 'gsf-sharp', 'pidgin', 'evolution', 'evolution-sharp', 'gnome-sharp', 'gtk-sharp', 'beagle', 'evolution', 'evolution-exchange', 'dhclient:lib', 'gst-plugins-good:lib']:
                r.remove(p, groupName='group-desktop-platform-compat32')

            # FIXME: i think bellow we have a conary policy bug. if .py files land  in %(docdir)s they should  land in :doc or :supdoc
            # TODO: need to check with mkj if this is desired behaviour, and if not, file yet another bug
            r.remove('libxml2:python', groupName='group-compat32')

            r.remove('avahi:python', groupName='group-compat32')

            # superced by new group-desktop-platform-compat32 by now
            #
            # r.add('avahi-glib:lib', flavor='is: x86(i486,i586,i686)', groupName='group-compat32')
            # # libxcb is not used (yet) in rpl:devel, and libX11 needs it.
            # r.add('libxcb:lib', flavor='is: x86(i486,i586,i686)', groupName='group-compat32')
            # r.add('libXp:lib', flavor='is: x86(i486,i586,i686)', groupName='group-compat32')
            #
            # # we want theme engine :lib to be in compat32 for pure x86
            # # to render well
            # r.add('gtk-engine-murrine:lib', flavor='is: x86(i486,i586,i686)', 
            #                   groupName='group-compat32')
            # r.add('gtk-engine-ubuntulooks:lib', 
            #                   flavor='is: x86(i486,i586,i686)', 
            #                   groupName='group-compat32')
            # r.add('theme-engine-sun-nimbus:lib', 
            #                   flavor='is: x86(i486,i586,i686)', groupName='group-compat32')


