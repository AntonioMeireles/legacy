#
# Copyright (c) 2004-2007
# The Foresight Linux Project, rPath, Inc.
#
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class GroupDesktopPlatform(GroupRecipe):
    name = 'group-desktop-platform'
    version = '1.9.0.0.2'

    autoResolve = True

    Flags.local_tools = True
    depCheck = True
    checkPathConflicts = True
    x86_64FlavorString = 'is: x86_64(~3dnow, ~3dnowext, ~nx)  x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)'
    rPathVersionStr = None

    unwantedComponents = [ 'supdoc', ] # ? 'devel', 'devellib']

    def startGroup(r, name, parentGroup, depCheck=False, byDefault=True, autoResolve = False):
        # creates group named "name", adds it to the toplevel group,
        # and sets the current group to that name.  calls to r.add()
        # will use the current group by default.

        # note: byDefault applies to whether the group is included by
        # default in its parent group, not whether the troves in
        # the group are added by default. (use the setByDefault() command
        # to get that)

        # get all the the default for the new group from its parent group.
        if parentGroup:
            r.setDefaultGroup(parentGroup)
        r.createGroup(name, autoResolve=autoResolve, depCheck=depCheck,
                      byDefault=True)
        if parentGroup:
            r.addNewGroup(name, groupName=parentGroup, byDefault=byDefault)
        r.setDefaultGroup(name)
        r.removeComponents(r.unwantedComponents)

    def flAddCopy(r, name, origin, flavor=None):
        if Arch.x86_64 and not flavor:
            flavor=GroupDesktopPlatform.x86_64FlavorString
        r.addCopy(name, origin, flavor)


    # this allows us to 'derive' nicely upstream groups (rpl:devel), overwritting them with our own stuff
    def flAdd(r, name, source=None, groupName=None, flavor=None):
#        r.add(name, source=source, groupName=groupName,)
        if Arch.x86_64:

            r.add(name, source=source, groupName=groupName, flavor='is: x86_64(~3dnow, ~3dnowext, ~nx)',)
            r.replace(name, groupName='group-compat32', allowNoMatch=True,
                      newFlavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')

            for g in ['group-devel', ]:
                r.replace(name, groupName=g, newFlavor='is: x86_64(~3dnow, ~3dnowext, ~nx)',
                          allowNoMatch=True)
        else:
            r.add(name, source=source, groupName=groupName,
                  flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
            for g in ['group-devel', ]: # 'group-os-devel', 'group-gnome', 'group-printing'
                r.replace(name, groupName=g, allowNoMatch=True,
                          newFlavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')

    def setup(r):
        rplBranch = "conary.rpath.com@rpl:devel"
        r.setSearchPath('foresight.rpath.org@fl:2-devel', 'group-os=conary.rpath.com@rpl:devel')


        # stuff we reuse from upstream (rpl:devel)
        for groupName in ('base',
                          'core',
                          'devel',
                          # 'gnome',
                          # 'os-devel',
                          # 'printing',
                          'text-tools',):
            r.flAddCopy('group-'+groupName, rplBranch)

        if Arch.x86_64:
            r.flAddCopy('group-compat32', rplBranch)

        if Arch.x86:
            r.replace('distro-release', 'foresight.rpath.org@fl:2-devel',
                      newFlavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
        else:
            r.replace('distro-release', 'foresight.rpath.org@fl:2-devel',
                      newFlavor='is: x86_64(~3dnow, ~3dnowext, ~nx)')

        # temp hacks
        r.add('authconfig', groupName='group-core')

        # we're jumping into python2.5
        # r.replace('python', 'foresight.rpath.org@fl:2-devel')
        # r.replace('idle', 'foresight.rpath.org@fl:2-devel')

        #
        # our own xorg stack
        #
        r.startGroup('group-xorg', parentGroup='group-desktop-platform')

        r.flAdd('xorg-server')

        ## packages built by xorg-proto
        proto  = [
            'applewmproto',
            'bigreqsproto',
            'compositeproto',
            'damageproto',
            'dmxproto',
            'evieext',
            'fixesproto',
            'fontcacheproto',
            'fontsproto',
            'glproto',
            'inputproto',
            'kbproto',
            'libpthread-stubs',
            'printproto',
            'randrproto',
            'recordproto',
            'renderproto',
            'resourceproto',
            'scrnsaverproto',
            'trapproto',
            'util-macros',
            'videoproto',
            'vncproto',
            'windowswmproto',
            'xcb-proto',
            'xcliplistproto',
            'xcmiscproto',
            'xextproto',
            'xf86bigfontproto',
            'xf86dgaproto',
            'xf86driproto',
            'xf86miscproto',
            'xf86rushproto',
            'xf86vidmodeproto',
            'xineramaproto',
            'xproto',
            'xproxymanagementprotocol',
            ]
        for p in proto:
            r.flAdd(p, source='xorg-proto')

        ## end of list of packages built by xorg-proto

        r.flAdd('xcursor-themes')
        r.flAdd('xkeyboard-config')
        r.flAdd('xorg-sgml-doctools')

        ## packages built by xorg-libs

        libs = [
            #            'libAppleWM',
            'libdmx',
            'libFS',
            'liblbxutil',
            'liboldX',
            'libvnc',
            #            'libWindowsWM',
            'libXaw',
            'libXcliplist',
            'libXcomposite',
            'libXcursor',
            'libXdamage',
            'libXevie',
            'libXfont',
            'libXfontcache',
            'libXft',
            'libXft1',
            'libXi',
            'libXinerama',
            'libxkbui',
            'libXprintAppUtil',
            'libXrandr',
            'libXres',
            'libXScrnSaver',
            'libXTrap',
            'libXtst',
            'libXvMC',
            'libXxf86dga',
            'libXxf86misc',
            'libXxf86vm',
            'xbitmaps',
            'xcb-util',
             ]

        for p in libs:
            r.flAdd(p, source='xorg-libs')


        ## end of packages built by xorg-libs

        r.flAdd('libfontenc')
        r.flAdd('libICE')
        r.flAdd('libSM')
        r.flAdd('libX11')
        r.flAdd('libXau')
        r.flAdd('libxcb')
        r.flAdd('libXdmcp')
        r.flAdd('libXext')
        r.flAdd('libXfixes')
        r.flAdd('libxkbfile')
        r.flAdd('libXmu')
        r.flAdd('libXp')
        r.flAdd('libXpm')
        r.flAdd('libXprintUtil')
        r.flAdd('libXrender')
        r.flAdd('libXt')
        r.flAdd('libXv')
        r.flAdd('Mesa')
        r.flAdd('glx-utils', source='Mesa')
        r.flAdd('libdrm')

        ## packages built by xorg-apps

        apps = [
            'appres',
            'bdftopcf',
            'beforelight',
            'bitmap',
            'editres',
            'fonttosfnt',
            'fslsfonts',
            'fstobdf',
            'iceauth',
            'ico',
            'lbxproxy',
            'listres',
            'luit',
            'mkcomposecache',
            'mkfontdir',
            'mkfontscale',
            'oclock',
            'proxymngr',
            'rendercheck',
            'rgb',
            'rstart',
            'scripts',
            'sessreg',
            'setxkbmap',
            'showfont',
            'smproxy',
            'twm',
            'viewres',
            'x11perf',
            'xauth',
            'xbiff',
            'xcalc',
            'xclipboard',
            'xclock',
            'xcmsdb',
            'xconsole',
            'xcursorgen',
            'xcursor-themes',
            'xdbedizzy',
            'xditview',
            'xdm',
            'xdpyinfo',
            # we do not ship it
            # 'xdriinfo',
            'xedit',
            'xev',
            'xeyes',
            'xf86dga',
            'xfd',
            'xfindproxy',
            'xfontsel',
            'xfs',
            'xfsinfo',
            'xfwp',
            'xgamma',
            'xgc',
            'xhost',
            'xinit',
            'xkbcomp',
            'xkbevd',
            'xkbprint',
            'xkbutils',
            'xkill',
            'xload',
            'xlogo',
            'xlsatoms',
            'xlsclients',
            'xlsfonts',
            'xmag',
            'xman',
            'xmessage',
            'xmh',
            'xmodmap',
            'xmore',
            # FIXME try to get 'xphelloworld' to behave when rMooked
            # 'xphelloworld',
            'xplsprinters',
            'xpr',
            'xprehashprinterlist',
            'xprop',
            'xrandr',
            'xrdb',
            'xrefresh',
            'xrx',
            'xset',
            'xsetmode',
            'xsetpointer',
            'xsetroot',
            'xsm',
            'xstdcmap',
            'xtrap',
            'xvidtune',
            'xvinfo',
            'xwd',
            'xwininfo',
            'xwud',
             ]

        for p in apps:
            r.flAdd(p, source='xorg-apps')

        ## end of packages built by xorg-apps

        r.startGroup('group-xorg-fonts', parentGroup='group-xorg', depCheck=False)
        ## packages built by xorg fonts
        fonts = [
            'encodings',
            'font-adobe-100dpi',
            'font-adobe-75dpi',
            'font-adobe-utopia-100dpi',
            'font-adobe-utopia-75dpi',
            'font-adobe-utopia-type1',
            'font-alias',
            'font-arabic-misc',
            'font-bh-100dpi',
            'font-bh-75dpi',
            'font-bh-lucidatypewriter-100dpi',
            'font-bh-lucidatypewriter-75dpi',
            'font-bh-ttf',
            'font-bh-type1',
            'font-bitstream-100dpi',
            'font-bitstream-75dpi',
            'font-bitstream-speedo',
            'font-bitstream-type1',
            'font-cronyx-cyrillic',
            'font-cursor-misc',
            'font-daewoo-misc',
            'font-dec-misc',
            'font-ibm-type1',
            'font-isas-misc',
            'font-jis-misc',
            'font-micro-misc',
            'font-misc-cyrillic',
            'font-misc-ethiopic',
            'font-misc-meltho',
            'font-misc-misc',
            'font-mutt-misc',
            'font-schumacher-misc',
            'font-screen-cyrillic',
            'font-sony-misc',
            'font-sun-misc',
            'font-winitzki-cyrillic',
            'font-xfree86-type1',
             ]

        for p in fonts:
            r.flAdd(p, source='xorg-fonts')

        ## end of packages built by xorg fonts

        #        r.startGroup('group-xorg-fonts-extra', parentGroup='group-xorg', depCheck=False)
        #         r.flAdd('scim')
        #         r.flAdd('scim-anthy')
        #         r.flAdd('anthy')
        #         r.flAdd('sazanami')

        r.startGroup('group-xorg-drivers', parentGroup='group-xorg', depCheck=False)

        ## packages built by xorg-drivers-input
        inputDrivers = [
            'xf86-input-jamstudio',
            'xf86-input-ur98',
            'xf86-input-citron',
            'xf86-input-elo2300',
            'xf86-input-dmc',
            'xf86-input-evdev',
            'xf86-input-digitaledge',
            'xf86-input-acecad',
            'xf86-input-mutouch',
            'xf86-input-mouse',
            'xf86-input-dynapro',
            'xf86-input-keyboard',
            'xf86-input-magellan',
            'xf86-input-void',
            'xf86-input-aiptek',
            'xf86-input-summa',
            'xf86-input-penmount',
            'xf86-input-elographics',
            'xf86-input-microtouch',
            'xf86-input-calcomp',
            'xf86-input-hyperpen',
            'xf86-input-magictouch',
            'xf86-input-tek4957',
            'xf86-input-fpit',
            'xf86-input-spaceorb',
            'xf86-input-vmmouse',
            'xf86-input-joystick',
            'xf86-input-palmax',
            ]

        for p in inputDrivers:
            r.flAdd(p, source='xorg-driver-input')
        ## end of packages built by xorg-drivers-input

        ## packages built by xorg-drivers-video

        videoDrivers = [
            'xf86-video-mga',
            'xf86-video-ati',
            'xf86-video-trident',
            'xf86-video-sisusb',
            'xf86-video-cirrus',
            'xf86-video-sis',
            'xf86-video-vesa',
            'xf86-video-suncg3',
            'xf86-video-neomagic',
            'xf86-video-i128',
            'xf86-video-s3',
            'xf86-video-v4l',
            'xf86-video-chips',
            'xf86-video-sunffb',
            'xf86-video-imstt',
            'xf86-video-savage',
            'xf86-video-tseng',
            'xf86-video-nsc',
            'xf86-video-vga',
            'xf86-video-via',
            'xf86-video-suncg6',
            'xf86-video-s3virge',
            'xf86-video-dummy',
            'xf86-video-newport',
            'xf86-video-voodoo',
            # 'xf86-video-impact',
            'xf86-video-ast',
            'xf86-video-intel',
            'xf86-video-i810',
            'xf86-video-sunbw2',
            'xf86-video-cyrix',
            'xf86-video-vmware',
            'xf86-video-suncg14',
            'xf86-video-tdfx',
            'xf86-video-tga',
            'xf86-video-suntcx',
            'xf86-video-glint',
            'xf86-video-nv',
            'xf86-video-apm',
            'xf86-video-sunleo',
            'xf86-video-ark',
            'xf86-video-rendition',
            'xf86-video-siliconmotion',
            'xf86-video-i740',
            'xf86-video-fbdev',
            ]

        for p in videoDrivers:
            r.flAdd(p, source='xorg-driver-video')

        ## end of packages built by xorg-drivers-video
        #
        #   end of our xorg stack
        #

        for moveGroup in (
            'group-base',
            'group-core',
            'group-devel',

            #  'group-gnome',
            #  'group-os-devel',
            #  'group-printing',

            'group-text-tools',):
            r.removeItemsAlsoInNewGroup('group-xorg', groupName= moveGroup)

        for moveGroup in (
            'group-base',
            'group-core',
            'group-text-tools',

            # 'group-gnome',
            # 'group-os-devel',
            # 'group-printing',

            'group-xorg',
            'group-xorg-fonts',
            'group-xorg-drivers',):
            r.moveComponents([':devellib', ':devel'], moveGroup, 'group-devel')

        # final housekeeping
        if Arch.x86_64:
            r.remove('libXt:doc',  groupName='group-compat32',
                     flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
            r.remove('libXt:runtime',  groupName='group-compat32',
                     flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
            r.remove('libXpm:runtime',  groupName='group-compat32',
                     flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
            r.remove('libXpm:doc',  groupName='group-compat32',
                     flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')
            r.remove('libX11:data',  groupName='group-compat32',
                     flavor='is: x86(~cmov, ~i486, ~i586, ~i686, ~mmx, ~nx, ~sse, ~sse2)')

