#
# Copyright (c) 2009 Foresight Linux
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

import glob
from conary.lib import log


class KernelModulePackageRecipe(CPackageRecipe):
    name = 'kernelmodulepackage'
    version = '1'
 
    buildRequires = [
        'kernel:build-tree',
        'mkinitrd:runtime',
      ]

    moduleDir = 'misc'

    # Template methods -- override these in your recipe as needed.
    def setup(r):
        r.setKVer()
        r.unpack()
        r.build()
        r.install()
        r.basePolicy()
        r.policy()

    def unpack(r):
        pass

    def build(r):
        r.Make("modules -C '/lib/modules/%(kver)s/build' M='%(builddir)s'")

    def install(r):
        r.macros.moduledir = r.moduleDir
        r.Install('*.ko', '/lib/modules/%(kver)s/%(moduledir)s/')

    def basePolicy(r):
        r.requireKVer()
        r.skipAutoDocs()

    def policy(r):
        pass


    # Helper methods
    def setKVer(r):
        """
        Pick a kernel to build against. The algorithm is as follows:

        * If the kver macro is already set, use that.
        * If bootloader.conf exists, we are likely building with cvc
          on an actual system. Use the running kernel, or die if it's
          not present.
        * If bootloader.conf does not exist, we are probably chrooted
          (e.g. building in rMake). If a single kernel is in
          /lib/modules, use that, otherwise die.
        """
        if 'kver' in r.macros:
            return
        # in rbuild/rmake land, the recipe code evaluates 3 times but we should
        # only attempt to discover build-tree in last step (build).
        # lightInstance is False during 3rd stage.
        elif r._lightInstance:
            # Not building
            r.macros.kver = ''
            return

        testPath = '/lib/modules/%s/build/Makefile'
        # the dep chain for mkinitrd:runtime now (1/18/10) includes extlinux.
        buildTrees = glob.glob(testPath % '*')
        if len(buildTrees) == 0:
            raise RuntimeError("No kernel build tree installed")
        elif len(buildTrees) > 1:
            kver = os.uname()[2]
            if not os.path.exists(testPath % kver):
                raise RuntimeError("No build tree for running kernel %r" % kver)
            #raise RuntimeError("Multiple kernels installed; please set the kver macro")
        kver = buildTrees[0].split('/')[3]
        log.info('Selected kver %s', kver)
        r.macros.kver = kver

    def requireKVer(r):
        """
        Require whatever kernel version we picked.
        """
        r.Requires('kernel:runtime(%(kver)s)', '/lib/modules/%(kver)s/.*')

    def skipAutoDocs(r):
        """
        Ignore docs so different versions can be installed side-by-side
        (without pulling in just :lib).
        """
        r.AutoDoc(exceptions='.*')
