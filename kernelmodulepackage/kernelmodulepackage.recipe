#
# Copyright (c) 2005 rpath, Inc.
# All rights reserved
#

class KernelModulePackageRecipe(PackageRecipe):

    buildRequires = [ 'kernel:build-tree']

    name = "kernelmodulepackage"
    version = "0"

    Flags.smp = False
    Flags.numa = False
    Flags.debug = False

    def setup(r):
        if r.__class__.__name__ == 'KernelModulePackageRecipe':
            return

        r.macros.kver = os.uname()[2]

        if r.Flags.smp != (r.macros.kver.find('smp') >= 0):
            raise KernelFlavorMismatch('smp', r)
        if r.Flags.numa != (r.macros.kver.find('numa') >= 0):
            raise KernelFlavorMismatch('numa', r)
        if r.Flags.debug != (r.macros.kver.find('debug') >= 0):
            raise KernelFlavorMismatch('debug', r)

        r.unpack()
        r.build()
        r.install()
        r.requires()
        r.policy()
        r.installbucket()

    def unpack(r):
        pass
    def build(r):
        pass
    def install(r):
        pass
    def requires(r):
        r.Requires('kernel:runtime(%(kver)s)', '/lib/modules/.*')
    def policy(r):
        pass
    def installbucket(r):
        r.InstallBucket('%(name)s:lib', kver='%(kver)s')


class KernelFlavorMismatch(Exception):
    def __init__(self, flagname, recipe):
        self.flagname = flagname
        self.recipe = recipe
    def __repr__(self):
        return "Flavor Mismatch: kernel version %s does not match local flag %s" %(self.recipe.macros.kver, self.flagname)
    __str__ = __repr__
