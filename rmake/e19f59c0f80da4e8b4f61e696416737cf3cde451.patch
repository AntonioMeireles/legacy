# HG changeset patch
# User Michael Tharp <michael.tharp@sas.com>
# Date 1369327987 0
# Node ID e19f59c0f80da4e8b4f61e696416737cf3cde451
# Parent  bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c
Compatibility with Conary 2.5

diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 NEWS.src/misc-cng.bugfix
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/NEWS.src/misc-cng.bugfix	Thu May 23 16:53:07 2013 +0000
@@ -0,0 +1,1 @@
+Added compatibility with config changes for Conary 2.5
diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 rmake/build/buildcfg.py
--- a/rmake/build/buildcfg.py	Thu May 23 13:33:19 2013 +0000
+++ b/rmake/build/buildcfg.py	Thu May 23 16:53:07 2013 +0000
@@ -136,6 +136,8 @@
 
 class RmakeBuildContext(cfg.ConfigSection):
 
+    _cfg_bases = [conarycfg.ConaryContext]
+
     bootstrapTroves      = (CfgList(CfgTroveSpec), [],
             "INTERNAL USE ONLY: Troves to be installed before the remaining "
             "chroot contents.")
@@ -166,10 +168,12 @@
 
     def __init__(self, parent, doc=None):
         cfg.ConfigSection.__init__(self, parent, doc=None)
+        if hasattr(self, 'addConfigOption'):
+            # Conary < 2.5
+            for info in conarycfg.ConaryContext._getConfigOptions():
+                if info[0] not in self:
+                    self.addConfigOption(*info)
 
-        for info in conarycfg.ConaryContext._getConfigOptions():
-            if info[0] not in self:
-                self.addConfigOption(*info)
 
 class FreezableConfigMixin(object):
 
@@ -222,6 +226,8 @@
 
 class BuildConfiguration(conarycfg.ConaryConfiguration, FreezableConfigMixin):
 
+    _cfg_bases = [RmakeBuildContext]
+
     buildTroveSpecs      = CfgList(CfgTroveSpec)
     isolateTroves        = (CfgBool, False, "Ignore the results of other "
             "troves in the same job when searching for build requirements.")
@@ -244,7 +250,7 @@
     # and should not be displayed.  They are job-specific.  However,
     # they must be stored with the job, parsed with the job, etc.
 
-    _hiddenOptions = [ 'buildTroveSpecs', 'resolveTroveTups', 'jobContext',
+    _cfg_hidden = [ 'buildTroveSpecs', 'resolveTroveTups', 'jobContext',
                        'recurseGroups', 'recursedGroupTroves',
                        'prebuiltBinaries', 'ignoreExternalRebuildDeps',
                        'ignoreAllRebuildDeps', 'primaryTroves', 'reposName',
@@ -272,9 +278,11 @@
         conarycfg.ConaryConfiguration.__init__(self, readConfigFiles=False)
         if hasattr(self, 'setIgnoreErrors'):
             self.setIgnoreErrors(ignoreErrors)
-        for info in RmakeBuildContext._getConfigOptions():
-            if info[0] not in self:
-                self.addConfigOption(*info)
+        if hasattr(self, 'addConfigOption'):
+            # Conary < 2.5
+            for info in RmakeBuildContext._getConfigOptions():
+                if info[0] not in self:
+                    self.addConfigOption(*info)
         if strictMode is not None:
             self.strictMode = strictMode
         if not hasattr(self, 'rmakeUrl'):
@@ -304,8 +312,10 @@
         self.root = ':memory:'
         self.dbPath = ':memory:'
         self.logFile = []
-        for option in self._hiddenOptions:
-            del self._lowerCaseMap[option.lower()]
+        if hasattr(self, '_lowerCaseMap'):
+            # Conary < 2.5
+            for option in self._cfg_hidden:
+                del self._lowerCaseMap[option.lower()]
 
         self.useConaryConfig(conaryConfig)
         if serverConfig:
@@ -317,16 +327,10 @@
         def _shouldOverwrite(key, current, new):
             if key not in new:
                 return False
-            if compat.ConaryVersion().supportsConfigIsDefault():
-                if (current.isDefault(key) and
-                    current[key] == current.getDefaultValue(key) and
-                   (not new.isDefault(key) or
-                    new[key] != new.getDefaultValue(key))):
-                    return True
-            elif (current[key] is current.getDefaultValue(key) or
-                  current[key] == current.getDefaultValue(key)
-                  and (not new[key] is new.getDefaultValue(key)
-                       and not new[key] == new.getDefaultValue(key))):
+            if (current.isDefault(key) and
+                current[key] == current.getDefaultValue(key) and
+               (not new.isDefault(key) or
+                new[key] != new.getDefaultValue(key))):
                 return True
             return False
         if self.strictMode:
@@ -463,7 +467,7 @@
         return ''
 
     def _writeKey(self, out, cfgItem, value, options):
-        if cfgItem.name in self._hiddenOptions:
+        if cfgItem.name in self._cfg_hidden:
             if not options.get('displayHidden', False):
                 return
         conarycfg.ConaryConfiguration._writeKey(self, out, cfgItem,
diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 rmake/build/trovesettings.py
--- a/rmake/build/trovesettings.py	Thu May 23 13:33:19 2013 +0000
+++ b/rmake/build/trovesettings.py	Thu May 23 16:53:07 2013 +0000
@@ -20,7 +20,7 @@
 from rmake.build import buildcfg
 from rmake.lib import apiutils
 
-class _TroveSettingsRegister(type):
+class _TroveSettingsRegister(type(cfg.ConfigFile)):
     def __init__(class_, *args, **kw):
         type.__init__(class_, *args, **kw)
         apiutils.register_freezable_classmap('TroveSettings', class_)
diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 rmake/server/servercfg.py
--- a/rmake/server/servercfg.py	Thu May 23 13:33:19 2013 +0000
+++ b/rmake/server/servercfg.py	Thu May 23 16:53:07 2013 +0000
@@ -184,17 +184,23 @@
 
     dbPath            = dbstore.CfgDriver
 
+    _cfg_aliases = [
+            ('proxy',       'proxyUrl'),
+            ('serverUrl',   'reposUrl'),
+            ('serverName',  'reposName'),
+            ('user',        'reposUser'),
+            ]
+
     def __init__(self, readConfigFiles = False, ignoreErrors=False):
         daemon.DaemonConfig.__init__(self)
         self.setIgnoreErrors(ignoreErrors)
-        self.addAlias('proxy', 'proxyUrl')
-        self.addAlias('serverUrl', 'reposUrl')
-        self.addAlias('serverName', 'reposName')
-        self.addAlias('user',  'reposUser')
+        if hasattr(self, 'addAlias'):
+            # Conary < 2.5
+            for old, new in self._cfg_aliases:
+                self.addAlias(old, new)
         if readConfigFiles:
             self.readFiles()
 
-
     def setServerName(self, serverName):
         for x in list(self.reposUser):
             if x[0] == self.reposName:
@@ -269,9 +275,6 @@
     def getReposLogPath(self):
         return self.logDir + '/repos.log'
 
-    def getProxyLogPath(self):
-        return self.logDir + '/proxy.log'
-
     def getSubscriberLogPath(self):
         return self.logDir + '/subscriber.log'
 
diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 rmake_plugins/multinode/server/servercfg.py
--- a/rmake_plugins/multinode/server/servercfg.py	Thu May 23 13:33:19 2013 +0000
+++ b/rmake_plugins/multinode/server/servercfg.py	Thu May 23 16:53:07 2013 +0000
@@ -17,7 +17,7 @@
 
 import urllib2
 
-from conary.lib import cfgtypes
+from conary.lib import cfg, cfgtypes
 
 from rmake.server import servercfg
 from rmake import errors
@@ -35,18 +35,16 @@
         return host
 
 
-ServerConfig = dict(
-    reposUrl       = (cfgtypes.CfgString, 'https://LOCAL:7777'),
-    rmakeUrl       = (cfgtypes.CfgString, 'https://localhost:9999'),
-    proxyUrl       = (cfgtypes.CfgString, None),
-    rbuilderUrl    = (cfgtypes.CfgString, 'https://localhost/'),
+class ServerConfig(cfg.ConfigFile):
+    reposUrl       = (cfgtypes.CfgString, 'https://LOCAL:7777')
+    rmakeUrl       = (cfgtypes.CfgString, 'https://localhost:9999')
+    proxyUrl       = (cfgtypes.CfgString, None)
+    rbuilderUrl    = (cfgtypes.CfgString, 'https://localhost/')
     # if None, start one locally
     # if "LOCAL", don't start one but still use localhost
-    messageBusHost = (cfgtypes.CfgString, None),
-    messageBusPort = (cfgtypes.CfgInt, 50900),
+    messageBusHost = (cfgtypes.CfgString, None)
+    messageBusPort = (cfgtypes.CfgInt, 50900)
 
-    getMessageBusHost=getMessageBusHost,
-    )
 
 def getAuthUrl(self):
     return self.translateUrl(self.rbuilderUrl)
@@ -79,8 +77,14 @@
 
 def updateConfig():
     mainConfig = servercfg.rMakeConfiguration
-    for key, value in ServerConfig.items():
-        setattr(mainConfig, key, value)
+    if hasattr(mainConfig, 'extend'):
+        # Conary >= 2.5
+        mainConfig.extend(ServerConfig)
+    else:
+        # Conary < 2.5
+        for option in ServerConfig._getConfigOptions():
+            key, option = option[0], option[1:]
+            setattr(mainConfig, key, option)
     if not hasattr(mainConfig, 'oldSanityCheck'):
         mainConfig.oldSanityCheck = mainConfig.sanityCheckForStart
         mainConfig.oldGetAuthUrl = mainConfig.getAuthUrl
@@ -88,6 +92,7 @@
 
     mainConfig.checkBuildSanity = checkBuildSanity
     mainConfig.getAuthUrl = getAuthUrl
+    mainConfig.getMessageBusHost = getMessageBusHost
     mainConfig.sanityCheckForStart = sanityCheckForStart
 
 def resetConfig():
diff -r bd6d6adc9ea637a78ae704768ad6b0f21ff8f45c -r e19f59c0f80da4e8b4f61e696416737cf3cde451 rmake_plugins/multinode_client/build/buildcfg.py
--- a/rmake_plugins/multinode_client/build/buildcfg.py	Thu May 23 13:33:19 2013 +0000
+++ b/rmake_plugins/multinode_client/build/buildcfg.py	Thu May 23 16:53:07 2013 +0000
@@ -17,12 +17,12 @@
 
 import urllib
 
-from conary.lib import cfgtypes
+from conary.lib import cfg, cfgtypes
 
 from rmake.build import buildcfg
 from rmake.lib import apiutils
 
-class BuildContext(object):
+class BuildContext(cfg.ConfigSection):
     rmakeUrl  = (cfgtypes.CfgString, 'unix:///var/lib/rmake/socket')
     rmakeUser = (buildcfg.CfgUser, None)
     clientCert = (cfgtypes.CfgPath, None)
@@ -44,9 +44,15 @@
     return url
 
 def updateConfig():
-    buildcfg.RmakeBuildContext.rmakeUrl = BuildContext.rmakeUrl
-    buildcfg.RmakeBuildContext.rmakeUser = BuildContext.rmakeUser
-    buildcfg.RmakeBuildContext.clientCert = BuildContext.clientCert
+    if hasattr(buildcfg.RmakeBuildContext, 'extend'):
+        # Conary >= 2.5
+        buildcfg.RmakeBuildContext.extend(BuildContext)
+        buildcfg.BuildConfiguration.extend(BuildContext)
+    else:
+        # Conary < 2.5
+        buildcfg.RmakeBuildContext.rmakeUrl = BuildContext.rmakeUrl
+        buildcfg.RmakeBuildContext.rmakeUser = BuildContext.rmakeUser
+        buildcfg.RmakeBuildContext.clientCert = BuildContext.clientCert
     buildcfg.BuildConfiguration.getServerUri = getServerUri
 
 class SanitizedBuildConfiguration(buildcfg.SanitizedBuildConfiguration):
