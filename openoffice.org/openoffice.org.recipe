#
# Copyright (c) 2004-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class OpenOffice(CPackageRecipe):

    name = 'openoffice.org'
    version = '2.4.1+m17'
    ooo_build_version = '12728'

    buildRequires = [
        'ant:java', 'ant:runtime', 'atk:devel', 'autoconf:runtime',
        'automake:runtime', 'bison:runtime', 'boost:devel',
        'cups:devel', 'curl:devel', 'db:devel', 'dbus-glib:devel',
        'dbus:devel', 'desktop-file-utils:runtime', 'doxygen:runtime',
        'expat:devel', 'flex:runtime', 'fontconfig:devel', 'freetype:devel',
        'gcc-c++:runtime', 'glib:devel', 'gst-plugins-base:devel',
        'gstreamer:devel', 'gtk:devel', 'icu:devel', 'icu:runtime',
        'imake:runtime', 'libart_lgpl:devel', 'libICE:devel', 'libjpeg:devel',
        'libpng:devel', 'libSM:devel', 'libsndfile:devel', 'libstdc++:devel',
        'libwpd:devel', 'libX11:devel', 'libXau:devel', 'libXaw:devel',
        'libXext:devel', 'libXinerama:devel', 'libxml2:devel',
        'libXrender:devel', 'libxslt:runtime', 'libxslt:devel', 'libXt:devel',
        'mono:cil', 'mono:devel', 'mono:runtime', 'neon:devel', 'nspr:devel',
        'nss:devel', 'openldap:devel', 'pam:devel', 'pango:devel',
        'patch:runtime', 'perl-Archive-Zip:perl', 'perl-Compress-Zlib:perl',
        'perl:runtime', 'pkgconfig:devel', 'portaudio:devel', 'python:devel',
        'qt:devel', 'Sablot:devel', 'sane-backends:devel', 'man:runtime',
        'shared-mime-info:runtime', 'startup-notification:devel',
        'tcsh:runtime', 'unixODBC:devel', 'unzip:runtime',
        'userspace-kernel-headers:devel', 'util-linux:runtime', 'which:runtime',
        'xulrunner-1.8-compat:devel', 'zip:runtime', 'zlib:devel',
        'gperf:runtime', 'Mesa:devel', 'ImageMagick:runtime', 'openssl:devel',
        'icedtea-jre:runtime', 'icedtea-jdk:runtime', 'xerces-j:java',
        'xalan-j:java', 'libXtst:devel'
    ]

    use_kde = True
    use_gnome = True

    def setup(r):

        r.macros.snapshot = 'ooh680-'+r.version.split('+')[1]
        r.macros.snapshotdir = r.macros.snapshot.split('-')[0].upper()
        r.macros.ooobuild = r.version.split('+')[0]
        r.macros.fullName = 'OpenOffice.org-%(major_version)s'

        # used in loadManifest
        r.manifest_files = {}

        # Langs from doc/AUTOGEN.NovellWin32ISO.sh
        langs = (
            "af ar be-BY bg bn-IN br ca cs cy da de el en-GB es et fi fr gu-IN"
            " he hi-IN hr hu it ja km ko lt lv mk mr-IN nb nl nn pa-IN pl pt-BR"
            " pt ru rw sk sl sv ta-IN tr vi xh zh-CN zh-TW zu"
        )
        r.langs = langs.split()

        poor_help = (
            "af ar be-BY bn-IN bg ca el en-GB fi gu-IN hi-IN hr lt lv mk mr-IN"
            " nb nn pt sk sl ta-IN tr xh zu"
        )
        r.poor_help = poor_help.split()

        r.build_langs = [ 'en-US', ]
        r.build_langs.extend(r.langs)
        # Can be used to speed up test builds
        #r.build_langs.extend([
        #    'de', 'pt', 'pt-BR', 'ru', 'fr',
        #])
        r.macros.langs = ' '.join(r.build_langs)
        r.macros.poor_help = ' '.join(r.poor_help)

        # Saving only looks in /usr/lib/OpenOffice.org for some BASIC files
        # and does not respect --with-installed-ooo-dirname -- RPL-247
        r.macros.basedir = '%(libdir)s/%(fullName)s'

        r.macros.cflags += ' -fno-strict-aliasing'

        # -------------------
        #
        # unpack the source
        #
        # -------------------

        r.macros.site = 'http://download.go-oo.org'

        r.addSvnSnapshot(
#            'http://svn.gnome.org/svn/ooo-build/trunk', revision=r.ooo_build_version
            'http://svn.gnome.org/svn/ooo-build/branches/ooo-build-2-4-1', revision=r.ooo_build_version
        )

        for x in ('core', 'lang', 'sdk_oo', 'system'):
            r.addSource('%(site)s/%(snapshotdir)s/%(snapshot)s-'+x+'.tar.bz2', dir='src/')

        oooSupport = [
            'biblio.tar.bz2',
            'cli_types.dll',
            'cli_types_bridgetest.dll',
            'extras-2.tar.bz2',
            'libsvg-0.1.4.tar.gz',
            'libwpg-0.1.2.tar.gz',
            'libwps-0.1.2.tar.gz',
            'lp_solve_5.5.0.10_source.tar.gz',
            'mdbtools-0.6pre1.tar.gz',
            'oox.2008-02-29.tar.bz2',
            'writerfilter.2008-02-29.tar.bz2',
        ]
        for file in oooSupport:
            r.addSource('%%(site)s/SRC680/%s' % file, dir='src/')

        r.addSource('http://cairographics.org/releases/cairo-1.4.10.tar.gz', dir='src/')

        r.addSource('%(site)s/xt/xt-20051206-src-only.zip', dir='src/')
        r.addSource('http://tools.openoffice.org/unowinreg_prebuild/680/unowinreg.dll', dir='src/')

        # Will use after patch.apply
        r.addSource('solenv-enable-soname.patch')

        # Fix typo in configure
        r.Replace('eval ./configure',
                  'sed -i "s/altlinuxyph/altlinuxhyph/g" configure; eval ./configure',
                  'bin/build-ooo')

        # from hsqldb_1_8_0_9.zip
        r.addSource('hsqldb.jar')

        # From RH .spec
        r.addSource('compact_templates.sh')

        # XXX
        r.Replace(
            '^rpl2:.*$',
            'Foresight: LinuxCommon, NotDebian, CalcSolver, Lockdown, BerkeleyDB43, CairoFonts, Shrink',
            'patches/src680/apply'
        )
        r.Copy('distro-configs/rpl2.conf.in', 'distro-configs/Foresight.conf')

        r.Run('NOCONFIGURE=1 ./autogen.sh')

        # --------------------------
        #
        # configuration and install
        #
        # --------------------------

        if r.use_kde:
            r.Environment('QTINC', '%(includedir)s/qt3')

        r.Environment('MONO_SHARED_DIR', '/tmp')

        # Packaging stuff
        extraConf = (
                       ' --with-tag=%(snapshot)s'
                       ' --with-lang="%(langs)s" --with-dict=ALL'
                       ' --with-poor-help-localizations="%(poor_help)s"'
                       ' --with-binsuffix=%(major_version)s'
                       ' --with-installed-ooo-dirname="%(fullName)s"'
                       ' --with-docdir=%(thisdocdir)s'
                       ' --disable-binfilter'
                       ' --with-ant-home=%(prefix)s/'
                       ' --with-java'
                       ' --with-java-target-version=1.5'
                       ' --with-odk'
                       ' --with-use-shell=bash'
                       ' --enable-gtk'
                       ' --without-system-db'
                       ' --without-nas'
                       ' --with-system-libwpd'
                       ' --with-system-portaudio'
                       ' --with-system-xerces'
                       ' --with-system-xalan'
                       # Package mozilla-xpcom was not found in the pkg-config search path.
                       ' --with-system-mozilla=xulrunner'
                       # Probably we should add this
                       ' --without-system-libwps'
                       ' --without-system-libwpg'
                       ' --without-system-libsvg'
                       ' --without-system-icu'
                       # I'm not sure if we need these in distro, but we should
                       # consider it
                       ' --without-system-xt'
                       ' --without-system-mdbtools'
                       ' --without-system-xml-apis'
                       # FIXME
                       ' --with-system-hsqldb'
                       ' --with-hsqldb-jar=%(builddir)s/hsqldb.jar'
                       ' --enable-openxml'
                       ' --with-jdk-home=$JAVA_HOME'
                       # <_rene_> even if the option existed it would build but simply crash on signing.
                       # so we shouldn't use system xmlsec
                       ' --without-system-xmlsec'
                    )

        extraConf += ' --with-distro=Foresight'

        if r.use_kde:
            r.buildRequires.extend( [ 'kdelibs:devel', 'qt:devel' ] )
            extraConf += ' --enable-kde'
        else:
            extraConf += ' --disable-kde'

        if r.use_gnome:
            r.buildRequires.extend([
                'GConf:devel', 'gnome-vfs:devel', 'libbonobo:devel',
                'ORBit2:devel'
            ])
            extraConf += ( ' --enable-lockdown'
                           ' --enable-gnome-vfs'
                           ' --enable-evolution2')
        else:
            extraConf += ( ' --disable-lockdown'
                           ' --disable-gnome-vfs'
                           ' --disable-evolution2')

        r.Configure(extraConf, preConfigure='PATH=$PATH:%(sbindir)s')

        # Unpack OO upstream sources, must be done after configure so that the
        # makefile is there
        r.Make('unpack')

        # apply upstream sources
        r.Make('patch.apply')

        r.Run('cat solenv-enable-soname.patch | patch -d build/%(snapshot)s -p0')

        # compile the program
        r.Make(preMake='PATH=$PATH:/%(sbindir)s')

        # -------------------------------
        #
        # install and policyesque things
        #
        # -------------------------------

        r.MakeInstall()

        # XXX
        r.Install('hsqldb.jar', '%(basedir)s/program/classes/')

        r.Replace(
            '/bin/python', '%(bindir)s/python', '%(basedir)s/program/mailmerge.py'
        )

        r.Run('bash compact_templates.sh "%(destdir)s/%(basedir)s"')

        # This is not a help document
        r.ComponentSpec('runtime', '%(basedir)s/help/main_transform.xsl')

        for lang in r.build_langs:
            if lang not in r.poor_help:
                r.ComponentSpec(r.name+'-doc-%s:doc' % lang, '%%(basedir)s/help/%s/' % lang)

        for lang in r.build_langs[1:]:
            r.loadManifest('lang_%s_list.txt' % lang, r.name+'-locale-'+lang+':locale')

        for p in ('kde', 'gnome', 'mono'):
            r.loadManifest('%s_list.txt' % p, r.name+'-'+p)

        apps = [
            ('calc', 'Calc'),
            ('draw', 'Draw'),
            ('impress', 'Impress'),
            ('math', 'Math'),
            ('writer', 'Wrt'),
        ]
        for (app, d) in apps:
            pkg = '%s-%s:runtime' % (r.name, app)
            desktopFile = '%(datadir)s/applications/'+app+'%(major_version)s.desktop'
            r.loadManifest('gid_Module_Prg_'+d, pkg)
            r.ComponentSpec(pkg, desktopFile)
            r.ComponentSpec(pkg, '%(bindir)s/oo'+app+'%(major_version)s')

        desktopFile = '%(datadir)s/applications/web%(major_version)s.desktop'
        r.ComponentSpec(pkg, desktopFile)
        r.ComponentSpec(pkg, '%(bindir)s/ooweb%(major_version)s')

        # make sure basedir exists... we ran into this problem before. can't
        # use an assert since that would be run before everything else
        r.Run('test -d "%(destdir)s/%(basedir)s"')

        r.AutoDoc(exceptions='/.+/')

        r.ExcludeDirectories(exceptions='%(libdir)s/')

        r.TagSpec('desktop-file', '%(datadir)s/applications/')

        # flavor policy takes over 3.5 hours(!!) to run without this line. the
        # things in these directories are all data files which don't affect the
        # flavor anyway, and now we don't have to scan 23,000 of the 24,000
        # files in openoffice.org. Since all the libs and the executable is not
        # contained in these exceptions, the flavor is still set correctly.
        # If/when Flavor policy is sped up, this should be removed
        r.Flavor(exceptions='%(basedir)s/(share|program/resource)/.*')

        # These deps provided with OOO
        r.Requires(exceptDeps=r'java: org\.hsqldb\..*')
        r.Requires(exceptDeps=r'java: javax\.servlet\..*')

        # FIXME
        if Arch.x86_64:
            r.Requires(exceptDeps=r'soname\:\ ELF64\/libjawt\.so\(SUNWprivate\_1\.1\ SysV\ x86\_64\)')
        else:
            r.Requires(exceptDeps=r'soname\:\ ELF32\/libjawt\.so\(SUNWprivate\_1\.1\ SysV\ x86\)')

        arch = ('i386', 'amd64')[Arch.x86_64 == True]
        r.Requires(rpath='%(libdir)s/jvm/java-*-icedtea-*/jre/lib/'+arch)

    def loadManifest(r, file, package):

        # Hack, need better support from conary CNY-1502
        r.Run('/bin/true', package=package)

        if ':' in package:
            real_pkg = package.split(':')[0]
            pkg = (real_pkg, 'DEFAULT')[real_pkg == '']
        else:
            real_pkg = package
            pkg = package

        if not r.manifest_files.has_key(pkg):
            r.manifest_files[pkg] = 0
        else:
            r.manifest_files[pkg] += 1

        manifest = '%s.%d.manifest' % (real_pkg, r.manifest_files[pkg])

        r.Run('cat build/%s | grep "^/" > ../_MANIFESTS_/%s' % (file, manifest))

