#
# Copyright (c) 2006 Paul Scott-Wilson <pscott>
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

class QuodLibet(CPackageRecipe):
    name = 'quodlibet'
    version = '1.0'

    buildRequires = ['atk:devel', 'cairo:devel','cddb-py:python', 'cddb-py:python',
                     'dbus-python:python', 'desktop-file-utils:runtime', 'expat:devel',
                     'fontconfig:devel', 'freetype:devel', 'glib:devel', 'gnome-python:python',
                     'gst-python:python', 'gettext:runtime', 'gtk:devel', 'intltool:runtime',
                     'libX11:devel', 'libXrender:devel', 'libpng:devel', 'zlib:devel',
                     'notify-python:python', 'gnome-python-extras:python', 'mutagen:python',
                     'pango:devel', 'pygobject:python', 'pygtk:python', 'python-ctypes:python',
                     'pkgconfig:devel', 'pygtk:devel', 'python:devel']

    def setup(r):
        r.macros.pluginbase = 'https://svn.sacredchao.net/svn/quodlibet/trunk/plugins'
        r.macros.qlplugindir  = '%(datadir)s/%(name)s/plugins'
        r.addArchive('http://www.sacredchao.net/~piman/software/')
        r.Replace('/usr/local','%(prefix)s', 'Makefile', lines=6)

        r.Make('extensions')
        r.MakeInstall()


        # Events Plugins
        events_plugins = ( # Display information when it changes.
                          '%(pluginbase)s/events/animosd.py',
                           # Automatically mask and unmask drives when
                           # mounted/unmounted
                          '%(pluginbase)s/events/automask.py', 
                           # Rate songs automatically when they are played or
                           # skipped. 
                          '%(pluginbase)s/events/autorating.py',
                           # Start or stop playback at configurable times
                          '%(pluginbase)s/events/clock.py',
                          # GNOME multimedia key support
                          '%(pluginbase)s/events/dbusmmkey.py',
                           # List the last 10 played radio songs in seek menu.
                          '%(pluginbase)s/events/iradiolog.py',
                          '%(pluginbase)s/events/jep118.py',
                          # Last.FM submissions
                          '%(pluginbase)s/events/qlscrobbler.py',
                          # Random album playback
                          '%(pluginbase)s/events/randomalbum.py',
                          # Tray icon
                          '%(pluginbase)s/events/trayicon.py',
                          # Write cover to ID3 tags
                          '%(pluginbase)s/events/write_cover.py',
                          # Notification daemon pop-up on track changes
                          'http://members.chello.sk/lalinsky/notify2.py'
                          )
        for url in events_plugins:
            r.addSource(url, dest='%(qlplugindir)s/events/')


        # Editing plugins
        editing_plugins = ( # Fix files imported with the wrong encoding.
                           '%(pluginbase)s/editing/iconv.py',
                            # Use regex substitution from
                            # tags to filenames and vice versa
                           '%(pluginbase)s/editing/resub.py',
                            # Title-case a tag value.
                           '%(pluginbase)s/editing/titlecase.py')

        for url in editing_plugins:
            r.addSource(url, dest='%(qlplugindir)s/editing/')


        # Context Menu
        contextmenu_plugins = ( # Needed for Album Artwork plugin
                                '_amazon.py',
                                # Subprocobj
                                '_subprocobj.py',
                                # Download album art from Amazon
                                '%(pluginbase)s/songsmenu/albumart.py',
                                # Convert APEv2 to ID3v2 tags.
                                '%(pluginbase)s/songsmenu/ape2id3.py',
                                # Manage bookmarks for long audio files like
                                # audio books.
                                '%(pluginbase)s/songsmenu/bookmarks.py',
                                # Use MusicBrainz to fill in tags automatically.
                                '%(pluginbase)s/songsmenu/brainz.py',
                                # View the songs' folder in a configurable file
                                # manager.
                                '%(pluginbase)s/songsmenu/browsefolders.py',
                                # Use FreeDB to fill in tags automatically.
                                '%(pluginbase)s/songsmenu/cddb.py',
                                # Export to HTML
                                'html.py',
                                # Upload songs to an iRiver iFP device.
                                '%(pluginbase)s/songsmenu/ifp.py',
                                # Export song to a file  and import tags from such files.
                                '%(pluginbase)s/songsmenu/importexport.py',
                                # View directories in Nautilus.
                                '%(pluginbase)s/songsmenu/nautilus.py',
                                # Uses the rganalysis gstreamer plugin to
                                # determine a volume adjustment for selected
                                # songs, grouped by album
                                #'%(pluginbase)ssongsmenu/replaygain.py',
                                # Reset ratings, play counts, skip counts, and
                                # play times.
                                '%(pluginbase)s/songsmenu/reset.py',
                                # Split the disc number from the album and the
                                # version from the title at the same time.
                                '%(pluginbase)s/songsmenu/splitting.py',
                                # Lookup artist in Wikipedia
                                '%(pluginbase)s/songsmenu/wikipedia.py')

        for url in contextmenu_plugins:
            r.addSource(url, dest='%(qlplugindir)s/songsmenu/')

        for dir in ('events', 'songsmenu', 'editing'):
            r.CompilePython('%(qlplugindir)s/' + dir)
