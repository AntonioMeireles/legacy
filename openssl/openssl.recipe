#
# Copyright (c) 2004-2009 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
class OpenSSL(RPMPackageRecipe, CPackageRecipe):
    name = 'openssl'
    version = '0.9.8g'
    certsdir = '%(sysconfdir)s/ssl/certs'

    isUpdate = True
    distroVersion = '10'
    rpmRelease = '12.fc10'

    rpmPatches = [
        'openssl-0.9.8a-link-krb5.patch',
        'openssl-0.9.8g-ipv6-apps.patch',
        'openssl-0.9.8g-shlib-version.patch',
        'openssl-0.9.8g-soversion.patch',
    ]

    buildRequires = [ 'perl:runtime',
                      'sed:runtime', 'mktemp:runtime', 'zlib:devel' ]
    if not Use.bootstrap:
        buildRequires.extend(['perl:devel', 'e2fsprogs:devel', 'krb5:devel'])

    buildRequires.append('zlib:devel')

    # XXX
    # XXX this has to be built under an rpl2 context (as newer binutils doesn't
    # XXX like this too much ... (using it would force defaulting to no-asm ...)
    # XXX 

    def setup(r):
        r.disableParallelMake()
        r.macros.solibbase = re.sub('[a-zA-Z]*', '', r.version)
        r.macros.certsdir = r.certsdir

        # Add back signature verification if CNY-2420 is fixed
        r.addArchive('http://www.openssl.org/source/') #, keyid='9C58A66D')

        for patch in r.rpmPatches:
            r.addPatch(patch, rpm=r.srpm)

        for patch in [ 'openssl-0.9.8-flags-priority.dif',
                       'non-exec-stack.diff',
                       'openssl-0.9.8a.ca-app-segfault.bug128655.dif',
                       'bswap.diff',
                       'openssl-0.9.8g-fix_dh_for_certain_moduli.patch',
                       'openssl-CVE-2008-0891.patch', # RPL-2569
                       'openssl-CVE-2008-1672.patch', # RPL-2569
                       'openssl-0.9.8g-CVE-2008-5077.patch', # RPL-2942
                       'openssl-CVE-2009-0590.patch',        # RPL-2997
                       'openssl-CVE-2009-0789.patch',
                       'openssl-CVE-2009-1377.patch',
                       'openssl-CVE-2009-1378.patch',
                       'openssl-CVE-2009-1379.patch',
                       'openssl-CVE-2009-1386.patch',         # RPL-3287  RPL-3288
                       'openssl-CVE-2009-1387.patch',
                   ]:
            r.addPatch(patch)

        # RPL-2519
        r.addPatch('openssl-0.9.8g-Configure-libresolv.patch')

        #Replace the country code in the stock openssl.cnf with --
        r.Replace('AU', '--', 'apps/openssl.cnf')

        #Add a script for generating dummy certificates, useful for initscripts
        r.addSource('gendummycert.sh', mode=0755, dest='%(bindir)s/')

        # RPL-3157
        r.addPatch('CVE-2009-4355.patch')

        # TLS renegotiation fix
        r.addPatch('CVE-2009-3555.patch')

        # RPL-3191
        r.addPatch('openssl-0.9.8g-CVE-2010-0433.patch')
        r.addPatch('openssl-0.9.8g-CVE-2009-3245.patch')

        # PFM-909
        r.addPatch('openssl-0.9.8g-CVE-2010-4180.patch')
        # RPL-3287  RPL-3288
        r.addPatch('openssl-CVE-2010-0740.patch')

        # XXXX [legacy hell]
        # the commented patches bellow don't apply straight :( ...
        for patch in [ 'CVE-2010-2939.patch',
                       'CVE-2010-3864.patch',
                       # Only 0.9.8h through 0.9.8q are affected by bellow one
                       # 'CVE-2011-0014.patch',
                       'block_diginotar.patch',
                       'block_digicert_malaysia.patch',
                       'CVE-2011-1945.patch',
                       'CVE-2011-3210.patch',
                       #'CVE-2011-4108.patch',
                       'CVE-2011-4109.patch',
                       # 'CVE-2011-4619.patch',
                       'CVE-2011-4576.patch',
                       # 'CVE-2011-4577.patch',
                       'dtls-fragment-alert.patch',
                       # 'CVE-2012-0050.patch',
                       # 'CVE-2012-0884.patch',
                       # 'CVE-2012-1165.patch',
                       'CVE-2012-2110.patch',
                       'CVE-2012-2131.patch',
                       'CVE-2012-2333.patch',
                       # 'CVE-2013-0169.patch',
                       'CVE-2013-0166.patch',
                   ]:
            r.addPatch('http://patch-tracker.debian.org/patch/series/dl/openssl/0.9.8o-4squeeze14/%s' % patch)

        r.addPatch('openssl-0.9.7-beta5-version-add-engines.patch')
        r.addPatch('openssl-0.9.8a-enginesdir.patch')

        r.macros.sslflags = ''

        if Arch.x86:
            r.macros.sslarch = 'linux-elf'
            if not Arch.x86.i686:
                r.macros.sslflags = 'no-asm 386'
        if Arch.x86_64:
            r.macros.sslarch = 'linux-x86_64'
        if Arch.ppc:
            r.macros.sslarch = 'linux-ppc'
        if Arch.ppc64:
            r.macros.sslarch = 'linux-ppc64'
            r.macros.cflags = '%(cflags)s -O0'

        if Use.bootstrap:
            config = ' no-krb5 '
        else:
            config = (' --with-krb5-flavor=MIT ')

        r.Replace('-Werror', '', 'Configure')
        # Set openssldir to be %(sysconfdir)s/ssl, and follow the SuSe
        # way of setting up /etc/ssl.
        r.ManualConfigure(
            ' --prefix=%(prefix)s'
            ' --openssldir=%(sysconfdir)s/ssl'
            ' zlib no-idea no-mdc2 no-rc5 shared %(sslarch)s ' + config,
            preConfigure='CFLAGS="%(cflags)s" CXXFLAGS="%(cflags)s" LDFLAGS="%(ldflags)s" CC=%(cc)s',
            configureName='Configure')
        if Use.bootstrap:
            r.Replace(('^CC=.*', 'CC=%(cc)s'),
                      ('^AR=ar.*', r'AR=%(target)s-ar $(ARFLAGS) r'),
                      ('^RANLIB=.*', 'RANLIB=%(target)s-ranlib'),
                       'Makefile')
        r.Make('depend')
        r.Make()
        r.MakeInstall(rootVar='INSTALL_PREFIX')
        r.Move('/usr/lib/*', '%(libdir)s/')
        r.Install('lib{ssl,crypto}.so.*', '%(essentiallibdir)s/')
        for x in ('crypto', 'ssl'):
            r.Move('%%(libdir)s/lib%s.so' % x, '%(essentiallibdir)s/')
            r.Symlink('%%(essentiallibdir)s/lib%s.so.7' % x,
                      '%%(libdir)s/lib%s.so' % x)

            # RPL-2994 must always provide lib{ssl,crypto}.so.5 since that is
            # what rpl 2 originally shipped with.
            r.Symlink('lib%s.so.7' % x,
                      '%%(essentiallibdir)s/lib%s.so.5' % x)
            r.ComponentSpec('lib', '%%(essentiallibdir)s/lib%s.so.5' % x)

        r.Move('%(sysconfdir)s/ssl/man/*', '%(mandir)s/')
        r.Remove('%(sysconfdir)s/ssl/man', recursive=True)
        r.Move('%(sysconfdir)s/ssl/misc/*', '%(datadir)s/ssl/misc/')
        r.Remove('%(sysconfdir)s/ssl/misc', recursive=True)

        r.Run('''for header in %(destdir)s/%(includedir)s/openssl/* ; do
                 if [ -f ${header} -a -f include/openssl/$(basename ${header}) ] ; then
                    install -m644 include/openssl/$(basename ${header}) ${header}
                 fi
                 done''')

        # Rename manpages from ${manpage} to ${manpage}ssl
        r.Run('''
            for manpage in %(destdir)s/%(mandir)s/man*/* ; do
                if [ -L ${manpage} ]; then
                    TARGET=`ls -l ${manpage} | awk '{ print $NF }'`
                    ln -snf ${TARGET}ssl ${manpage}ssl
                    rm -f ${manpage}
                else
                    mv ${manpage} ${manpage}ssl
                fi
            done
            for conflict in passwd rand ; do
                for filename in `find %(destdir)s/%(mandir)s/man* -name ${conflict}\*` ; do
                        mv ${filename} `dirname ${filename}`/ssl`basename ${filename}`
                done
            done
        ''')

        # Install the certificate bundle
        # r.Install('certs/*.pem', '%(certsdir)s/')
        # r.Install('certs/expired/*', '%(certsdir)s/expired/')
        # r.Run('OPENSSL=%(destdir)s/%(bindir)s/openssl %(destdir)s/%(bindir)s/c_rehash %(destdir)s/%(certsdir)s/')
 
        # XXX ALL references to certsdir wiped. as we have ca-certs now

        r.MakeDirs('%(sysconfdir)s/ssl/private', mode=0700)
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/ssl/private')

        # Fix libdir
        r.Replace(('^libdir=\${exec_prefix}/lib',
                  'libdir=%(exec_prefix)s/%(lib)s'),
                  '%(libdir)s/pkgconfig/openssl.pc')

        if not Use.bootstrap:
            r.Requires('krb5:devel', '%(includedir)s/openssl/kssl.h')
            # test suite is linked with kerberos
            r.TestSuite('test', 'make tests')

        # Both runtime and libraries depend on configuration files
        r.ComponentSpec('config', '%(sysconfdir)s/ssl/')
        r.ComponentRequires({'openssl': {'config': set(('runtime', 'lib'))}})
        # ca-certificates now expected...
        r.Requires('ca-certificates:config', 'openssl:config')

        # XXX here instead of in ca-certs ... for now
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/ssl/certs')

        # Perl scripts in a separate package to avoid dependencies for
        # the main package
        r.PackageSpec('openssl-scripts',
            '%(bindir)s/c_rehash',
            r'%(datadir)s/ssl/misc/.*\.pl')
        # Not using a static path to openssl below because c_rehash does
        # a $PATH search for it.
        r.Requires('openssl:runtime', '%(bindir)s/c_rehash')
        r.ComponentProvides('%(version)s')
