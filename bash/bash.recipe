#
# Copyright (c) 2004-2005 rPath, Inc.
# All rights reserved
#

class Bash(CPackageRecipe):
    # autoconf needed by bash-2.05a-interpreter.patch's change to configure.in
    buildRequires = [ 'libtermcap:devel', 'readline:devel', 'autoconf:runtime',
                      'byacc:runtime', 'install-info:runtime' ]
    if Use.bootstrap:
        clearBuildReqs()
        buildRequires = [ 'libtermcap:devel', 'cross-gcc', 'glibc' ]

    name = "bash"
    baseversion = "3.0"
    patchlevel = '16'
    version = ".".join((baseversion, patchlevel))

    def setup(r):
        r.macros.update({ 'baseversion' : r.baseversion,
                          'patchlevel'  : r.patchlevel,
                          'bash_shortversion': r.baseversion.replace('.', '')
                        })

        r.disableParallelMake()

        r.mainDir('bash-%(baseversion)s')
        r.addArchive("http://ftp.gnu.org/gnu/bash/bash-%(baseversion)s.tar.gz")

        skelFiles = ('dot-bash_logout', 'dot-bashrc', 'dot-bash_profile')
        for f in skelFiles:
            r.addSource(f, dest='%(sysconfdir)s/skel/.' + f[4:])

        r.addPatch('bash-2.02-security.patch', level=1)
        r.addPatch('bash-2.03-paths.patch', level=1, macros=True)
        r.addPatch('bash-2.03-profile.patch', level=1)
        r.addPatch('bash-2.05a-interpreter.patch', level=1)
        r.addPatch('bash-2.05a-loadables.patch', level=1)
        r.addPatch('bash-2.05a-requires.patch', level=1)
        r.addPatch('bash-2.05a-shellfunc.patch', level=1)
        r.addPatch('bash-2.05b-debuginfo.patch', level=1)
        r.addPatch('bash-2.05b-manso.patch', level=1)
        r.addPatch('bash-2.05b-mbinc.patch', level=1)
        r.addPatch('bash-2.05b-pgrp_sync.patch', level=1)
        r.addPatch('bash-2.05b-readline-oom.patch', level=1)
        r.addPatch('bash-2.05b-utf8.patch', level=1)
        r.addPatch('bash-2.05b-xcc.patch', level=1)
        r.addPatch('bash-afs.patch', level=1)
        r.addPatch('bash-crash.patch', level=0)
        r.addPatch('bash-jobs.patch', level=1)
        r.addPatch('bash-manpage.patch', level=1)
        r.addPatch('bash-multibyteifs.patch', level=1)
        r.addPatch('bash-pwd.patch', level=1)
        r.addPatch('bash-read-e-segfault.patch', level=0)
        r.addPatch('bash-sigpipe.patch', level=1)
        r.addPatch('bash-tty-tests.patch', level=1)
        r.addPatch('bash-ulimit.patch', level=1)
        r.addPatch('bash-wrap.patch', level=1)

        for p in range(1, int(r.patchlevel)+1):
            r.addPatch(
                   'http://ftp.gnu.org/gnu/bash/bash-%%(baseversion)s-patches/bash%%(bash_shortversion)s-%03d' %p,
                   level=0)

        r.Configure(preConfigure='EMACS=emacs')
        r.Make('version.h')
        r.Make()
        r.MakeInstall()

        r.MakeDirs('%(essentialbindir)s')
        r.Move('%(bindir)s/bash', '%(essentialbindir)s/bash')
        r.Symlink('bash', '%(essentialbindir)s/sh')
        r.TagSpec('shell', '%(essentialbindir)s/(ba)?sh')
        r.Provides('file', '%(essentialbindir)s/(ba)?sh')

        if not Use.bootstrap and Use.buildtests:
            r.Replace('#!../bash', '#%(essentialbindir)s/bash',
                      'tests/run-set-x',
                      'tests/dbg-support.tests',
                      'tests/run-dbg-support2',
                      'tests/dbg-support2.tests',
                      'tests/run-dbg-support',
                      'tests/set-x.tests')
            testprogs = 'recho zecho printenv mksyntax'
            r.Make(testprogs)
            r.Run('cp %s tests/' % testprogs)
            r.TestSuiteFiles('recho', 'zecho', 'printenv', 'mksyntax')
            r.TestSuite('tests/', 'PATH=$PATH:. THIS_SH=%(name)s /bin/sh run-all')
            r.EnforceConfigLogBuildRequirements(exceptions=['bison:runtime', 'emacs:runtime'])
