diff --git a/CMakeLists.txt b/CMakeLists.txt
index 19ccffb..b1056ff 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -22,6 +22,7 @@ find_package(KDE4 4.3.98 REQUIRED)
 find_package(Strigi REQUIRED)
 find_package(QImageBlitz REQUIRED)
 find_package(ZLIB REQUIRED)
+find_package(DBusMenuQt REQUIRED)
 
 if(Q_WS_X11)
   if(NOT X11_XTest_FOUND)
diff --git a/plasma/generic/applets/systemtray/CMakeLists.txt b/plasma/generic/applets/systemtray/CMakeLists.txt
index 7166768..f890afe 100644
--- a/plasma/generic/applets/systemtray/CMakeLists.txt
+++ b/plasma/generic/applets/systemtray/CMakeLists.txt
@@ -56,11 +56,11 @@ IF (HAVE_LIBXSS)
    SET (IDLE_DETECTION_LIB "Xss")
 ENDIF (HAVE_LIBXSS)
 
-set(statusnotifierwatcher_xml ${KDE4_DBUS_INTERFACES_DIR}/org.kde.StatusNotifierWatcher.xml)
+set(statusnotifierwatcher_xml ${KDE4_DBUS_INTERFACES_DIR}/org.freedesktop.StatusNotifierWatcher.xml)
 QT4_ADD_DBUS_INTERFACE(systemtray_SRCS ${statusnotifierwatcher_xml} statusnotifierwatcher_interface)
 
 
-set(statusnotifieritem_xml ${KDE4_DBUS_INTERFACES_DIR}/org.kde.StatusNotifierItem.xml)
+set(statusnotifieritem_xml ${KDE4_DBUS_INTERFACES_DIR}/org.freedesktop.StatusNotifierItem.xml)
 
 set_source_files_properties(${statusnotifieritem_xml} PROPERTIES
    NO_NAMESPACE false
@@ -70,8 +70,8 @@ set_source_files_properties(${statusnotifieritem_xml} PROPERTIES
 QT4_ADD_DBUS_INTERFACE(systemtray_SRCS ${statusnotifieritem_xml} statusnotifieritem_interface)
 
 kde4_add_plugin(plasma_applet_systemtray ${systemtray_SRCS})
-include_directories(${CMAKE_SOURCE_DIR})
-target_link_libraries(plasma_applet_systemtray ${KDE4_KDEUI_LIBS} ${KDE4_PLASMA_LIBS} ${X11_LIBRARIES} ${X11_Xrender_LIB} ${X11_Xfixes_LIB} ${X11_Xdamage_LIB} ${X11_Xcomposite_LIB} ${KDE4_SOLID_LIBS} ${IDLE_DETECTION_LIB})
+include_directories(${CMAKE_SOURCE_DIR} ${DBUSMENUQT_INCLUDE_DIR})
+target_link_libraries(plasma_applet_systemtray ${KDE4_KDEUI_LIBS} ${KDE4_PLASMA_LIBS} ${X11_LIBRARIES} ${X11_Xrender_LIB} ${X11_Xfixes_LIB} ${X11_Xdamage_LIB} ${X11_Xcomposite_LIB} ${KDE4_SOLID_LIBS} ${IDLE_DETECTION_LIB} ${DBUSMENUQT_LIBRARIES})
 
 install(TARGETS plasma_applet_systemtray DESTINATION ${PLUGIN_INSTALL_DIR})
 install(FILES plasma-applet-systemtray.desktop DESTINATION ${SERVICES_INSTALL_DIR})
diff --git a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.cpp b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.cpp
index 8ef34b5..100d847 100644
--- a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.cpp
+++ b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.cpp
@@ -47,7 +47,7 @@ void DBusSystemTrayProtocol::init()
     if (m_dbus.isConnected()) {
         QDBusConnectionInterface *dbusInterface = m_dbus.interface();
 
-        m_serviceName = "org.kde.StatusNotifierHost-" + QString::number(QCoreApplication::applicationPid());
+        m_serviceName = "org.freedesktop.StatusNotifierHost-" + QString::number(QCoreApplication::applicationPid());
         m_dbus.registerService(m_serviceName);
 
         //FIXME: understand why registerWatcher/unregisterWatcher doesn't work
@@ -58,7 +58,7 @@ void DBusSystemTrayProtocol::init()
         connect(dbusInterface, SIGNAL(serviceOwnerChanged(QString,QString,QString)),
                 this, SLOT(serviceChange(QString,QString,QString)));
 
-        registerWatcher("org.kde.StatusNotifierWatcher");
+        registerWatcher("org.freedesktop.StatusNotifierWatcher");
     }
 }
 
@@ -96,8 +96,8 @@ void DBusSystemTrayProtocol::cleanupTask(QString typeId)
 
 void DBusSystemTrayProtocol::initRegisteredServices()
 {
-    QString interface("org.kde.StatusNotifierWatcher");
-    org::kde::StatusNotifierWatcher statusNotifierWatcher(interface, "/StatusNotifierWatcher",
+    QString interface("org.freedesktop.StatusNotifierWatcher");
+    org::freedesktop::StatusNotifierWatcher statusNotifierWatcher(interface, "/StatusNotifierWatcher",
                                               QDBusConnection::sessionBus());
     if (statusNotifierWatcher.isValid()) {
         QStringList registeredItems = statusNotifierWatcher.property("RegisteredStatusNotifierItems").value<QStringList>();
@@ -113,7 +113,7 @@ void DBusSystemTrayProtocol::serviceChange(const QString& name,
                                            const QString& oldOwner,
                                            const QString& newOwner)
 {
-    if (name != "org.kde.StatusNotifierWatcher") {
+    if (name != "org.freedesktop.StatusNotifierWatcher") {
         return;
     }
 
@@ -131,13 +131,13 @@ void DBusSystemTrayProtocol::serviceChange(const QString& name,
 void DBusSystemTrayProtocol::registerWatcher(const QString& service)
 {
     kDebug()<<"service appeared"<<service;
-    if (service == "org.kde.StatusNotifierWatcher") {
-        QString interface("org.kde.StatusNotifierWatcher");
+    if (service == "org.freedesktop.StatusNotifierWatcher") {
+        QString interface("org.freedesktop.StatusNotifierWatcher");
         if (m_statusNotifierWatcher) {
             delete m_statusNotifierWatcher;
         }
 
-        m_statusNotifierWatcher = new org::kde::StatusNotifierWatcher(interface, "/StatusNotifierWatcher",
+        m_statusNotifierWatcher = new org::freedesktop::StatusNotifierWatcher(interface, "/StatusNotifierWatcher",
                                                                           QDBusConnection::sessionBus());
         if (m_statusNotifierWatcher->isValid() &&
             m_statusNotifierWatcher->property("ProtocolVersion").toBool() == s_protocolVersion) {
@@ -160,8 +160,8 @@ void DBusSystemTrayProtocol::registerWatcher(const QString& service)
 
 void DBusSystemTrayProtocol::unregisterWatcher(const QString& service)
 {
-    if (service == "org.kde.StatusNotifierWatcher") {
-        kDebug()<<"org.kde.StatusNotifierWatcher disappeared";
+    if (service == "org.freedesktop.StatusNotifierWatcher") {
+        kDebug()<<"org.freedesktop.StatusNotifierWatcher disappeared";
 
         disconnect(m_statusNotifierWatcher, SIGNAL(StatusNotifierItemRegistered(const QString&)), this, SLOT(serviceRegistered(const QString &)));
         disconnect(m_statusNotifierWatcher, SIGNAL(StatusNotifierItemUnregistered(const QString&)), this, SLOT(serviceUnregistered(const QString&)));
diff --git a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.h b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.h
index 0a2bf68..64f689a 100644
--- a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.h
+++ b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtrayprotocol.h
@@ -60,7 +60,7 @@ protected Q_SLOTS:
 private:
     QDBusConnection m_dbus;
     QHash<QString, DBusSystemTrayTask*> m_tasks;
-    org::kde::StatusNotifierWatcher *m_statusNotifierWatcher;
+    org::freedesktop::StatusNotifierWatcher *m_statusNotifierWatcher;
     QString m_serviceName;
     static const int s_protocolVersion = 0;
 };
diff --git a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraytask.cpp b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraytask.cpp
index 440d99a..367d854 100644
--- a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraytask.cpp
+++ b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraytask.cpp
@@ -21,6 +21,7 @@
 #include "dbussystemtraytask.h"
 
 #include <QDir>
+#include <QDBusObjectPath>
 #include <QGraphicsWidget>
 #include <QGraphicsSceneContextMenuEvent>
 #include <QIcon>
@@ -28,6 +29,7 @@
 
 #include <KIcon>
 #include <KIconLoader>
+#include <KStandardDirs>
 
 #include <plasma/plasma.h>
 #include <Plasma/Corona>
@@ -51,6 +53,7 @@ class DBusSystemTrayTaskPrivate
 public:
     DBusSystemTrayTaskPrivate(DBusSystemTrayTask *q)
         : q(q),
+          customIconLoader(0),
           movie(0),
           blinkTimer(0),
           blink(false),
@@ -83,8 +86,10 @@ public:
     void syncMovie(const QString &);
     void refreshCallback(QDBusPendingCallWatcher *call);
 
+    KIconLoader *iconLoader() { return customIconLoader ? customIconLoader : KIconLoader::global(); }
 
     DBusSystemTrayTask *q;
+    KIconLoader *customIconLoader;
     QString typeId;
     QString name;
     QString title;
@@ -94,14 +99,14 @@ public:
     QTimer *blinkTimer;
     QHash<Plasma::Applet *, Plasma::IconWidget *>iconWidgets;
     Plasma::ToolTipContent toolTipData;
-    org::kde::StatusNotifierItem *statusNotifierItemInterface;
+    org::freedesktop::StatusNotifierItem *statusNotifierItemInterface;
     bool blink : 1;
     bool valid : 1;
     bool embeddable : 1;
 };
 
 
-DBusSystemTrayTask::DBusSystemTrayTask(const QString &service, QObject *parent)
+DBusSystemTrayTask::DBusSystemTrayTask(const QString &notifierItemId, QObject *parent)
     : Task(parent),
       d(new DBusSystemTrayTaskPrivate(this))
 {
@@ -110,10 +115,21 @@ DBusSystemTrayTask::DBusSystemTrayTask(const QString &service, QObject *parent)
     qDBusRegisterMetaType<KDbusImageVector>();
     qDBusRegisterMetaType<KDbusToolTipStruct>();
 
-    d->typeId = service;
-    d->name = service;
+    d->typeId = notifierItemId;
+    d->name = notifierItemId;
 
-    d->statusNotifierItemInterface = new org::kde::StatusNotifierItem(service, "/StatusNotifierItem",
+    int slash = notifierItemId.indexOf('/');
+    if (slash == -1) {
+        kError() << "Invalid notifierItemId:" << notifierItemId;
+        d->valid = false;
+        d->statusNotifierItemInterface = 0;
+        return;
+    }
+    QString service = notifierItemId.left(slash);
+    QString path = notifierItemId.mid(slash);
+    kDebug() << service << path;
+
+    d->statusNotifierItemInterface = new org::freedesktop::StatusNotifierItem(service, path,
                                                                   QDBusConnection::sessionBus(), this);
 
     //TODO: how to behave if its not valid?
@@ -218,6 +234,30 @@ void DBusSystemTrayTaskPrivate::refreshCallback(QDBusPendingCallWatcher *call)
         valid = false;
         embeddable = false;
     } else {
+        //IconThemePath (handle this one first, because it has an impact on
+        //others)
+        if (!customIconLoader) {
+            QString path = properties["IconThemePath"].toString();
+            if (!path.isEmpty()) {
+                // FIXME: If last part of path is not "icons", this won't work!
+                QStringList tokens = path.split('/', QString::SkipEmptyParts);
+                if (tokens.length() >= 3 && tokens.takeLast() == "icons") {
+                    QString appName = tokens.takeLast();
+                    QString prefix = '/' + tokens.join("/");
+                    // FIXME: Fix KIconLoader and KIconTheme so that we can use
+                    // our own instance of KStandardDirs
+                    KGlobal::dirs()->addResourceDir("data", prefix);
+                    // We use a separate instance of KIconLoader to avoid
+                    // adding all application dirs to KIconLoader::global(), to
+                    // avoid potential icon name clashes between application
+                    // icons
+                    customIconLoader = new KIconLoader(appName, 0 /* dirs */, q);
+                } else {
+                    kWarning() << "Wrong IconThemePath" << path << ": too short or does not end with 'icons'";
+                }
+            }
+        }
+
         QString cat = properties["Category"].toString();
         if (!cat.isEmpty()) {
             int index = q->metaObject()->indexOfEnumerator("Category");
@@ -256,7 +296,7 @@ void DBusSystemTrayTaskPrivate::refreshCallback(QDBusPendingCallWatcher *call)
                 QString iconName = properties["OverlayIconName"].toString();
                 if (!iconName.isEmpty()) {
                     overlayNames << iconName;
-                    overlay = KIcon(iconName);
+                    overlay = KIcon(iconName, iconLoader());
                 }
             } else {
                 overlay = imageVectorToPixmap(image);
@@ -266,7 +306,7 @@ void DBusSystemTrayTaskPrivate::refreshCallback(QDBusPendingCallWatcher *call)
             if (image.isEmpty()) {
                 QString iconName = properties["IconName"].toString();
                 if (!iconName.isEmpty()) {
-                    icon = KIcon(iconName, 0, overlayNames);
+                    icon = KIcon(iconName, iconLoader(), overlayNames);
 
                     if (overlayNames.isEmpty() && !overlay.isNull()) {
                         overlayIcon(&icon, &overlay);
@@ -296,7 +336,7 @@ void DBusSystemTrayTaskPrivate::refreshCallback(QDBusPendingCallWatcher *call)
             if (image.isEmpty()) {
                 QString iconName = properties["AttentionIconName"].toString();
                 if (!iconName.isEmpty()) {
-                    attentionIcon = KIcon(iconName, 0, overlayNames);
+                    attentionIcon = KIcon(iconName, iconLoader(), overlayNames);
 
                     if (overlayNames.isEmpty() && !overlay.isNull()) {
                         overlayIcon(&attentionIcon, &overlay);
@@ -317,6 +357,23 @@ void DBusSystemTrayTaskPrivate::refreshCallback(QDBusPendingCallWatcher *call)
         properties["ToolTip"].value<QDBusArgument>() >> toolTip;
         syncToolTip(toolTip);
 
+        //Menu
+        {
+            QVariant var = properties["Menu"];
+            QString path;
+            if (var.canConvert<QString>()) {
+                kWarning() << "Menu defined as a string instead of an object path!";
+                path = var.toString();
+            } else {
+                QDBusObjectPath objectPath = var.value<QDBusObjectPath>();
+                path = objectPath.path();
+            }
+
+            foreach (Plasma::IconWidget *iconWidget, iconWidgets) {
+                static_cast<DBusSystemTrayWidget *>(iconWidget)->setMenuObjectPath(path);
+            }
+        }
+
         embeddable = true;
     }
 
@@ -449,7 +506,7 @@ void DBusSystemTrayTaskPrivate::syncToolTip(const KDbusToolTipStruct &tipStruct)
 
     QIcon toolTipIcon;
     if (tipStruct.image.size() == 0) {
-        toolTipIcon = KIcon(tipStruct.icon);
+        toolTipIcon = KIcon(tipStruct.icon, iconLoader());
     } else {
         toolTipIcon = imageVectorToPixmap(tipStruct.image);
     }
diff --git a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.cpp b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.cpp
index df1b903..4400d54 100644
--- a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.cpp
+++ b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.cpp
@@ -20,22 +20,54 @@
 #include "dbussystemtraywidget.h"
 
 #include <QDBusAbstractInterface>
+#include <QDBusInterface>
+#include <QEventLoop>
 #include <QGraphicsSceneWheelEvent>
+#include <QMenu>
 
+#include <KIconLoader>
 #include <Plasma/Containment>
 #include <Plasma/Corona>
 
+#include <dbusmenuimporter.h>
+
+static const char* DBUSMENU_INTERFACE = "org.ayatana.dbusmenu";
+
 namespace SystemTray
 {
 
+class PlasmaDBusMenuImporter : public DBusMenuImporter
+{
+public:
+    PlasmaDBusMenuImporter(QDBusAbstractInterface *interface, QObject *parent)
+    : DBusMenuImporter(interface, parent)
+    {}
+
+protected:
+    virtual QMenu *createMenu(QWidget *parent)
+    {
+        return new QMenu(parent);
+    }
+
+    virtual QIcon iconForName(const QString &name)
+    {
+        return SmallIcon(name);
+    }
+};
+
 DBusSystemTrayWidget::DBusSystemTrayWidget(Plasma::Applet *parent, QDBusAbstractInterface *iface)
     : Plasma::IconWidget(parent),
       m_iface(iface),
-      m_host(parent)
+      m_host(parent),
+      m_importer(0)
 {
     connect(this, SIGNAL(clicked()), this, SLOT(calculateShowPosition()));
 }
 
+DBusSystemTrayWidget::~DBusSystemTrayWidget()
+{
+}
+
 void DBusSystemTrayWidget::mousePressEvent(QGraphicsSceneMouseEvent *event)
 {
     Plasma::IconWidget::mousePressEvent(event);
@@ -65,6 +97,23 @@ void DBusSystemTrayWidget::wheelEvent(QGraphicsSceneWheelEvent *event)
 void DBusSystemTrayWidget::contextMenuEvent(QGraphicsSceneContextMenuEvent *event)
 {
     if (m_iface) {
+        KConfigGroup cg = m_host->config();
+        bool useDBusMenu = cg.readEntry("UseDBusMenu", true);
+        kDebug() << "UseDBusMenu:" << useDBusMenu;
+
+        if (useDBusMenu) {
+            if (m_importer) {
+                showDBusMenu();
+                return;
+            }
+            QDBusAbstractInterface *menuIface = findDBusMenuInterface();
+            if (menuIface) {
+                m_importer = new PlasmaDBusMenuImporter(menuIface, this);
+                connect(m_importer, SIGNAL(menuIsReady()), SLOT(showDBusMenu()));
+                return;
+            }
+            kDebug() << "Could not find DBusMenu interface, falling back to calling ContextMenu()";
+        }
         m_iface.data()->call(QDBus::NoBlock, "ContextMenu", event->screenPos().x(), event->screenPos().y());
     }
 }
@@ -79,5 +128,48 @@ void DBusSystemTrayWidget::calculateShowPosition()
     }
 }
 
+QDBusAbstractInterface *DBusSystemTrayWidget::findDBusMenuInterface()
+{
+    if (!m_iface) {
+        // Should not happen
+        return 0;
+    }
+    kDebug() << m_iface.data()->service();
+
+    if (m_menuObjectPath.isEmpty()) {
+        kWarning() << "No menu defined";
+        return 0;
+    }
+
+    QScopedPointer<QDBusAbstractInterface> iface(new QDBusInterface(m_iface.data()->service(), m_menuObjectPath, DBUSMENU_INTERFACE, m_iface.data()->connection()));
+    if (!iface->isValid()) {
+        return 0;
+    }
+    return iface.take();
+}
+
+void DBusSystemTrayWidget::showDBusMenu()
+{
+    QMenu *menu = m_importer->menu();
+    if (!menu) {
+        kWarning() << "No menu ready";
+        return;
+    }
+
+    Plasma::Corona *corona = m_host->containment()->corona();
+    QPoint pos = corona->popupPosition(this, menu->sizeHint());
+
+    QTime chrono;
+    chrono.start();
+    kDebug() << "Showing popup";
+    menu->popup(pos);
+    kDebug() << "Menu popup:" << chrono.elapsed() << "ms";
+}
+
+void DBusSystemTrayWidget::setMenuObjectPath(const QString &value)
+{
+    m_menuObjectPath = value;
+}
+
 }
 
diff --git a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.h b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.h
index b111b85..e079521 100644
--- a/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.h
+++ b/plasma/generic/applets/systemtray/protocols/dbussystemtray/dbussystemtraywidget.h
@@ -30,6 +30,9 @@ namespace Plasma
 }
 
 class QDBusAbstractInterface;
+class QTreeView;
+
+class DBusMenuImporter;
 
 namespace SystemTray
 {
@@ -40,6 +43,9 @@ class DBusSystemTrayWidget : public Plasma::IconWidget
 
 public:
     DBusSystemTrayWidget(Plasma::Applet *parent, QDBusAbstractInterface *iface);
+    ~DBusSystemTrayWidget();
+
+    void setMenuObjectPath(const QString &);
 
 Q_SIGNALS:
     void clicked(const QPoint &pos);
@@ -52,10 +58,17 @@ protected:
 
 private Q_SLOTS:
     void calculateShowPosition();
+    void showDBusMenu();
 
 private:
     QWeakPointer<QDBusAbstractInterface> m_iface;
     Plasma::Applet *m_host;
+
+    DBusMenuImporter *m_importer;
+
+    QString m_menuObjectPath;
+
+    QDBusAbstractInterface *findDBusMenuInterface();
 };
 
 }
diff --git a/plasma/generic/applets/systemtray/statusnotifierwatcher/CMakeLists.txt b/plasma/generic/applets/systemtray/statusnotifierwatcher/CMakeLists.txt
index 35c04b9..e1c4792 100644
--- a/plasma/generic/applets/systemtray/statusnotifierwatcher/CMakeLists.txt
+++ b/plasma/generic/applets/systemtray/statusnotifierwatcher/CMakeLists.txt
@@ -2,11 +2,11 @@ project(StatusNotifierWatcher)
 
 set(kded_statusnotifierwatcher_SRCS statusnotifierwatcher.cpp )
 
-QT4_ADD_DBUS_ADAPTOR(kded_statusnotifierwatcher_SRCS     ${KDE4_DBUS_INTERFACES_DIR}/org.kde.StatusNotifierWatcher.xml
+QT4_ADD_DBUS_ADAPTOR(kded_statusnotifierwatcher_SRCS     ${KDE4_DBUS_INTERFACES_DIR}/org.freedesktop.StatusNotifierWatcher.xml
                      statusnotifierwatcher.h StatusNotifierWatcher)
 
 
-set(statusnotifieritem_xml ${KDE4_DBUS_INTERFACES_DIR}/org.kde.StatusNotifierItem.xml)
+set(statusnotifieritem_xml ${KDE4_DBUS_INTERFACES_DIR}/org.freedesktop.StatusNotifierItem.xml)
 set_source_files_properties(${statusnotifieritem_xml} PROPERTIES
    NO_NAMESPACE false
    INCLUDE "../protocols/dbussystemtray/systemtraytypes.h"
diff --git a/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.cpp b/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.cpp
index 3e812e2..23801b9 100644
--- a/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.cpp
+++ b/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.cpp
@@ -47,7 +47,7 @@ StatusNotifierWatcher::StatusNotifierWatcher(QObject *parent, const QList<QVaria
     setModuleName("StatusNotifierWatcher");
     new StatusNotifierWatcherAdaptor(this);
     QDBusConnection dbus = QDBusConnection::sessionBus();
-    dbus.registerService("org.kde.StatusNotifierWatcher");
+    dbus.registerService("org.freedesktop.StatusNotifierWatcher");
     dbus.registerObject("/StatusNotifierWatcher", this);
     m_dbusInterface = dbus.interface();
 
@@ -58,22 +58,32 @@ StatusNotifierWatcher::StatusNotifierWatcher(QObject *parent, const QList<QVaria
 StatusNotifierWatcher::~StatusNotifierWatcher()
 {
     QDBusConnection dbus = QDBusConnection::sessionBus();
-    dbus.unregisterService("org.kde.StatusNotifierWatcher");
+    dbus.unregisterService("org.freedesktop.StatusNotifierWatcher");
 }
 
 
-void StatusNotifierWatcher::RegisterStatusNotifierItem(const QString &service)
+void StatusNotifierWatcher::RegisterStatusNotifierItem(const QString &serviceOrPath)
 {
+    QString service;
+    QString path;
+    if (serviceOrPath.startsWith('/')) {
+        service = message().service();
+        path = serviceOrPath;
+    } else {
+        service = serviceOrPath;
+        path = "/StatusNotifierItem";
+    }
+    QString notifierItemId = service + path;
     if (m_dbusInterface->isServiceRegistered(service).value() &&
-        !m_registeredServices.contains(service)) {
-        kDebug()<<"Registering"<<service<<"to system tray";
+        !m_registeredServices.contains(notifierItemId)) {
+        kDebug()<<"Registering" << notifierItemId << "to system tray";
 
         //check if the service has registered a SystemTray object
-        org::kde::StatusNotifierItem trayclient(service, "/StatusNotifierItem",
+        org::freedesktop::StatusNotifierItem trayclient(service, path,
                                         QDBusConnection::sessionBus());
         if (trayclient.isValid()) {
-            m_registeredServices.append(service);
-            emit StatusNotifierItemRegistered(service);
+            m_registeredServices.append(notifierItemId);
+            emit StatusNotifierItemRegistered(notifierItemId);
         }
     }
 }
@@ -92,9 +102,16 @@ void StatusNotifierWatcher::serviceChange(const QString& name,
     //kDebug()<<"Service "<<name<<"status change, old owner:"<<oldOwner<<"new:"<<newOwner;
 
     if (newOwner.isEmpty()) {
-        if (m_registeredServices.contains(name)) {
-            m_registeredServices.removeAll(name);
-            emit StatusNotifierItemUnregistered(name);
+        QString match = name + '/';
+        QStringList::Iterator it = m_registeredServices.begin();
+        while (it != m_registeredServices.end()) {
+            if (it->startsWith(match)) {
+                QString name = *it;
+                it = m_registeredServices.erase(it);
+                emit StatusNotifierItemUnregistered(name);
+            } else {
+                ++it;
+            }
         }
 
         if (m_statusNotifierHostServices.contains(name)) {
@@ -105,7 +122,7 @@ void StatusNotifierWatcher::serviceChange(const QString& name,
 
 void StatusNotifierWatcher::RegisterStatusNotifierHost(const QString &service)
 {
-    if (service.contains("org.kde.StatusNotifierHost-") &&
+    if (service.contains("org.freedesktop.StatusNotifierHost-") &&
         m_dbusInterface->isServiceRegistered(service).value() &&
         !m_statusNotifierHostServices.contains(service)) {
         kDebug()<<"Registering"<<service<<"as system tray";
diff --git a/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.h b/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.h
index 6818eef..012a790 100644
--- a/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.h
+++ b/plasma/generic/applets/systemtray/statusnotifierwatcher/statusnotifierwatcher.h
@@ -22,13 +22,14 @@
 
 #include <kdedmodule.h>
 
+#include <QDBusContext>
 #include <QObject>
 #include <QStringList>
 #include <QSet>
 
 class QDBusConnectionInterface;
 
-class StatusNotifierWatcher : public KDEDModule
+class StatusNotifierWatcher : public KDEDModule, protected QDBusContext
 {
     Q_OBJECT
     Q_PROPERTY(QStringList RegisteredStatusNotifierItems READ RegisteredStatusNotifierItems)
