class Nvidia(CPackageRecipe):

    name = 'nvidia'
    version = '100.14.03'

    buildRequires = ['atk:devel', 'chkconfig:runtime', 'glib:devel',
                     'gtk:devel', 'libX11:devel', 'libXext:devel',
                     'pango:devel', 'desktop-file-utils:runtime',]

    def setup(r):

        if Arch.x86:
            r.macros.arch = 'x86'
        else:
            r.macros.arch = 'x86_64'

        r.macros.url = 'http://download.nvidia.com/XFree86/Linux-%(arch)s'
        r.addSource('%(url)s/%(version)s/NVIDIA-Linux-%(arch)s-%(version)s-pkg0.run')
        r.addSource('nvidia.init')

        r.Run('sh NVIDIA-Linux-%(arch)s-%(version)s-pkg0.run -x') # Extract only

        # Copy the files we need
        r.macros.root = 'NVIDIA-Linux-%(arch)s-%(version)s-pkg0/usr'

        r.Install('%(root)s/lib/*.s*', '%(libdir)s/')
        r.Install('%(root)s/lib/tls/*.s*','%(libdir)s/tls/')

        r.Install('%(root)s/share/man/man1/*', '%(datadir)s/man/man1/')
        r.Remove('/man/man1/nvidia-installer.1.gz')

        r.Install('%(root)s/share/doc/*','%(datadir)s/doc/')

        r.Install('%(root)s/X11R6/lib/lib*', '%(libdir)s/')

        r.Run("""
	 sed -i %(root)s/share/applications/nvidia-settings.desktop  -e "s,__PIXMAP_PATH__,%(datadir)s/pixmaps,g" -e "s,__UTILS_PATH__,%(bindir)s,g"	-e "s,__DOCS_PATH__,%(datadir)s/pixmaps,g"
	 sed -i %(root)s/share/applications/nvidia-settings.desktop -e "s/Application;/GNOME;/g" 
	""")

        r.Desktopfile('%(root)s/share/applications/nvidia-settings.desktop')

        r.Install('%(root)s/share/pixmaps/nvidia-settings.png','%(datadir)s/pixmaps/')

        r.Install('%(root)s/X11R6/lib/modules/drivers/*','%(libdir)s/xorg/modules/drivers/')

        r.Install('%(root)s/X11R6/lib/modules/extensions/*',
                  '%(libdir)s/xorg/modules/extensions/')

        r.MakeDirs('%(bindir)s')
        r.Install('%(root)s/bin/nvidia-{settings,xconfig,bug-report.sh}',
                  '%(bindir)s')


        # magic
        # wrapper to handle transparently closed gfx drivers (ATI/NVidia)
        r.Move('%(libdir)s/libGL.so.%(version)s', '%(libdir)s/libGL.so.1.nvidia')
        r.Move('%(libdir)s/libGLcore.so.%(version)s', '%(libdir)s/libGLcore.so.nvidia')
        r.Move('%(libdir)s/xorg/modules/extensions/libglx.so.%(version)s',
                  '%(libdir)s/xorg/modules/extensions/libglx.so.nvidia')

        r.ComponentSpec(':lib.hidden', '%(libdir)s/libGL.so.1')
        r.ComponentSpec(':lib.hidden', '%(libdir)s/libGLcore.so.1')
        r.ComponentSpec(':lib.hidden', '%(libdir)s/xorg/modules/extensions/libglx.so')
        r.ByDefault(exceptions=[':lib.hidden'])

        r.SharedLibrary(subtrees='%(libdir)s/xorg/modules/extensions/')
        r.SharedLibrary(subtrees='%(libdir)s/xorg/modules/drivers/')
        r.SharedLibrary(subtrees='%(libdir)s')
        r.SharedLibrary(subtrees='%(libdir)s/tls')
        r.ComponentSpec('lib', 'libglx.so')
        r.ComponentSpec('lib', 'libXvMCNVIDIA.a')

        # The kernel side is in nvidia-kernel, and we need the kernel
        # modules that match this version exactly
        r.Requires('nvidia-kernel:runtime(%(version)s)',
                   '%(libdir)s/xorg/modules/drivers/nvidia_drv.o')

        # We want to make sure that the kernel module can require the
        # matching userspace code
        r.ComponentProvides('%(version)s')

        r.Install('nvidia.init','%(initdir)s/nvidia')


