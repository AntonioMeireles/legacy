class Nvidia(CPackageRecipe):

    name = 'nvidia'
    version = '190.42'

    buildRequires = ['atk:devel', 'chkconfig:runtime', 'glib:devel',
                     'gtk:devel', 'libX11:devel', 'libXext:devel',
                     'pango:devel', 'desktop-file-utils:runtime',
                     'zlib:devel'
                     ]
    if Arch.x86_64:
        # get rid of rMake warnings in x86_64
        buildRequires.extend([ 'libX11:lib[is: x86]', 'libXext:lib[is: x86]',])

    def setup(r):

        if Arch.x86:
            r.macros.arch = 'x86'
            r.macros.nvVersionSuffix = '1'
        else:
            r.macros.arch = 'x86_64'
            r.macros.lib32 = '/usr/lib'
            r.FixupMultilibPaths(exceptions='.*')
            r.macros.nvVersionSuffix = '2'

        # r.macros.url = 'http://us.download.nvidia.com/XFree86/Linux-%(arch)s'
        r.macros.url = 'http://download.nvidia.com/XFree86/Linux-%(arch)s'
        r.addSource('%(url)s/%(version)s/NVIDIA-Linux-%(arch)s-%(version)s-pkg%(nvVersionSuffix)s.run')

        r.addSource('nvidia.init')
        r.addSource('nvidia.opts', dest = '%(sysconfdir)s/modprobe.d/nvidia')

        r.addAction('sh NVIDIA-Linux-%(arch)s-%(version)s-pkg%(nvVersionSuffix)s.run -x') # Extract only

        # Copy the files we need
        r.macros.root = 'NVIDIA-Linux-%(arch)s-%(version)s-pkg%(nvVersionSuffix)s/usr'

        #
        r.Install('%(root)s/bin/nvidia-{smi,settings,xconfig,bug-report.sh}',
                  '%(bindir)s/')

        # headers
        # moved to  '%(includedir)s/nvidia'
        # to avoid clashes with Mesa stock GL headers
        r.Install('%(root)s/include/*', '%(includedir)s/nvidia/')

        # libs

        r.Install('%(root)s/lib/libnvidia*', '%(libdir)s/')
        r.Install('%(root)s/lib/libcuda.s*', '%(libdir)s/')
        r.Install('%(root)s/lib/libvdp*', '%(libdir)s/')

        r.Install('%(root)s/lib/tls/lib*', '%(libdir)s/xorg.nvidia.3d/tls/')

        if Arch.x86_64:
            r.Install('%(root)s/lib32/libnvidia*', '%(lib32)s/')
            r.Install('%(root)s/lib32/libcuda*', '%(lib32)s/')
            r.Install('%(root)s/lib32/libvdp*', '%(lib32)s/')
            r.Install('%(root)s/lib32/tls/lib*', '%(lib32)s/xorg.nvidia.3d/tls/')

        #
        r.Install('%(root)s/X11R6/lib/libXvMCNVIDIA.so.*', '%(libdir)s/xorg.nvidia.3d/')

        r.Install('%(root)s/X11R6/lib/modules/libnvidia-wfb.s*', '%(libdir)s/xorg/modules/updates/')

        r.Install('%(root)s/X11R6/lib/modules/extensions/libglx.s*', '%(libdir)s/xorg/modules/updates/extensions/')
        r.Install('%(root)s/X11R6/lib/modules/drivers/nvidia_drv.s*', '%(libdir)s/xorg/modules/updates/drivers/')

        r.Install('%(root)s/lib/libGL*.so.*', '%(libdir)s/xorg.nvidia.3d/')

        if Arch.x86_64:
            r.Install('%(root)s/lib32/libGL*.so.*', '%(lib32)s/xorg.nvidia.3d/')

        r.Install('%(root)s/share/man/man1/*', '%(datadir)s/man/man1/')
        r.Remove('%(destdir)s/%(datadir)s/man/man1/nvidia-installer*')

        r.Install('%(root)s/share/doc/*', '%(datadir)s/doc/')

        # sanitize .desktop file
        r.Replace(('__PIXMAP_PATH__','%(datadir)s/pixmaps'),
                  ('__UTILS_PATH__','%(bindir)s'),
                  ('__DOCS_PATH__','%(datadir)s/pixmaps'),
                  ('Exec=','Exec=gksudo '),
                  '%(root)s/share/applications/nvidia-settings.desktop')
        r.Replace('Application;','GNOME;', '%(root)s/share/applications/nvidia-settings.desktop')

        r.Desktopfile('%(root)s/share/applications/nvidia-settings.desktop')

        r.Install('%(root)s/share/pixmaps/nvidia-settings.png', '%(datadir)s/pixmaps/')

        r.SharedLibrary(subtrees='%(libdir)s/xorg/modules/updates/')
        r.SharedLibrary(subtrees='%(libdir)s/xorg/modules/updates/extensions/')
        r.SharedLibrary(subtrees='%(libdir)s/xorg/modules/updates/drivers/')

        r.SharedLibrary(subtrees='%(libdir)s/xorg.nvidia.3d')
        r.SharedLibrary(subtrees='%(libdir)s/xorg.nvidia.3d/tls')

        if Arch.x86_64:
            r.SharedLibrary(subtrees='%(lib32)s/xorg.nvidia.3d')
            r.SharedLibrary(subtrees='%(lib32)s/xorg.nvidia.3d/tls')	

        r.ComponentSpec('lib', 'libglx.so')
        r.ComponentSpec('lib', 'libXvMCNVIDIA.a')

        # The kernel side is in nvidia-kernel, and we need the kernel
        # modules that match this version exactly
        r.Requires('nvidia-kernel:runtime(%(version)s)', 
                   '%(libdir)s/xorg/modules/updates/drivers/nvidia_drv.so')

        # nvidia-kernel expects :lib
        # we need to make :lib _require_ explictly :runtime and :config
        # otherwise ppl installing nvidia-kerbel thru pkgKit will get broken
        # setups (with no nvidia-xconfig)

        r.Requires('nvidia:runtime', '%(libdir)s/xorg/modules/updates/drivers/nvidia_drv.so')
        r.Requires('nvidia:config', '%(libdir)s/xorg/modules/updates/drivers/nvidia_drv.so')

        # We want to make sure that the kernel module can require the
        # matching userspace code
        r.ComponentProvides('%(version)s')

        r.Install('nvidia.init', '%(initdir)s/nvidia')

        # conary some times it's too smart for its own good...

        # no :data
        r.ComponentSpec('runtime', '%(datadir)s/pixmaps/.*')
        r.ComponentSpec('runtime', '%(datadir)s/applications/.*')

        # we want Mesa's libGL to be used for dep resolution, as that one is installed on all user's boxes, 
        # and should be the one that goes into _all_ rMake chroots. 
        r.Provides(exceptions='.*')
        r.EnforceSonameBuildRequirements(exceptions='.*')

        if Arch.x86_64:
            r.Requires(exceptDeps=r'soname\:\ ELF64\/libnvidia\-tls\.so\.1\(SysV\ x86\_64\)')
            r.Requires(exceptDeps=r'soname\:\ ELF64\/libGLcore\.so\.1\(SysV\ x86\_64\)')

        r.Requires(exceptDeps=r'soname\:\ ELF32\/libnvidia\-tls\.so\.1\(SysV\ x86\)')
        r.Requires(exceptDeps=r'soname\:\ ELF32\/libGLcore\.so\.1\(SysV\ x86\)')

