#
# Copyright (c) 2004-2006 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadInstalled('python')
class Conary(CPackageRecipe):
    name = "conary"
    version = "1.1.6"

    buildRequires = [ ]
    if Use.bootstrap:
        clearBuildReqs()
    else:
        buildRequires.extend(['kid:runtime', 'kid:python', ])
    buildRequires.extend([ 'python:devel', 'python:lib', 'elementtree:python',
        'libelf:devel', 'sqlite:devel', 'pycrypto:python', 'elfutils:devel', ])

    def setup(r):
        r.addArchive('ftp://download.rpath.com/conary/')

        if Use.bootstrap:
            r.macros.pyver = Python.majversion
            # distutils needs LDSHARED to get its linking correct.
            # PYVERSION and PYINCLUDE tell conary to find python in the
            # sysroot instead of trusting the installted python for info.
            conf = ' PYVERSION=%(pyver)s PYINCLUDE=%(sysroot)s/%(includedir)s/python%(pyver)s LDSHARED="%(cc)s -pthread -shared"'

            r.Replace('setup.py build', 'setup.py build_py build_ext -I%(sysroot)s/%(includedir)s/python%(pyver)s', 'conary/pysqlite3/Makefile')
        else:
            conf = ''

        r.Make('libdir=%(libdir)s' + conf)
        r.MakeInstall('libdir=%(libdir)s')
        r.Create('%(sysconfdir)s/conaryrc',
                 contents='includeConfigFile %(sysconfdir)s/conary/config.d/*\n')
        r.MakeDirs('%(sysconfdir)s/conary/config.d/')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/conary/config.d')

        r.MakeDirs('%(localstatedir)s/conary/emerge')
        r.Ownership('emerge', 'emerge', '%(localstatedir)s/conary/emerge')
        r.ExcludeDirectories(exceptions='%(localstatedir)s/conary/emerge')

        r.Create('%(sysconfdir)s/logrotate.d/conary',
                 contents='\n'.join(('/var/log/conary {',
                                     '    missingok',
                                     '    notifempty',
                                     '    size 10M',
                                     '}',
                                     )))

        # FIXME: refactor commonly used build code into new generic modules
        r.PackageSpec('conary',
                      '%(libdir)s/.*/conary/build/__init__.py.*',
                      '%(libdir)s/.*/conary/build/errors.py.*',
                      '%(libdir)s/.*/conary/build/filter.py.*',
                      '%(libdir)s/.*/conary/build/loadrecipe.py.*',
                      '%(libdir)s/.*/conary/build/nextversion.py.*',
                      '%(libdir)s/.*/conary/build/recipe.py.*',
                      '%(libdir)s/.*/conary/build/tags.py.*',
                      '%(libdir)s/.*/conary/build/use.py.*')
        r.PackageSpec('conary-repository',
                      '%(libdir)s/.*/conary/repository/netrepos/',
                      r'%(libdir)s/.*/conary/repository/shimclient\.py.*',
                      '%(libdir)s/.*/conary/web/',
                      '%(libdir)s/.*/conary/server/',
                      '%(datadir)s/conary/logcat')
        r.PackageSpec('conary-build',
                      '%(bindir)s/cvc(|desc)',
                      r'%(libdir)s/.*/conary/cvc(|desc)\.py.*',
                      '%(mandir)s/.*/cvc.*',
                      '%(libdir)s/.*/conary/build/',
                      r'%(libdir)s/.*/conary/(checkin|clone|branch)\.py.*',
                      '%(libdir)s/conary/',
                      '%(libexecdir)s/conary/perlreqs.pl',
                      '%(localstatedir)s/conary/emerge', #/var/conary for emerge
                      '%(sysconfdir)s/conary/mirrors/',
                      )
        # keyrings are binary, and we are providing the initial version
        # only
        r.InitialContents('%(sysconfdir)s/conary/.*gpg')

        r.Requires('sqlite:lib(addcolumn threadsafe)', '%(bindir)s/.*')

        r.Requires('conary-policy:lib',
                   '%(libdir)s/.*/conary/build/packagepolicy.py')

        # Conary pieces need to work together with the same version
        r.ComponentProvides('%(version)s')
        r.Requires('conary:runtime(%(version)s)',
                   '%(libdir)s/.*/conary/cvc.py')
        r.Requires('conary:runtime(%(version)s)',
                   '%(libdir)s/.*/conary/server/server.py')
        r.Requires('conary:python(%(version)s)',
                   '%(bindir)s/conary')

        r.UtilizeUser('emerge', '%(libdir)s/.*/conary/cvc.py')
        # emerge really requires all of conary-build, so if
        # it moves to cvc we can remove this whiteout
        r.Requires(exceptDeps=('%(bindir)s/conary',
                               'python: conary.build.cook'))

        # This exception needs to be here in order to bootstrap perl;
        # if we don't have perl, we won't be using this file or those
        # modules anyway.
        r.Requires(exceptions='%(libexecdir)s/conary/perlreqs.pl')
        r.Requires(exceptDeps='perl:.*')
        # We use embedded epdb if epdb is not installed
        r.Requires(exceptDeps='python: epdb')
        # Server works in standalone mode without mod_python
        r.Requires(exceptDeps='python: mod_python.*')

        # MySQL is optional.
        r.Requires(exceptDeps='python: MySQLdb.*')
        # postgresql is also optional
        r.Requires(exceptDeps='python: pgdb')

        # python:readline is only needed for dbsh and epdb
        if Use.bootstrap:
            r.Requires(exceptDeps='python: readline')

        # bootstrap Conary is never used as a repository server, so
        # we can get along without kid
        if Use.bootstrap:
            r.Requires(exceptDeps='python: kid')
