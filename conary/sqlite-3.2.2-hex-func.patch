--- sqlite-3.2.2/src/func.c~	2005-06-07 09:39:09.000000000 -0400
+++ sqlite-3.2.2/src/func.c	2005-06-23 15:04:02.000000000 -0400
@@ -607,6 +607,40 @@
   }
 }
 
+/*
+** EXPERIMENTAL - This is not an official function.  The interface may
+** change.  This function may disappear.  Do not write code that depends
+** on this function.
+**
+** Implementation of the HEX() function.  This function takes a single
+** argument.  It treats the argument as a blob returns a string in
+** hexadecimal notation that represents the argument.
+*/
+static void hexFunc(sqlite3_context *context, int argc, sqlite3_value **argv){
+  if( argc<1 ) return;
+  static const char hexdigits[] = { 
+      '0', '1', '2', '3', '4', '5', '6', '7',
+      '8', '9', 'a', 'b', 'c', 'd', 'e', 'f' 
+  };
+  char *zText = 0;
+  int nBlob = sqlite3_value_bytes(argv[0]);
+  char const *zBlob = sqlite3_value_blob(argv[0]);
+
+  zText = (char *)sqliteMalloc((2*nBlob) + 1); 
+  if( !zText ){
+    sqlite3_result_error(context, "out of memory", -1);
+  }else{
+    int i;
+    for(i=0; i<nBlob; i++){
+      zText[(i*2)] = hexdigits[(zBlob[i]>>4)&0x0F];
+      zText[(i*2)+1] = hexdigits[(zBlob[i])&0x0F];
+    }
+    zText[(nBlob*2)+1] = '\0';
+    sqlite3_result_text(context, zText, -1, SQLITE_TRANSIENT);
+    sqliteFree(zText);
+  }
+}
+
 #ifdef SQLITE_SOUNDEX
 /*
 ** Compute the soundex encoding of a word.
@@ -968,6 +1002,7 @@
     { "nullif",             2, 0, SQLITE_UTF8,    1, nullifFunc },
     { "sqlite_version",     0, 0, SQLITE_UTF8,    0, versionFunc},
     { "quote",              1, 0, SQLITE_UTF8,    0, quoteFunc  },
+    { "hex",                1, 0, SQLITE_UTF8,    0, hexFunc  },
     { "last_insert_rowid",  0, 1, SQLITE_UTF8,    0, last_insert_rowid },
     { "changes",            0, 1, SQLITE_UTF8,    0, changes    },
     { "total_changes",      0, 1, SQLITE_UTF8,    0, total_changes },
