#
# Copyright (c) 2004-2005 Specifix, Inc.
# All rights reserved
#
# Edited by Jonathan Schemoul for Foresight Desktop Linux
#


class Httpd(PackageRecipe):

    buildRequires = [ 'db:devel', 'expat:devel', 'findutils:runtime',
		      'perl:runtime', 'pkgconfig:devel', 
		      'xmlto:runtime',  # >=0.0.11
		      'apr:devel', # >= 0.9.3-10
		      'apr-util:devel', 'pcre:devel',
		      'distcache:devel', 'ed:runtime',
		      'openldap:devel' ]
    
    name = 'httpd'
    version = '2.0.52'

    def setup(r):
	srpm = 'ftp://download.fedora.redhat.com/pub/fedora/linux/core/updates/3/SRPMS/httpd-2.0.52-3.1.src.rpm'

	r.macros.contentdir = '%(servicedir)s/www'
	r.macros.suexec_caller = 'apache'
	r.macros.mmn = '20020903'
	r.macros.vstring = 'Foresight'
	r.macros.distro = 'Foresight Desktop Linux'
	r.macros.htconfdir = '%(sysconfdir)s/httpd'
	r.macros.cflags += " -DSSL_EXPERIMENTAL_ENGINE"
	# point to the correct libtool
	r.macros.apr_libtool = "$(apr-config --apr-libtool | sed -e 's|/bin/sh ||')"
	r.macros.ssl_libs = ''
	if Use.ssl:
            r.macros.cflags += " $(pkg-config --cflags openssl)"
            r.macros.ssl_libs += " $(pkg-config --libs openssl)"

	r.addArchive(
            'http://www.apache.org/dist/httpd/httpd-%(version)s.tar.gz',
            keyid='10FDE075')  

	
	for patch, level in (
            ('httpd-2.0.40-apctl.patch', 1),
            ('httpd-2.0.36-apxs.patch', 1),
            ('httpd-2.0.48-linkmods.patch', 1),
            ('httpd-2.0.45-deplibs.patch', 1),
            ('httpd-2.0.45-syspcre.patch', 1),
            ('httpd-2.0.48-vpathinc.patch', 1),
            ('httpd-2.0.45-encode.patch', 1),
            ('httpd-2.0.45-davetag.patch', 1),
            ('httpd-2.0.47-ldapshm.patch', 1),
            ('httpd-2.0.48-vhost.patch', 1),
            ('httpd-2.0.46-sslmutex.patch', 1),
            ('httpd-2.0.46-md5dig.patch', 1),
            ('httpd-2.0.48-proxy11.patch',  1),
            ('httpd-2.0.48-sslpphrase.patch', 1),
            ('httpd-2.0.48-worker.patch',  1),
            ('httpd-2.0.48-workerhup.patch', 1),
            ('httpd-2.0.48-davmisc.patch',  1),
            ('httpd-2.0.50-reclaim.patch', 1),
            ('httpd-2.0.40-xfsz.patch', 0),
            ('httpd-2.0.40-pod.patch', 1),
            ('httpd-2.0.45-export.patch', 1),
            ('httpd-2.0.40-noshmht.patch', 1),
            ('httpd-2.0.48-dynlimit.patch', 1),
            ('httpd-2.0.48-dynamic.patch', 1),
            ('httpd-2.0.48-sslstatus.patch', 1),
            ('httpd-2.0.48-corelimit.patch', 1),
            ('httpd-2.0.48-distcache.patch', 1),
            ('httpd-2.0.48-debuglog.patch', 1),
            ('httpd-2.0.48-abench.patch', 1),
            ('httpd-2.0.48-sslheader.patch', 1),
            ('httpd-2.0.48-sslvars2.patch', 1),
            ('httpd-2.0.52-CAN-2004-0885.patch', 1),
            ('httpd-2.0.52-CAN-2004-0942.patch', 1),
                                                    ):
             r.addPatch(patch, level=level, rpm=srpm)

	# Conditionally enable PIE support
	r.addPatch('httpd-2.0.47-pie.patch', rpm=srpm, use=Use.pie)

	r.addSource('index.html')
	r.addSource('foresight.jpg')
	r.addSource('httpd.logrotate', rpm=srpm)  
	r.addSource('httpd.init', rpm=srpm,
            apply="sed -i '/# chkconfig:/s/ 85/ 23/g' httpd.init")  
	r.addSource('httpd.conf', macros=True)  
	r.addSource('ssl.conf', rpm=srpm)  
	r.addSource('welcome.conf', rpm=srpm)  
	r.addSource('mod_ssl-Makefile.crt', rpm=srpm)  
	r.addSource('mod_ssl-Makefile.crl', rpm=srpm)  
	r.addSource('migration.xml', rpm=srpm)  
	r.addSource('migration.css', rpm=srpm)  
	r.addSource('html.xsl', rpm=srpm)  
	r.addSource('README.confd', rpm=srpm)  
	r.addSource('httpd-2.0.48-release.patch', rpm=srpm)

	r.Run("sed -i -e 's|@RELEASE|%(vstring)s|'" 
	      " < httpd-2.0.48-release.patch | patch -p1")

	# Touch mod_ssl expression parser sources to prevent regenerating it
	r.Run("touch modules/ssl/ssl_expr_*.[chyl]")

	
	# Safety check: prevent build if defined MMN does not equal upstream MMN
	r.Run("""
	vmmn=`echo MODULE_MAGIC_NUMBER_MAJOR | cpp -include include/ap_mmn.h | sed -n '/^2/p'`
	if test "x${vmmn}" != "x%(mmn)s"; then
	   echo Error: Upstream MMN is now ${vmmn}, packaged MMN is %(mmn)s.
	   echo Update the mmn macro and rebuild.
	   exit 1
	fi""")


	r.Run("echo Building for '%(distro)s' with MMN %(mmn)s and vendor string '%(vstring)s'")

	r.Run('./buildconf')
	r.Run("echo '1,/Changes with Apache MPM/wq' | ed CHANGES")
	# Before configure; fix location of build dir in generated apxs
	r.Run("sed -i -e 's:\@exp_installbuilddir\@:%(libdir)s/httpd/build:g'" 
	      " support/apxs.in")


	# forcibly prevent use of bundled apr, apr-util
	r.Run('rm -rf srclib/{arp,apr-util}')

	# Build the migration guide
	if Use.builddocs:
	    # update location of migration guide in apachectl
	    r.Run("sed -i -e 's:\@docdir\@:%(thisdocdir)s:g' support/apachectl.in")
	    r.Run("sed -i -e 's/@DISTRO@/%(distro)s/' migration.xml")
	    r.Run("xmlto --skip-validation -x html.xsl html-nochunks migration.xml")

        # enable optional modules only for main build
	r.mpmbuild('prefork',
                   ' --enable-mods-shared=all'
                   ' --enable-ssl --with-ssl'
                   ' --enable-distcache'
                   ' --enable-deflate'
                   ' --enable-proxy --enable-proxy-connect'
                   ' --enable-proxy-http --enable-proxy-ftp'
                   ' --enable-cache --enable-mem-cache'
                   ' --enable-file-cache --enable-disk-cache'
                   ' --enable-ldap --enable-auth-ldap'
                   ' --enable-logio'
                   ' --enable-so')

        # To prevent most modules being built statically into httpd.worker, 
        # easiest way seems to be enable them shared.
	r.mpmbuild('worker', '--enable-mods-shared=all')

        # Verify that the same modules were built into the two httpd binaries
	r.Run('./prefork/httpd -l | grep -v prefork > prefork.mods')
	r.Run('./worker/httpd -l | grep -v worker > worker.mods')
	r.Run('''if ! diff -u prefork.mods worker.mods; then
	  echo Different modules built into httpd binaries, will not proceed
	  exit 1
	fi''')



	r.MakeInstall(subDir='prefork')
	# install worker binary
	r.Install('worker/httpd', '%(sbindir)s/httpd.worker', mode=0755)
	# install conf file/directory
	r.Install('README.confd', '%(sysconfdir)s/httpd/conf.d/README')
	r.Install('ssl.conf', '%(sysconfdir)s/httpd/conf.d/')
	r.Install('welcome.conf', '%(sysconfdir)s/httpd/conf.d/')
	r.Install('httpd.conf', '%(htconfdir)s/conf/')

	# mod_ssl bits
	for suffix in ('crl', 'crt', 'csr', 'key', 'prm'):
	    r.MakeDirs('%(htconfdir)s/conf/ssl.' + suffix)

	for ext in ('crt', 'crl'):
	    r.Install('mod_ssl-Makefile.' + ext,
		      '%%(htconfdir)s/conf/ssl.%s/Makefile.%s' % (ext, ext))

	r.Symlink('%(datadir)s/ssl/certs/Makefile', '%(htconfdir)s/conf/')
	# for holding mod_dav lock database
	r.MakeDirs('%(localstatedir)s/lib/dav')
	# create a prototype session cache, zero-byte config files
        # never put data in these files in the recipe!
	r.Create('%(localstatedir)s/cache/mod_ssl/scache.{dir,pag,sem}')
        r.Config('%(localstatedir)s/cache/mod_ssl/scache.(dir|pag|sem)')
	# create cache root
	r.MakeDirs('%(localstatedir)s/cache/mod_proxy')

	# move utilities to /usr/bin
	r.Move('%(sbindir)s/{ab,htdbm,logresolve,htpasswd,htdigest}',
               '%(bindir)s/')

	# move builddir to the right place
	r.Move('%(contentdir)s/build', '%(libdir)s/httpd/build')

	# Make the MMN accessible to module packages
	r.Run('echo %(mmn)s > %(destdir)s%(includedir)s/httpd/.mmn')
	r.Install('prefork/build/config_vars.mk',
                  '%(libdir)s/httpd/build/config_vars.mk')
	r.Install('build/special.mk', '%(libdir)s/httpd/build/special.mk')
	# Symlink won't work because %(apr_libtool) is a shell script
	r.Run('ln -s %(apr_libtool)s'
	      ' %(destdir)s/%(libdir)s/httpd/build/libtool')

	r.Install('index.html', '%(contentdir)s/error/noindex.html')
	r.Install('foresight.jpg', '%(contentdir)s/icons/foresight.jpg')
	r.Install('httpd.init', '%(initdir)s/httpd')
	r.Install('httpd.logrotate', '%(sysconfdir)s/logrotate.d/httpd')

	# symlinks for /etc/httpd
	r.MakeDirs('%(localstatedir)s/log/httpd')
	r.Remove('%(sysconfdir)s/httpd/logs', recursive=True)
	r.Symlink('%(localstatedir)s/log/httpd', '%(sysconfdir)s/httpd/logs')
	r.Symlink('%(localstatedir)s/run', '%(sysconfdir)s/httpd/run')
	r.Symlink('%(libdir)s/httpd/modules', '%(sysconfdir)s/httpd/modules')
	r.Symlink('%(libdir)s/httpd/build', '%(sysconfdir)s/httpd/build')

	r.Run('sed -i -e "s:\@docdir\@:%(thisdocdir)s:g" '
              ' %(destdir)s%(initdir)s/httpd')

	r.macros.oldapachedir = '%(prefix)s/local/apache2'
	# fix manfile 
	r.Run('sed -i'
	' -e "s|%(oldapachedir)s/conf/httpd.conf|/etc/httpd/conf/httpd.conf|"'
	' -e "s|%(oldapachedir)s/conf/mime.types|/etc/mime.types|"'
	' -e "s|%(oldapachedir)s/conf/magic|/etc/httpd/conf/magic|"'
	' -e "s|%(oldapachedir)s/logs/error_log|/var/log/httpd/error_log|"'
	' -e "s|%(oldapachedir)s/logs/access_log|/var/log/httpd/access_log|"'
	' -e "s|%(oldapachedir)s/logs/httpd.pid|/var/run/httpd.pid|"'
	' -e "s|%(oldapachedir)s|/etc/httpd|" %(destdir)s%(mandir)s/man8/httpd.8')

	# sanitize config_vars file: relocate the build directory 
	# into libdir; reference correct libtool; fix EXTRA_INCLUDES
	r.Run('sed -i'
	' -e "s|%(contentdir)s/build|%(libdir)s/httpd/build|g"' 
	' -e "/AP_LIBS/d"'
	' -e "/abs_srcdir/d"'
	' -e "/^LIBTOOL/s|/bin/sh /[^ ]*/libtool|/bin/sh %(apr_libtool)s|"' 
	' -e "/^installbuilddir/s| = .*$| = /etc/httpd/build|"' 
	' -e "s|^EXTRA_INCLUDES.*$|EXTRA_INCLUDES = -I\$(includedir) -I\$(APR_INCLUDEDIR) -I%(includedir)s/openssl|g"' 
	' %(destdir)s%(libdir)s/httpd/build/config_vars.mk')


	if Use.builddocs:
	    r.Doc('migration.html', 'migration.css')
	r.Doc('ABOUT_APACHE', 'README', 'CHANGES', 'LICENSE', 'VERSIONING')


	
	r.SetModes('%(sbindir)s/suexec', 04510)
	r.SetModes('%(localstatedir)s/{log/httpd,lib/dav,cache/mod_proxy}',
                   '%(sysconfdir)s/httpd/conf/ssl.*',
                   0700)
	r.Ownership('root', 'apache', '%(sbindir)s/suexec')
	r.Ownership('apache', 'apache', 
                    '%(localstatedir)s/lib/dav',
                    '%(localstatedir)s/cache/mod_proxy')
        r.User('apache', 48, homedir='%(servicedir)s/www', comment='Apache')

	r.PackageSpec('httpd-manual', '%(contentdir)s/manual/.*')

	r.PackageSpec('mod_ssl',
                      '%(libdir)s/httpd/modules/mod_ssl.so',
                      '%(sysconfdir)s/httpd/conf.d/ssl.conf',
                      '%(sysconfdir)s/httpd/conf/Makefile',
                      '%(sysconfdir)s/httpd/conf/ssl\..*',
                      '%(localstatedir)s/cache/mod_ssl')
        # Remove unpackaged files
	r.Run("find %(destdir)s/%(contentdir)s/manual \( "
              " -name \*.xml -o -name \*.xml.* -o -name \*.ent"
              " -o -name \*.xsl -o -name \*.dtd "
              " \) -print0 | xargs -0 rm -f")

	r.Remove('%(htconfdir)s/conf/*-std.conf')
	r.Move('%(htconfdir)s/conf/highperformance.conf', '%(thisdocdir)s/')

	r.Remove('%(libdir)s/*.exp',
                 '%(libdir)s/httpd/modules/*.exp',
                 '%(libdir)s/httpd/build/config.nice',
                 '%(htconfdir)s/conf/mime.types',
                 '%(htconfdir)s/conf/ssl.conf',
                 '%(bindir)s/ap?-config',
                 '%(sbindir)s/{checkgid,dbmmanage,envvars*}',
                 '%(contentdir)s/{htdocs,cgi-bin}/*',
                 '%(mandir)s/man1/dbmmanage.*')
	
	# XXX Disable ssl.conf until we fix it
	r.Move('%(htconfdir)s/conf.d/ssl.conf',
               '%(htconfdir)s/conf.d/ssl.conf.DISABLED')

	# points to /var/run
	r.DanglingSymlinks(exceptions='%(htconfdir)s/run')
	# points to ssl certificate
	r.DanglingSymlinks(exceptions='%(htconfdir)s/conf/Makefile')
	# points to apr-utils libtool
	r.DanglingSymlinks(exceptions='%(libdir)s/httpd/build/libtool')
        # make sure permissions are correct
        r.ExcludeDirectories(exceptions='%(contentdir)s/cgi-bin')
	r.TagSpec('initscript', '%(initdir)s/')
        r.Requires('grep:runtime', '%(initdir)s/')

        # Require mailcap (need /etc/mime.types)
        r.Requires('mailcap:runtime', '%(initdir)s/')

        # modules are shared libraries, but aren't linked to
        r.Provides(exceptions='%(libdir)s/httpd/modules/')

	# need empty html directory
	r.MakeDirs('%(contentdir)s/html')
	r.ExcludeDirectories(exceptions='%(contentdir)s/html')


    def mpmbuild(r, target, extraConfig):
	r.Run('mkdir ' + target)
	r.ManualConfigure(
		' --prefix=%(sysconfdir)s/httpd'
		' --exec-prefix=%(prefix)s'
		' --bindir=%(bindir)s'
		' --sbindir=%(sbindir)s'
		' --mandir=%(mandir)s'
		' --libdir=%(libdir)s'
		' --sysconfdir=%(sysconfdir)s/httpd/conf'
		' --includedir=%(includedir)s/httpd'
		' --libexecdir=%(libdir)s/httpd/modules'
		' --datadir=%(contentdir)s'
		' --with-installbuilddir=%(libdir)s/httpd/build'
		' --with-mpm=' + target + 
		' --with-apr=%(prefix)s --with-apr-util=%(prefix)s'
		' --enable-suexec --with-suexec'
		' --with-suexec-caller=%(suexec_caller)s'
		' --with-suexec-docroot=%(contentdir)s'
		' --with-suexec-logfile=%(localstatedir)s/log/httpd/suexec.log'
		' --with-suexec-bin=%(sbindir)s/suexec'
		' --with-suexec-uidmin=500 --with-suexec-gidmin=100 '
		+ extraConfig,
		configureName='../configure',
		subDir=target,
		preConfigure='SSL_LIBS="%(ssl_libs)s" '
			     'CFLAGS=$(echo "%(cflags)s")')
	r.Make(subDir=target, preMake="SSL_LIBS='%(ssl_libs)s'")
