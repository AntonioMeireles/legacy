From f66c6e40bbcd079fc21dc5f08df8ba09ad5613dc Mon Sep 17 00:00:00 2001
From: Aurelien Gateau <aurelien.gateau@canonical.com>
Date: Wed, 2 Sep 2009 18:12:06 +0200
Subject: [PATCH] Discard actions and permanent notifications when running on an action-less notification server.

---
 knotify/notifybypopup.cpp |   60 +++++++++++++++++++++++++++++++++++---------
 knotify/notifybypopup.h   |    7 +++++
 2 files changed, 54 insertions(+), 13 deletions(-)

diff --git a/knotify/notifybypopup.cpp b/knotify/notifybypopup.cpp
index 91c9fee..35cdb11 100644
--- a/knotify/notifybypopup.cpp
+++ b/knotify/notifybypopup.cpp
@@ -44,7 +44,7 @@ static const char dbusInterfaceName[] = "org.freedesktop.Notifications";
 static const char dbusPath[] = "/org/freedesktop/Notifications";
 
 NotifyByPopup::NotifyByPopup(QObject *parent) 
-  : KNotifyPlugin(parent) , m_animationTimer(0), m_dbusServiceExists(false)
+  : KNotifyPlugin(parent) , m_animationTimer(0), m_dbusServiceExists(false), m_useActions(true)
 {
 	QRect screen = QApplication::desktop()->availableGeometry();
 	m_nextPosition = screen.top();
@@ -292,6 +292,8 @@ void NotifyByPopup::slotServiceOwnerChanged( const QString & serviceName,
 				kWarning(300) << "warning: failed to connect to NotificationClosed dbus signal";
 			}
 		}
+
+		updateUseActions();
 	}
 }
 
@@ -355,19 +357,20 @@ bool NotifyByPopup::sendNotificationDBus(int id, int replacesId, KNotifyConfig*
 	args.append( iconName ); // app_icon
 	args.append( config->title.isEmpty() ? appCaption : config->title ); // summary
 	args.append( config->text ); // body
-	// galago spec defines action list to be list like
-	// (act_id1, action1, act_id2, action2, ...)
-	//
-	// assign id's to actions like it's done in fillPopup() method
-	// (i.e. starting from 1)
 	QStringList actionList;
-	int actId = 0;
-	foreach (const QString& actName, config->actions) {
-		actId++;
-		actionList.append(QString::number(actId));
-		actionList.append(actName);
+	if (m_useActions) {
+		// galago spec defines action list to be list like
+		// (act_id1, action1, act_id2, action2, ...)
+		//
+		// assign id's to actions like it's done in fillPopup() method
+		// (i.e. starting from 1)
+		int actId = 0;
+		foreach (const QString& actName, config->actions) {
+			actId++;
+			actionList.append(QString::number(actId));
+			actionList.append(actName);
+		}
 	}
-
 	args.append( actionList ); // actions
 
 	QVariantMap map;
@@ -385,6 +385,12 @@
 		map["image_data"] = config->image.data();
 
 	args.append( map ); // hints
+	// This is a bit of a hack: we want to avoid notify-osd ugly dialogs, so we
+	// turn permanent notifications into ephemeral ones
+	int timeout = config->timeout;
+	if (!m_useActions && timeout == 0) {
+		timeout = -1;
+	}
 	args.append( timeout ); // expire timout
 
 	m.setArguments( args );
@@ -435,4 +444,29 @@ void NotifyByPopup::closeNotificationDBus(int id)
 	
 }
 
+void NotifyByPopup::updateUseActions()
+{
+	if (!m_dbusServiceExists) {
+		// No notification server, use KPassivePopup, which supports actions
+		m_useActions = true;
+		return;
+	}
+	QDBusMessage m = QDBusMessage::createMethodCall( dbusServiceName, dbusPath, dbusInterfaceName, "GetCapabilities" );
+	QDBusMessage replyMsg = QDBusConnection::sessionBus().call(m);
+	if(replyMsg.type() != QDBusMessage::ReplyMessage) {
+		kWarning(300) << "Error while calling popup server GetCapabilities()";
+		m_useActions = true;
+		return;
+	}
+
+	if (replyMsg.arguments().isEmpty()) {
+		kWarning(300) << "popup server GetCapabilities() returned an empty reply";
+		m_useActions = true;
+		return;
+	}
+
+	QStringList capabilities = replyMsg.arguments().at(0).toStringList();
+	m_useActions = capabilities.contains("actions");
+}
+
 #include "notifybypopup.moc"
diff --git a/knotify/notifybypopup.h b/knotify/notifybypopup.h
index 6e7fc1d..8d06beb 100644
--- a/knotify/notifybypopup.h
+++ b/knotify/notifybypopup.h
@@ -85,6 +85,13 @@ class NotifyByPopup : public KNotifyPlugin
 		 * Maps knotify notification IDs to DBus notifications IDs
 		 */
 		QHash<int,uint> m_idMap;
+
+		/**
+		 * True if the notification popup server supports notifications
+		 */
+		bool m_useActions;
+
+		void updateUseActions();
 };
 
 #endif
-- 
1.6.3.3

