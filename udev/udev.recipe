#
# Copyright (c) 2004-2007 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
class Udev(RPMPackageRecipe,CPackageRecipe):
    name = 'udev'
    version = '151'
    rpmRelease = '10.fc13'

    buildRequires = [ 'sysfsutils:devel', 'pkgconfig:devel', 'glib:runtime',
                      'bison:runtime', 'pam:devel', 'chkconfig:runtime', 'libxslt:runtime',
                      'gperf:runtime', 'usbutils:runtime', 'usbutils:devellib',
                      'hwdata:data',
                      'gobject-introspection:devel',
                      
                      'gobject-introspection:python',
                      'acl:devel', 'glib:devel', 'libusb:devel', 'autoconf:runtime', 
                      'automake:runtime', 'libtool:runtime', 'libtool:devel' ]
    # until we rely on rRPL's glibc (2.5) 
    buildRequires += ['kernel:build-tree', ]

    rpmPatches = [ '0001-firmware-fix-error-reporting-on-missing-firmware-fil.patch',
                   '0002-keymap-Add-Dell-Inspiron-1011-Mini-10.patch',
                   '0003-Fix-brightness-keys-on-MSI-Wind-U-100.patch',
                   '0004-keymap-Add-support-for-Gateway-AOA110-AOA150-clones.patch',
                   '0005-keymap-Fix-LG-X110.patch',
                   '0006-Force-key-release-for-volume-keys-on-Dell-Studio-155.patch',
                   '0007-keymap-Add-Toshiba-Satellite-M30X.patch',
                   '0013-keymap-Add-Samsung-Q210-P210-force-release-quirk.patch',
                   '0014-keymap-Add-Fujitsu-Amilo-1848-u-force-release-quirk.patch',
                   '0015-Decrease-buffer-size-when-advancing-past-NUL-byte.patch',
                   '0016-Use-UTIL_LINE_SIZE-not-UTIL_PATH_SIZE-to-truncate-pr.patch',
                   '0017-Increase-UTIL_LINE_SIZE-from-2048-to-16384.patch',
                   '0018-Fix-virtio-ports-rule-to-use-attr-instead-of-ATTR.patch',
                   '0019-udev-acl-Correctly-handle-ENV-ACL_MANAGE-0.patch',
                   '0021-input_id-Fix-linking.patch',
#                   '0022-replace-utimes-with-utimensat.patch',
                   '0029-firmware-fix-possible-segfault-when-firmware-device-.patch',
                   '0030-rules-input-create-by-path-links-for-pci-devices.patch',
##                   '0031-Fix-switching-Logitech-bluetooth-adapters-into-hci-m.patch',
#                   '0032-do-not-reset-SELinux-context-when-the-node-was-not-t.patch',
                   '0034-add-LGPL-COPYING-to-libudev-and-GUdev.patch',
                   '0035-cdrom_id-open-non-mounted-optical-media-with-O_EXCL.patch',
                   '0036-modeswitch-morph-into-tool-that-only-switches-Mobile.patch',
                   '0048-cdrom_id-remove-debugging-code.patch',
                   '0049-cdrom_id-retry-to-open-the-device-if-EBUSY.patch',
                   '0050-cdrom_id-check-mount-state-in-retry-loop.patch',
                   '0051-cdrom_id-always-set-ID_CDROM-regardless-if-we-can-ru.patch',
                   '0062-cdrom_id-Fix-uninitialized-variables.patch',
                   '0065-cdrom_id-Fix-uninitialized-buffers.patch',
                   '0066-cdrom_id.patch',
                   '0067-cdrom_id-rework-feature-profiles-buffer-parsing.patch',
                   '0068-cdrom_id-print-more-debug-messages.patch',
                   '0069-cdrom_id-debug-print-feature-values-in-hex.patch',
                   '0070-cdrom_id-debug-print-feature-values-in-hex.patch',
                   '0071-cdrom_id-Do-not-ignore-errors-from-scsi_cmd_run.patch',
                   '0072-cdrom_id-Swap-media-state-and-TOC-info-probing.patch',
                   '0074-cdrom_id-add-missing-profiles-to-feature_profiles.patch',
                   '0075-cdrom_id-set-ID_CDROM_MEDIA-1-only-for-known-media.patch',
                   '0110-cdrom_id-only-mark-sr-0-9-as-ID_CDROM.patch',
                   'udev-151-rules.patch',
                   'udev-151-virtio.patch',
                   'udev-151-gperf.patch'
                   ]

    rpmSources = [ 'udev-post.init',
                   'start_udev',
                   'fw_unit_symlinks.sh',
                   'udev.sysconfig'
                   ]


    def setup(r):
        r.macros.debug = 'false'

        r.unpack()
        # FIXME 
        # http://article.gmane.org/gmane.linux.hotplug.devel/14081
        # modded to fit our goals
        # expects %(kver)s set...
        if Arch.x86:
            r.macros.archWideness = '32'
        else:
            r.macros.archWideness = '64'

        r.addPatch('udev-old-glibc-hack.patch', macros=True)
        
        # backport from http://patch-tracker.debian.org/patch/series/dl/udev/158-1/old_cloexec
        r.addPatch('old_cloexec.patch')

        r.addPatch('udev-le16toh.patch')

        # addons and extra features
        
        r.macros.udev_scriptdir='/lib/udev'
        r.Run('autoreconf -i; automake; libtoolize -f -c')

        r.Configure(' --prefix=%(prefix)s --exec-prefix="" --sysconfdir=%(sysconfdir)s '
                    ' --with-libdir-name=%(lib)s '
                    ' --sbindir="%(essentialsbindir)s"'
                    ' --with-rootlibdir=/%(lib)s'
                    ' --libexecdir=%(udev_scriptdir)s'
                    ' --disable-rpath --enable-debug --enable-introspection')

        r.Make()
        r.MakeInstall()


        # Deprecated, but keep the ownership
        r.MakeDirs('%(sysconfdir)s/udev/{rules.d,scripts,devices,makedev.d}')
        r.MakeDirs('%(sysconfdir)s/dev.d/')
        r.Create('%(sysconfdir)s/scsi_id.config')

        # force relative symlinks
        r.Symlink('/lib/udev/scsi_id', '/sbin/scsi_id')

#        for x in [ 'udevinfo', 'udevtest']:
#            r.Symlink('/sbin/udevadm', '%(bindir)s/' + x)

#        for x in [ 'udevmonitor']:
#            r.Symlink('/sbin/udevadm', '%(sbindir)s/' + x)

#        for x in [ 'udevtrigger', 'udevsettle', 'udevcontrol']:
#            r.Symlink('/sbin/udevadm', '/sbin/' + x)


        # These rules should do...
        for x in ( 'rules/redhat/40-redhat.rules',
#                   'rules/packages/40-isdn.rules',
#                   'rules/packages/40-alsa.rules',
#                   'rules/packages/64-md-raid.rules',
#                   'rules/packages/64-device-mapper.rules'
                   ):
            r.Install( x , '%(udev_scriptdir)s/rules.d/', mode = 0644)

        r.MakeDirs('%(sysconfdir)s/udev/devices')
        r.Install('fw_unit_symlinks.sh', '%(udev_scriptdir)s/fw_unit_symlinks.sh', mode=0755)


        r.MakeDirs('%(udev_scriptdir)s/{,devices}')
        r.MakeDirs('%(datadir)s/udev')
        r.MakeDirs('/lib/firmware', mode = 0755)

        r.Install('start_udev', '%(essentialsbindir)s/')

        r.MakeDirs('%(initdir)s')
        r.MakeDirs('/var/lib/udev/makedev.d')

        r.Install('udev-post.init', '%(initdir)s/udev-post', mode = 0755)

        r.Install('udev.sysconfig', '%(sysconfdir)s/sysconfig/udev', mode = 0755)

        for g in ['cdrom', 'tape', 'dialout', 'video', 'audio']:
            r.UtilizeGroup(g, '/sbin/udevd')

        r.ExcludeDirectories(exceptions='%(sysconfdir)s/udev/rules.d')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/udev/scripts')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/udev/devices')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/udev/makedev.d')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/dev.d')
        r.ExcludeDirectories(exceptions='/lib/firmware')
        r.ExcludeDirectories(exceptions='/lib/udev/devices')
        r.ExcludeDirectories(exceptions='/usr/share/udev')
        r.ExcludeDirectories(exceptions='/var/lib/udev/makedev.d')


        # FIXME: find a better way, if any
        r.addSource('udev.tagdescription', macros=True,
                    dest='%(tagdescriptiondir)s/udev')
        r.addSource('udev.taghandler', macros=True,
                    dest='%(taghandlerdir)s/udev', mode=0755)

        r.Requires('file: /sbin/pidof', '%(taghandlerdir)s/udev')

        r.TagSpec('udev', '/sbin/udevd')

        r.ComponentSpec('data', '/lib/udev/rules.d/.*')
        r.ComponentSpec('runtime', '/lib/udev/.*')


        r.NonBinariesInBindirs(exceptions='%(udev_scriptdir)s/.*')
