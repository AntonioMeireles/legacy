#
# Copyright (c) 2005-2009 rPath, Inc.
#               2008-2013 The Foresight Linux Project
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.foresightlinux.org/licenses/mit-license/
#
loadInstalled('open-vm-tools')
loadSuperClass('kernelpackage')
class Kernel(KernelPackageRecipe):
    name = 'kernel'
    version = '3.4.65'
    vMajor, vMinor, patchLevel = version.split('.')
    realVersion = version
    fakedVersion = '2.6.4%s.%s' %(vMinor, patchLevel)
    longterm = False

    def unpackBase(r):
                r.addArchive(
                    'http://ftp.kernel.org/pub/linux/kernel'
                    '/v3.x/linux-%s.tar.bz2' % r.realVersion,
                    keyid='517D0F0E'
                    )

    def setMacros(r):
        r.version = r.fakedVersion
        r.macros.version = r.version
        KernelPackageRecipe.setMacros(r)

    def unpack(r):        
        # r.addPatch('git-linus.diff')
        r.addPatch('force-version-2.6.patch')
        r.addPatch('linux-2.6-makefile-after_link.patch') 
        # r.addPatch('linux-2.6-compile-fixes.patch')
        # r.addPatch('linux-2.6-upstream-reverts.patch', extraArgs='-R')

        r.addPatch('taint-vbox.patch')
        r.addPatch('jbd-jbd2-validate-sb-s_first-in-journal_get_superblo.patch')
        r.addPatch('linux-2.6-defaults-acpi-video.patch')
        r.addPatch('linux-2.6-acpi-video-dos.patch')
        r.addPatch('linux-2.6-acpi-debug-infinite-loop.patch')
        r.addPatch('acpi-sony-nonvs-blacklist.patch')
        r.addPatch('linux-2.6-input-kill-stupid-messages.patch')
        r.addPatch('die-floppy-die.patch')
        r.addPatch('linux-2.6.30-no-pcspkr-modalias.patch')
        r.addPatch('linux-2.6-serial-460800.patch')
        r.addPatch('linux-2.6-silence-noise.patch')
        r.addPatch('linux-2.6-silence-fbcon-logo.patch')
        r.addPatch('linux-2.6-crash-driver.patch')
        r.addPatch('linux-2.6-e1000-ich9-montevina.patch')
        # r.addPatch('drm-intel-next.patch')
        r.addPatch('drm-i915-dp-stfu.patch')
        r.addPatch('drm-i915-fbc-stfu.patch')
        r.addPatch('linux-2.6-intel-iommu-igfx.patch')
        r.addPatch('linux-2.6-silence-acpi-blacklist.patch')
        r.addPatch('quite-apm.patch')
        r.addPatch('drivers-media-update.patch')
        r.addPatch('disable-i8042-check-on-apple-mac.patch')
        r.addPatch('dmar-disable-when-ricoh-multifunction.patch')
        r.addPatch('lis3-improve-handling-of-null-rate.patch')
        r.addPatch('ips-noirq.patch')
        r.addPatch('uprobes-3.4-backport.patch')
        r.addPatch('uprobes-3.4-tip.patch')
        r.addPatch('uprobes-task_work_add-generic-process-context-callbacks.patch')
        r.addPatch('unhandled-irqs-switch-to-polling.patch')
        r.addPatch('weird-root-dentry-name-debug.patch')
        r.addPatch('debug-808990.patch')
        r.addPatch('atl1c_net_next_update-3.4.patch')
        r.addPatch('crypto-testmgr-allow-aesni-intel-and-ghash_clmulni-intel.patch')
        r.addPatch('crypto-aesni-intel-fix-wrong-kfree-pointer.patch')

        # https://lkml.org/lkml/2012/7/6/198
        r.addPatch('upstreamable-tools_power-buildfixes.patch')

        # VMware support
        r.macros.ovmtoolsver = OpenVmTools.version.replace('_', '-')
        r.addArchive('http://sourceforge.net/projects/open-vm-tools/files/'
                     'open-vm-tools/stable-9.2.x/'
                     'open-vm-tools-%(ovmtoolsver)s.tar.gz',
                     dir='linux-%s' % r.realVersion)

        # Add the cp437 version of the terminus font to the kernel and 
        # keep a backup of the original font for comparison purposes. 
        # -- /ermo
        r.addSource('terminus_font_8x16.c', dest = 'drivers/video/console/')
        r.Copy('drivers/video/console/font_8x16.c', 'drivers/video/console/font_8x16.c.org')
        # Comment out the line below to keep original VGA font.
        r.Copy('drivers/video/console/terminus_font_8x16.c', 'drivers/video/console/font_8x16.c')

    def addConfiguration(r):
        r.addSource('kernel-foresight-i686.config',
                    dest = 'configs/',
                    use=Arch.x86)
        r.addSource('kernel-foresight-x86_64.config',
                    dest = 'configs/',
                    use=Arch.x86_64)

        r.Copy('configs/*.config', '.config')

        for st in [ 'CONFIG_SECURITY_SELINUX',
                    'CONFIG_SECURITY_SELINUX_BOOTPARAM',
                    'CONFIG_SECURITY_SELINUX_DISABLE',
                    'CONFIG_SECURITY_SELINUX_DEVELOP',
                    'CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE',
                    'CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE',
                    'CONFIG_SECURITY_SELINUX_AVC_STATS', ]: 
            r.Replace('%s=.*' % st,
                      '# %s is not set' % st,
                      '.config') 
        #
        for st in [ 'CONFIG_ACPI_PROCFS_POWER',
                    'CONFIG_ACPI_PROC_EVENT', ]:
            r.Replace('.*%s.*' % st,
                      '%s=y' % st, '.config')
        
    def buildAtaModuleMap(r):
        pass

    def build(r):
        # Build VMware kernel modules
        r.macros.kmoddir = '/lib/modules/%(kver)s/kernel/'

        for m in ('drivers/misc/vmci',
                  'drivers/misc/vmsync',
                  'drivers/net/vmxnet',
                  'drivers/net/vsock',
                  'fs/vmblock',
                  'fs/vmhgfs'):
            module = os.path.basename(m)
            modsrc = 'open-vm-tools-%(ovmtoolsver)s/modules/linux/' + module + '/'
            r.Run('make -C %(builddir)s SUBDIRS=$PWD SRCROOT=$PWD/.'
                  ' MODULEBUILDDIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s/modules/linux'
                  ' OVT_SOURCE_DIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s',
                  ' VM_KBUILD=26 '
                  ' CC_OPTS=-DVMW_HAVE_EPOLL'
                  ' modules',
                  dir=modsrc)

            kmod = module + '.ko'
            r.Install(modsrc + kmod, '%(kmoddir)s' + m + '/' + kmod)
