#
# Copyright (c) 2005-2009 rPath, Inc.
#               2008-2013 The Foresight Linux Project
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.foresightlinux.org/licenses/mit-license/
#
loadInstalled('open-vm-tools')
loadSuperClass('kernelpackage')
class Kernel(KernelPackageRecipe):
    name = 'kernel'
    version = '3.10.46'
    #version = '3.13.3'
    kS = version.split('.')
    vMajor = kS[0]
    vMinor = kS[1]
    testing = ''
    try:
        patchLevel = kS[2]
    except IndexError:
        patchLevel = '0'

    if patchLevel[0]=='r':
        testing="testing/"
        realVersion = vMajor + '.' + vMinor + '-' + patchLevel
        fakedVersion = vMajor + '.' + vMinor + '.' + '0-' + patchLevel
    else:
        fakedVersion = None
        realVersion = version
    #fMinor = 40 + int(vMinor)
    #fakedVersion = '2.6.%s.%s' %(fMinor, patchLevel)
    longterm = False

    def unpackBase(r):
                r.addArchive(
                    'http://ftp.kernel.org/pub/linux/kernel'
                    '/v3.x/%slinux-%s.tar.xz' % (r.testing,r.realVersion),
                    keyid='517D0F0E'
                    )

    def setMacros(r):
        if r.fakedVersion:
            r.version = r.fakedVersion
            r.macros.version = r.version
        KernelPackageRecipe.setMacros(r)

    def unpack(r):        
        #r.addPatch('force-version-2.6.patch')
        # from lkml
#        r.addPatch('ax88179_178a_resume.patch')

        # to build with older headers
        #r.addPatch('turbostat-makefile.diff')
 
        # https://lkml.org/lkml/2012/7/6/198
        r.addPatch('upstreamable-tools_power-buildfixes.patch')
        r.Remove('tools/perf/scripts/perl/Perf-Trace-Util/Context.c')

        # VMware support
        r.macros.ovmtoolsver = OpenVmTools.version.replace('_', '-')
        r.addArchive('http://sourceforge.net/projects/open-vm-tools/files/'
                     'open-vm-tools/stable-9.2.x/'
                     'open-vm-tools-%(ovmtoolsver)s.tar.gz',
                     dir='linux-%s' % r.realVersion)

        # Add the cp437 version of the terminus font to the kernel and 
        # keep a backup of the original font for comparison purposes. 
        # -- /ermo
        r.addSource('terminus_font_8x16.c', dest = 'drivers/video/console/')
#        r.Copy('drivers/video/console/font_8x16.c', 'drivers/video/console/font_8x16.c.org')
        # Comment out the line below to keep original VGA font.
#        r.Copy('drivers/video/console/terminus_font_8x16.c', 'drivers/video/console/font_8x16.c')

    def addConfiguration(r):
        r.addSource('kernel-foresight-i686.config',
                    dest = 'configs/',
                    use=Arch.x86)
        r.addSource('kernel-foresight-x86_64.config',
                    dest = 'configs/',
                    use=Arch.x86_64)

        r.Copy('configs/*.config', '.config')

        for st in [ 'CONFIG_SECURITY_SELINUX',
                    'CONFIG_SECURITY_SELINUX_BOOTPARAM',
                    'CONFIG_SECURITY_SELINUX_DISABLE',
                    'CONFIG_SECURITY_SELINUX_DEVELOP',
                    'CONFIG_SECURITY_SELINUX_BOOTPARAM_VALUE',
                    'CONFIG_SECURITY_SELINUX_CHECKREQPROT_VALUE',
                    'CONFIG_SECURITY_SELINUX_AVC_STATS', ]: 
            r.Replace('%s=.*' % st,
                      '# %s is not set' % st,
                      '.config') 
        # bellow _may_ needed so that broadcom wl
        # fully behaves with WPA auth...
        # or st in [ 'CONFIG_HOSTAP', ]:
        # r.Replace('.*%s.*' % st,
        #           '%s=y' % st, '.config')
        #
        for st in [ 'CONFIG_ACPI_PROCFS_POWER',
                    'CONFIG_ACPI_PROC_EVENT', ]:
            r.Replace('.*%s.*' % st,
                      '%s=y' % st, '.config')
        # 
        for st in [ 'CONFIG_MODULE_SIG',
                    # above disables modules signing
        ]: 
            r.Replace('%s=.*' % st,
                      '# %s is not set' % st,
                      '.config') 
        # enable intel's PSTATE tricks.
        # this is an edgy kernel after all
        for st in [ 'CONFIG_X86_INTEL_PSTATE', ]:
            r.Replace('.*%s.*' % st,
                      '%s=y' % st, '.config')
        
    def buildAtaModuleMap(r):
        pass

    def build(r):
        pass
        # # Build VMware kernel modules
        # r.macros.kmoddir = '/lib/modules/%(kver)s/kernel/'

        # for m in ('drivers/misc/vmci',
        #           'drivers/misc/vmsync',
        #           'drivers/net/vmxnet',
        #            'drivers/net/vsock',
        #           'fs/vmblock',
        #            'fs/vmhgfs'):
        #     module = os.path.basename(m)
        #     modsrc = 'open-vm-tools-%(ovmtoolsver)s/modules/linux/' + module + '/'
        #     r.Run('make -C %(builddir)s SUBDIRS=$PWD SRCROOT=$PWD/.'
        #           ' MODULEBUILDDIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s/modules/linux'
        #            ' OVT_SOURCE_DIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s',
        #            ' VM_KBUILD=26 '
        #            ' CC_OPTS=-DVMW_HAVE_EPOLL'
        #            ' modules',
        #           dir=modsrc)

        #     kmod = module + '.ko'
        #     r.Install(modsrc + kmod, '%(kmoddir)s' + m + '/' + kmod)
