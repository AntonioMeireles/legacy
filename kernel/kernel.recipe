#
# Copyright (c) 2005-2010 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('kernelpackage')
class Kernel(KernelPackageRecipe):

    name = 'kernel'
    rpmVersion = '2.6.32'
    rpmRelease = '71.7.1.el6'
    version = rpmVersion + '_' + rpmRelease
    isRHEL = True

    buildRequires = [ 'rpm:runtime' ]

    configs = [
        ('x86', (), (
            {},
        )),
        ('x86', ('i586',), (
            {},
            {'smp':True}
        )),
        ('x86', ('i686',), (
            {},
            {'smp':True},
            {'smp':True, 'pae':True},
        )),
        ('x86_64', (), (
            {},
            {'smp':True},
        )),
    ]

    def setMacros(r):
        KernelPackageRecipe.setMacros(r)
        r.macros.rpmRelease = r.rpmRelease
        r.macros.rpmVersion = r.rpmVersion
        if Arch.x86:
            r.macros.variant = 'i386'
        else:
            r.macros.variant = 'x86_64'
        # Make sure that xen and domU are only "preferred", not "required"
        if Use.xen and Use.domU and not Use.dom0:
            Use.xen.setRequired(False)
            Use.domU.setRequired(False)
        if not Use.xen:
            Use.domU._set(False)
            Use.dom0._set(False)
            if Use.domU: pass
            if Use.dom0: pass
        if Use.vmware:
            Use.vmware.setRequired(False)
        else:
            Use.vmware._setUsed(False)

    def addNonInteractiveConfig(r):
        pass

    def unpackBase(r):
        r.addSource('rpmmacros', macros=True)
        r.addSource('ftp://ftp.redhat.com/redhat/linux/enterprise/6Server/en/os/SRPMS/%(name)s-%(rpmVersion)s-%(rpmRelease)s.src.rpm',
                    apply='rpm -i --nodeps --macros /usr/lib/rpm/macros:rpmmacros '
                          '--dbpath %(builddir)s/db %(name)s-%(rpmVersion)s-%(rpmRelease)s.src.rpm')
        r.addAction("sed -i -e 's/define signmodules 1/define signmodules 0/' %(name)s.spec", dir='../SPECS')
        r.addAction("sed -i -e 's/define fancy_debuginfo 1/define fancy_debuginfo 0/' %(name)s.spec", dir='../SPECS')
        r.addAction('rpmbuild -bp %(name)s.spec --nodeps --macros /usr/lib/rpm/macros:../%(name)s-%(version)s/rpmmacros', dir='../SPECS' )
        r.addAction('mv ../BUILD/kernel-%(rpmVersion)s-%(rpmRelease)s/linux-%(rpmVersion)s-%(rpmRelease)s.%(variant)s/* .')

    def createLocalVersion(r):
        r.Create('localversion.rpl', contents='-%(rpmRelease)s%(localversion)s')

    def unpack(r):
        # VMware support
        r.addPatch('vmware_mptbase_workaround.patch')
        r.buildvmmodules = True
        r.macros.ovmtoolsver = '2010.12.19-339835'
        r.addArchive('mirror://sourceforge/open-vm-tools/'
                     'open-vm-tools-%(ovmtoolsver)s.tar.gz',
                     dir='kernel-%s' % r.macros.archive_version.replace('-','_'),
                     use=r.buildvmmodules)

    def build(r):
        # Build VMware kernel modules
        if r.buildvmmodules:
            r.macros.kmoddir = '/lib/modules/%(kver)s/kernel'
            for m in ('vmblock',
                      'vmci',
                      'vmhgfs',
                      'vmsync',
                      'vmxnet',
                      'vsock'):
                module = os.path.basename(m)
                modsrc = 'open-vm-tools-%(ovmtoolsver)s/modules/linux/' + module + '/'
                r.Run('make -C %(builddir)s SUBDIRS=$PWD SRCROOT=$PWD/.'
                      ' MODULEBUILDDIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s/modules/linux'
                      ' OVT_SOURCE_DIR=%(builddir)s/open-vm-tools-%(ovmtoolsver)s',
                      ' VM_KBUILD=26'
                      ' modules',
                      dir=modsrc)
                kmod = module + '.ko'
                r.Install(modsrc + kmod, '%(kmoddir)s/extra/open-vm-tools/' + m + '/' + kmod,
                          package=':vmware')

