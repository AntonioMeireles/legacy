#
# Patches under review and/or pending inclusion in the linux1394-git
# tree (and/or in by the time your read this), which we want...
#

Date: Fri, 26 Sep 2008 16:35:45 -0400
From: Jay Fenlason <fenlason@redhat.com>
Subject: [Patch] fix two resource allocation bugs in fw-cdev.c

Bug #1: the resource_handle used to number resources will eventually
wrap, potentially resulting in two resources having the same handle.
This will lead to a system crash when the wrong resource is freed.

A better fix for this bug would be to use the idr functions rather
than keeping a linked list of resources.  I will include that in a
future patch.

Bug #2: the release_client_resource() function does not check the type
of the resource it is being asked to free.  Because the handle numbers
can come directly from userspace, a malicious or buggy program may
free resources that it shouldn't, possibly causing a program crash.

Signed-off-by: Jay Fenlason <fenlason@redhat.com>

--

 fw-cdev.c |   32 +++++++++++++++++++++++++-------
 1 file changed, 25 insertions(+), 7 deletions(-)

diff -rup linux-2.6/drivers/firewire/fw-cdev.c linux-2.6.firewire/drivers/firewire/fw-cdev.c
--- linux-2.6/drivers/firewire/fw-cdev.c	2008-09-22 14:56:02.000000000 -0400
+++ linux-2.6.firewire/drivers/firewire/fw-cdev.c	2008-09-25 16:13:00.000000000 -0400
@@ -77,7 +77,6 @@ struct client {
 	u32 version;
 	struct fw_device *device;
 	spinlock_t lock;
-	u32 resource_handle;
 	struct list_head resource_list;
 	struct list_head event_list;
 	wait_queue_head_t wait;
@@ -321,13 +320,32 @@ add_client_resource(struct client *clien
 	unsigned long flags;
 
 	spin_lock_irqsave(&client->lock, flags);
-	list_add_tail(&resource->link, &client->resource_list);
-	resource->handle = client->resource_handle++;
+	if (list_empty(&client->resource_list)
+	    || list_first_entry(&client->resource_list,
+				struct client_resource,
+				link)->handle > 0) {
+		resource->handle = 0;
+		list_add(&resource->link, &client->resource_list);
+	} else {
+		struct client_resource *c_tmp, *c_tmp2;
+
+		c_tmp2 = NULL;
+		list_for_each_entry(c_tmp, &client->resource_list,
+				    link) {
+			if (c_tmp2 && c_tmp->handle != c_tmp2->handle+1)
+				break;
+			c_tmp2 = c_tmp;
+		}
+		BUG_ON(c_tmp2 == NULL);
+		resource->handle = c_tmp2->handle+1;
+		list_add(&resource->link, &c_tmp2->link);
+	}
 	spin_unlock_irqrestore(&client->lock, flags);
 }
 
 static int
 release_client_resource(struct client *client, u32 handle,
+			void (*func)(struct client *client, struct client_resource *r),
 			struct client_resource **resource)
 {
 	struct client_resource *r;
@@ -335,7 +353,7 @@ release_client_resource(struct client *c
 
 	spin_lock_irqsave(&client->lock, flags);
 	list_for_each_entry(r, &client->resource_list, link) {
-		if (r->handle == handle) {
+		if (r->handle == handle && r->release == func) {
 			list_del(&r->link);
 			break;
 		}
@@ -555,7 +573,7 @@ static int ioctl_deallocate(struct clien
 {
 	struct fw_cdev_deallocate *request = buffer;
 
-	return release_client_resource(client, request->handle, NULL);
+	return release_client_resource(client, request->handle, release_address_handler, NULL);
 }
 
 static int ioctl_send_response(struct client *client, void *buffer)
@@ -564,7 +582,7 @@ static int ioctl_send_response(struct cl
 	struct client_resource *resource;
 	struct request *r;
 
-	if (release_client_resource(client, request->handle, &resource) < 0)
+	if (release_client_resource(client, request->handle, release_request, &resource) < 0)
 		return -EINVAL;
 	r = container_of(resource, struct request, resource);
 	if (request->length < r->length)
@@ -646,7 +664,7 @@ static int ioctl_remove_descriptor(struc
 {
 	struct fw_cdev_remove_descriptor *request = buffer;
 
-	return release_client_resource(client, request->handle, NULL);
+	return release_client_resource(client, request->handle, release_descriptor, NULL);
 }
 
 static void

----------------------
Date: Wed, 22 Oct 2008 15:59:42 -0400
From: Jay Fenlason <fenlason@redhat.com>
Subject: firewire: typo in comment

Signed-off-by: Jay Fenlason <fenlason@redhat.com>
diff -upr linux-2.6/drivers/firewire/fw-card.c linux-2.6.fw/drivers/firewire/fw-card.c
--- linux-2.6/drivers/firewire/fw-card.c	2008-10-07 11:26:15.000000000 -0400
+++ linux-2.6.fw/drivers/firewire/fw-card.c	2008-10-22 14:40:14.000000000 -0400
@@ -76,7 +76,7 @@ generate_config_rom(struct fw_card *card
 	 * controller, block reads to the config rom accesses the host
 	 * memory, but quadlet read access the hardware bus info block
 	 * registers.  That's just crack, but it means we should make
-	 * sure the contents of bus info block in host memory mathces
+	 * sure the contents of bus info block in host memory matches
 	 * the version stored in the OHCI registers.
 	 */
 
