Gitweb:     http://git.kernel.org/git/?p=linux/kernel/git/torvalds/linux-2.6.git;a=commit;h=17bd9a2f4c35de29d2539a2ff6851d61be281e25
Commit:     17bd9a2f4c35de29d2539a2ff6851d61be281e25
Parent:     b55d1b1814c52463c11707f53dbdc223e09b2924
Author:     Geert Uytterhoeven <geert@linux-m68k.org>
AuthorDate: Mon Oct 29 21:21:37 2007 +0100
Committer:  Jeff Garzik <jeff@garzik.org>
CommitDate: Sun Nov 4 22:53:15 2007 -0500

    libata and bogus LBA48 drives
    
    A colleague noticed recent versions of Ubuntu no longer detect his 80 GB
    ST380020ACE drive. This drive is special in that it advertises LBA48 support,
    but has the lba_capacity_2 field set to zero (cfr.
    http://lkml.org/lkml/2004/3/30/163).
    
    Upon closer look, libata indeed doesn't seem to handle this case yet.
    Below is an (untested) fix.
    
    Signed-off-by: Jeff Garzik <jeff@garzik.org>

    bz f8#429364
---
 include/linux/ata.h |   10 +++++++++-
 1 file changed, 9 insertions(+), 1 deletion(-)

--- linux-2.6.23.noarch.orig/include/linux/ata.h
+++ linux-2.6.23.noarch/include/linux/ata.h
@@ -348,7 +348,6 @@ struct ata_taskfile {
 #define ata_id_has_fua(id)	((id)[84] & (1 << 6))
 #define ata_id_has_flush(id)	((id)[83] & (1 << 12))
 #define ata_id_has_flush_ext(id) ((id)[83] & (1 << 13))
-#define ata_id_has_lba48(id)	((id)[83] & (1 << 10))
 #define ata_id_has_hpa(id)	((id)[82] & (1 << 10))
 #define ata_id_has_wcache(id)	((id)[82] & (1 << 5))
 #define ata_id_has_pm(id)	((id)[82] & (1 << 3))
@@ -370,6 +369,15 @@ struct ata_taskfile {
 
 #define ata_id_cdb_intr(id)	(((id)[0] & 0x60) == 0x20)
 
+static inline int ata_id_has_lba48(const u16 *id)
+{
+	if ((id[83] & 0xC000) != 0x4000)
+		return 0;
+	if (!ata_id_u64(id, 100))
+		return 0;
+	return id[83] & (1 << 10);
+}
+
 static inline unsigned int ata_id_major_version(const u16 *id)
 {
 	unsigned int mver;
