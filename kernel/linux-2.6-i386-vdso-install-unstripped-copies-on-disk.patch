From: Roland McGrath <roland@redhat.com>

This keeps an unstripped copy of the vDSO images built before they are
stripped and embedded in the kernel.  The unstripped copies get installed in
$(MODLIB)/vdso/ by "make install".  These files can be useful when they
contain source-level debugging information.

Signed-off-by: Roland McGrath <roland@redhat.com>
Cc: Sam Ravnborg <sam@ravnborg.org>
Cc: Andi Kleen <ak@suse.de>
Signed-off-by: Andrew Morton <akpm@linux-foundation.org>
---

 arch/x86/Makefile        |    1 +
 arch/x86/kernel/Makefile_32 |   27 ++++++++++++++++++++++-----
 2 files changed, 23 insertions(+), 5 deletions(-)

diff -puN arch/x86/Makefile_32~i386-vdso-install-unstripped-copies-on-disk arch/x86/Makefile_32
--- a/arch/x86/Makefile_32~i386-vdso-install-unstripped-copies-on-disk
+++ a/arch/x86/Makefile_32
@@ -152,9 +152,12 @@ zdisk bzdisk: vmlinux
 fdimage fdimage144 fdimage288 isoimage: vmlinux
 	$(Q)$(MAKE) $(build)=$(boot) BOOTIMAGE=$(KBUILD_IMAGE) $@
 
-install:
+install: vdso_install
 	$(Q)$(MAKE) $(build)=$(boot) BOOTIMAGE=$(KBUILD_IMAGE) install
 
+vdso_install:
+	$(Q)$(MAKE) $(build)=arch/x86/kernel vdso_install
+
 archclean:
 	$(Q)rm -rf $(objtree)/arch/i386/boot
 	$(Q)$(MAKE) $(clean)=arch/x86/boot

diff -puN arch/x86/kernel/Makefile_32~i386-vdso-install-unstripped-copies-on-disk arch/x86/kernel/Makefile_32
--- a/arch/x86/kernel/Makefile_32~i386-vdso-install-unstripped-copies-on-disk
+++ a/arch/x86/kernel/Makefile_32
@@ -54,6 +54,8 @@ obj-$(CONFIG_SCx200)		+= scx200_32.o
 # Note: kbuild does not track this dependency due to usage of .incbin
 $(obj)/vsyscall_32.o: $(obj)/vsyscall-int80_32.so $(obj)/vsyscall-sysenter_32.so
 targets += $(foreach F,int80 sysenter,vsyscall-$F_32.o vsyscall-$F_32.so)
+targets += $(foreach F,$(patsubst %,vsyscall-%_32,int80 sysenter),\
+		     $F.o $F.so $F.so.dbg)
 targets += vsyscall-note_32.o vsyscall_32.lds
 
 # The DSO images are built using a special linker script.
@@ -63,16 +65,32 @@ quiet_cmd_syscall = SYSCALL $@
 
 export CPPFLAGS_vsyscall_32.lds += -P -C -Ui386
 
-vsyscall-flags = -shared -s -Wl,-soname=linux-gate.so.1 \
+vsyscall-flags = -shared -Wl,-soname=linux-gate.so.1 \
 		 $(call ld-option, -Wl$(comma)--hash-style=sysv)
-SYSCFLAGS_vsyscall-sysenter_32.so	= $(vsyscall-flags)
-SYSCFLAGS_vsyscall-int80_32.so	= $(vsyscall-flags)
+SYSCFLAGS_vsyscall-sysenter_32.so.dbg	= $(vsyscall-flags)
+SYSCFLAGS_vsyscall-int80_32.so.dbg	= $(vsyscall-flags)
 
-$(obj)/vsyscall-int80_32.so $(obj)/vsyscall-sysenter_32.so: \
-$(obj)/vsyscall-%.so: $(src)/vsyscall_32.lds \
+$(obj)/vsyscall-int80_32.so.dbg $(obj)/vsyscall-sysenter_32.so.dbg: \
+$(obj)/vsyscall-%.so.dbg: $(src)/vsyscall_32.lds \
 		      $(obj)/vsyscall-%.o $(obj)/vsyscall-note_32.o FORCE
 	$(call if_changed,syscall)
 
+$(obj)/%.so: OBJCOPYFLAGS := -S
+$(obj)/%.so: $(obj)/%.so.dbg FORCE
+	$(call if_changed,objcopy)
+
+vdsos := vdso-int80.so vdso-sysenter.so
+
+quiet_cmd_vdso_install = INSTALL $@
+      cmd_vdso_install = cp $(@:vdso-%.so=$(obj)/vsyscall-%_32.so.dbg) \
+			    $(MODLIB)/vdso/$@
+
+$(vdsos):
+	@mkdir -p $(MODLIB)/vdso
+	$(call cmd,vdso_install)
+
+vdso_install: $(vdsos)
+
 # We also create a special relocatable object that should mirror the symbol
 # table and layout of the linked DSO.  With ld -R we can then refer to
 # these symbols in the kernel code rather than hand-coded addresses.
