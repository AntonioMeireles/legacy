#
# Copyright (c) 2004-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
class Utillinux(RPMPackageRecipe,CPackageRecipe):
    name = 'util-linux'
    version = '2.14.1'
    rpmRelease = '3.fc10'
    rpmName = '%(name)s-ng'
    tarballName = '%(name)s-ng-%(version)s.tar.bz2'
    rpmPatches = [
        # 91174 - Patch to enabled remote service for login/pam
        'util-linux-ng-2.13-login-pamstart.patch',
        # RHEL/Fedora specific mount options
        'util-linux-ng-2.14-mount-managed.patch',
        # add note about ATAPI IDE floppy to fdformat.8
        'util-linux-ng-2.13-fdformat-man-ide.patch',
        # 151635 - makeing /var/log/lastlog
        'util-linux-ng-2.13-login-lastlog.patch',
        # 199745 - Non-existant simpleinit(8) mentioned in ctrlaltdel(8)
        'util-linux-ng-2.13-ctrlaltdel-man.patch',
        # 218915 - fdisk -b 4K (move to upstream?)
        'util-linux-ng-2.13-fdisk-b-4096.patch',
        # 231192 - ipcs is not printing correct values on pLinux
        'util-linux-ng-2.13-ipcs-32bit.patch',
        # remove partitions
        'util-linux-ng-2.14-blockdev-rmpart.patch',
        # 390691: mount should check selinux context on mount, and warn on file_t
        'util-linux-ng-2.14-mount-file_t.patch',
        # 465761: mount manpage is missing uid/gid mount options for tmpfs (upstream patch)
        'util-linux-ng-2.14-mount-man-tmpfs.patch',
        ]
    rpmSources = [ 'nologin.c', 'nologin.8' ]
    rpmArchives = ['floppy-0.16.tar.bz2']
    buildRequires = [ 'e2fsprogs:devel', 'install-info:runtime',
                      'libtermcap:devel', 'ncurses:devel', 'slang:devel', 'gettext:devel',
                      'texinfo:runtime', 'zlib:devel', 'audit:devel', 'perl:runtime',
                      'perl:lib', 'automake:runtime', 'autoconf:runtime', 'pam:devel',
                      'userspace-kernel-headers:devel', 'gettext:runtime',
                      'e2fsprogs:runtime', 'intltool:runtime', 'udev:devel'
                      ]

    def setup(r):
        RPMPackageRecipe.unpack(r)
        r.macros.upver = r.version.replace('_', '-')

        r.addSource('util-linux-login.pamd', dest='%(sysconfdir)s/pam.d/login')
        r.addSource('util-linux-remote.pamd', dest='%(sysconfdir)s/pam.d/remote')
        r.addSource('util-linux-ng-chsh-chfn.pamd', rpm=r.srpm, dest='%(sysconfdir)s/pam.d/chsh-chfn')

        r.addSource('mkinstalldirs')

        r.addPatch('po_Makefile.in.in.mkinstalldirs')

        r.Automake(autoMakeArgs='-a')
        # note: we disable tty group (USE_TTY_GROUP) in Makefiles to prevent call chgrp
        # during the "make install". But we define -DUSE_TTY_GROUP that enable tty groups in
        # *.c files only.
        r.macros.cflags += ' -DUSE_TTY_GROUP'
        r.ManualConfigure('--bindir=%(essentialbindir)s '
                          '--sbindir=%(essentialsbindir)s '
                          '--sysconfdir=%(sysconfdir)s '
                          '--datadir=%(datadir)s '
                          '--includedir=%(includedir)s '
                          '--libdir=%(libdir)s '
                          '--libexecdir=%(libexecdir)s '
                          '--localstatedir=%(localstatedir)s '
                          '--sharedstatedir=%(sharedstatedir)s '
                          '--mandir=%(mandir)s '
                          '--infodir=%(infodir)s '
                          '--disable-use-tty-group '
                          '--disable-wall '
                          '--enable-partx '
                          '--enable-login-utils '
                          '--enable-kill '
                          '--enable-raw '
                          '--enable-write')
        # note: we install to /bin and /usr/bin, so there's $bindir and $usrbindir in
        # util-linux build system. It's better follow package build-system than recipe
        # macros (where is prefix=/usr)
        r.Make(
            'OPT="%(cflags)s -D_LARGEFILE_SOURCE -D_LARGEFILE64_SOURCE -D_FILE_OFFSET_BITS=64"'
            'LDFLAGS="%(ldflags)s" HAVE_PIVOT_ROOT=yes')
        r.Run('%(cc)s %(cflags)s -o nologin nologin.c')
        r.Run('cd sys-utils; makeinfo --number-sections ipc.texi')
        r.MakeInstall(preMake='INSTALLDIR="install -d -m 755"'
                              ' INSTALLSUID="install -m 755"'
                              ' INSTALLBIN="install -m 755"'
                              ' INSTALLMAN="install -m 644"'
                              ' MKINSTALLDIRS=%(builddir)s/mkinstalldirs')
        r.Install('mount/pivot_root', '%(essentialsbindir)s/', mode=0755)
        r.Install('mount/pivot_root.8', '%(mandir)s/man8/', mode=0644)
        r.Install('nologin', '%(essentialsbindir)s/', mode=0755)
        r.Install('nologin.8', '%(mandir)s/man8/', mode=0644)
        r.Symlink('raw.8', '%(mandir)s/man8/rawdevices.8')
        r.Symlink('%(essentialsbindir)s/clock', '%(sbindir)s/clock'),
        r.Symlink('hwclock', '%(essentialsbindir)s/clock'),
        r.Symlink('%(essentialbindir)s/kill', '%(bindir)s/kill'),

        # A few su/gid programs
        r.SetModes('%(bindir)s/{ch{fn,sh},newgrp}', 04755)
        r.SetModes('%(bindir)s/write', 02755)
        r.SetModes('%(essentialbindir)s/{mount,umount}', 04755)
        # maked "deprecated"
        r.Remove('%(bindir)s/{pg,line}', '%(mandir)s/man1/{pg,line}.1')
        # conflicts with schedutils
        r.Remove('/usr/bin/{chrt,taskset}')
        # mkcramfs link needed for anaconda:
        r.Symlink('%(essentialsbindir)s/mkfs.cramfs', '%(essentialbindir)s/mkcramfs')

        r.Requires(exceptions='%(datadir)s/getopt/.*')
        r.TagSpec('shell', '%(essentialsbindir)s/nologin')

        r.ComponentSpec('perl', '%(essentialbindir)s/(scriptreplay|chkdupexe)')

        # RPL-1178
        for x in ('ddate', 'ctrlaltdel',):
            r.RemoveNonPackageFiles('.*%s.*'%x)
        for x in ('ul', 'cfdisk', 'setfdperm', 'isosize', 'minix', 'bfs',
                  'write', 'tailf',):
            r.PackageSpec('util-linux-extras', '.*%s.*'%x)

        # setarch as standalone package/recipe goes the way of the dodo...
        for x in ('setarch', 'linux32', 'linux64', 'i386'):
            r.PackageSpec('setarch', '.*%s.*'%x)
