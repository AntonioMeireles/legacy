#
# Copyright (c) 2006-2007 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
loadInstalled('xulrunner')
class NsPluginwrapper(RPMPackageRecipe,AutoPackageRecipe):
    name = 'nspluginwrapper'
    version = '0.9.91.5'
    rpmRelease = '14.fc9'
    rpmURL = 'http://koji.fedoraproject.org/packages/%(name)s/%(version)s/%(rpmRelease)s/src/'

    buildRequires = [ 'glib:devel', 'gtk:devel', 'libX11:devel', 'libXt:devel',
                      'zlib:devel', 'expat:devel', 'nspr:devel', 'gcc-c++:runtime',
                      'GConf:runtime', 'pkgconfig:devel', 'which:runtime',
                      'xextproto:devel', 'firefox:devel', 'xulrunner:devel',
                      'firefox:runtime',
                      ]

    rpmPatches = [ 'nspluginwrapper-0.9.91.5-rpc-error.patch',
                   'nspluginwrapper-0.9.91.5-restart.patch',
                   'nspluginwrapper-0.9.91.5-rh.patch',
                   'nspluginwrapper-0.9.91.5-runtime-restart.patch',
                   'nspluginwrapper-0.9.91.5-fork.patch',
                   'nspluginwrapper-0.9.91.5-xulrunner.patch',
                   'plugin-config-setuid.patch'
                   ]

    rpmArchives = ['plugin-config-1.8.tar.gz']
    
    # This is x86_64 ONLY

    def configure(r):
        r.addSource('plugin-config.sh.in', rpm=r.srpm)
        r.addSource('%(name)s.sh.in', rpm=r.srpm)

        # Define libraries for 32/64 arches
        r.macros.lib32 = 'lib'
        r.macros.lib64 = 'lib64'
        r.macros.libdir32 = '%(prefix)s/%(lib32)s'

        # define mozilla plugin dir and back up dir for 64-bit browsers
        r.macros.pluginsourcedir = '%(libdir)s/xulrunner/plugins'
        r.macros.plugindir = '%(libdir)s/xulrunner/plugins-wrapped'
        if Arch.x86:
            r.macros.cflags += ' -m32 '
            r.macros.ldflags += '-m32 -L%(libdir)s'
        else:
            r.macros.cflags += ' -m64 '
            r.macros.ldflags += '-m64 -L%(libdir)s'

        r.Environment('XPCOM_SUPPORT',"yes")


        # remove old/incompatibile stuff
        r.Remove('npapi', recursive = True)
        r.Remove('lsb-build', recursive = True)

        if Arch.x86:
            r.Configure(' --with-lib64=%(lib64)s'
                        ' --with-base-lib=%(lib32)s'
                        ' --with-base-libdir=%(libdir)s'
                        ' --with-lib32=%(lib32)s'
                        ' --with-x11-prefix=%(prefix)s'
                        ' --pkgdir=%(name)s'
                        ' --pkglibdir=%(libdir)s/%(name)s'
                        ' --target-cpu=i386')
        else:
                        r.Configure(' --with-lib64=%(lib64)s'
                        ' --with-base-lib=%(lib64)s'
                        ' --with-base-libdir=%(libdir)s'
                        ' --with-lib32=%(lib32)s'
                        ' --with-x11-prefix=%(prefix)s'
                        ' --pkgdir=%(name)s'
                        ' --pkglibdir=%(libdir)s/%(name)s'
                        ' --target-cpu=x86_64')

        r.macros.plugin_config_version = '1.8'
        r.macros.plugin_config_name= 'plugin-config-%(plugin_config_version)s'
        r.macros.plugin_config_binary = 'plugin-config'

        r.Configure(dir='%(plugin_config_name)s')

    def make(r):
        r.Make()
        r.Make(dir='%(plugin_config_name)s')

    def makeinstall(r):
        r.MakeInstall()
        r.MakeInstall(dir='%(plugin_config_name)s')

        r.MakeDirs('%(plugindir)s')
        r.MakeDirs('%(libdir)s/%(name)s')
        r.Symlink('%(libdir)s/%(name)s/npwrapper.so', '%(plugindir)s/')
        r.Move('%(bindir)s/%(plugin_config_binary)s', '%(libdir)s/%(name)s/%(plugin_config_binary)s')
        r.Remove('/usr/doc', recursive=True)

        r.macros.xulrunnerVersion = XULRunner.version

        r.Replace(('FIREFOX_VERSION','%(xulrunnerVersion)s'),
                  ('USE_XPCOM', '0' ),
                  ('-1.8.1.4',''),
                  'plugin-config.sh.in')

        r.Install('plugin-config.sh.in', '%(bindir)s/mozilla-plugin-config', mode = 0755)

        r.Replace('EXCLUDE_LIST', '\"libtotem-*\"', '%(name)s.sh.in')
        r.Install('%(name)s.sh.in', '%(sysconfdir)s/sysconfig/%(name)s', mode = 0644)

        r.Symlink('%(libdir)s/xulrunner/plugins-wrapped', '%(libdir)s/mozilla/plugins-wrapped')

        r.Requires('soname: %(libdir)s/xulrunner/libxul.so',
                   '%(libdir)s/')

        r.addSource('moz.global.env.vars.sh', dest = '%(sysconfdir)s/profile.d/', mode = 0755)

