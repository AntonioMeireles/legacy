#
# Copyright (c) 2006-2008 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#

loadSuperClass('rpmpackage')
loadInstalled('xulrunner')
class NsPluginwrapper(RPMPackageRecipe,AutoPackageRecipe):
    name = 'nspluginwrapper'
    version = '1.1.0'
    rpmRelease = '6.fc10'

    buildRequires = [ 'glib:devel', 'gtk:devel', 'libX11:devel', 'libXt:devel',
                      'zlib:devel', 'expat:devel', 'nspr:devel', 'gcc-c++:runtime',
                      'GConf:runtime', 'pkgconfig:devel', 'which:runtime',
                      'xextproto:devel', 'xulrunner:devel', 'alsa-plugins:devellib',
                      'curl:devel', 'openssl:devel'
                      ]

    rpmPatches = [ 'nspluginwrapper-1.1.0-build.patch',
                   'nspluginwrapper-1.1.0-runtime-restart.patch',
                   'nspluginwrapper-1.1.0-fork.patch',
                   'nspluginwrapper-0.9.91.5-shutdown.patch',
                   'nspluginwrapper-0.9.91.5-sleep.patch',
                   'nspluginwrapper-1.1.0-visual-id.patch'
                   ]
    
    plugin_config_version = '1.9'
    rpmArchives = ['plugin-config-%s.tar.gz' % plugin_config_version]

    def configure(r):
        r.addSource('plugin-config.sh.in', rpm=r.srpm)
        r.addSource('%(name)s.sh.in', rpm=r.srpm)

        r.addPatch('plugin-config-setuid.patch' , rpm=r.srpm, dir = '%(plugin_config_name)s')

        # Define libraries for 32/64 arches
        r.macros.lib32 = 'lib'
        r.macros.lib64 = 'lib64'
        r.macros.libdir32 = '%(prefix)s/%(lib32)s'

        # define mozilla plugin dir and back up dir for 64-bit browsers
        r.macros.pluginsourcedir = '%(libdir)s/mozilla/plugins'
        r.macros.plugindir = '%(libdir)s/mozilla/plugins-wrapped'
        if Arch.x86:
            r.macros.cflags += ' -m32 '
            r.macros.ldflags += '-m32 -L%(libdir)s'
        else:
            r.macros.cflags += ' -m64 '
            r.macros.ldflags += '-m64 -L%(libdir)s'

        # remove old/incompatibile stuff
        r.Remove('npapi', recursive = True)
        r.Remove('lsb-build', recursive = True)

        if Arch.x86:
            r.Configure( ' --with-lib64=%(lib64)s'
                         ' --with-base-lib=%(lib32)s'
                         ' --with-base-libdir=%(libdir)s'
                         ' --with-lib32=%(lib32)s'
                         ' --with-x11-prefix=%(prefix)s'
                         ' --pkgdir=%(name)s'
                         ' --pkglibdir=%(libdir)s/%(name)s'
                         ' --with-xpcom=no'
                         ' --target-cpu=i386'
                         ' --with-gecko=mozilla'
                         )
        else:
            r.Configure( ' --with-lib64=%(lib64)s'
                         ' --with-base-lib=%(lib64)s'
                         ' --with-base-libdir=%(libdir)s'
                         ' --with-lib32=%(lib32)s'
                         ' --with-x11-prefix=%(prefix)s'
                         ' --pkgdir=%(name)s'
                         ' --pkglibdir=%(libdir)s/%(name)s'
                         ' --with-xpcom=no'
                         ' --target-cpu=x86_64'
                         ' --with-gecko=mozilla'
                         )

        # FIXME - simplify this
        r.macros.plugin_config_version = r.plugin_config_version
        r.macros.plugin_config_binary = 'plugin-config'
        r.macros.plugin_config_name= '%(plugin_config_binary)s-%(plugin_config_version)s'

        r.Configure(dir='%(plugin_config_name)s')

    def make(r):
        r.Make()
        r.Make(dir='%(plugin_config_name)s')

    def makeinstall(r):
        r.MakeInstall()
        r.MakeInstall(dir='%(plugin_config_name)s')

        r.MakeDirs('%(plugindir)s')
        r.MakeDirs('%(libdir)s/%(name)s')
        r.Symlink('%(libdir)s/%(name)s/npwrapper.so', '%(plugindir)s/')
        r.Move('%(bindir)s/%(plugin_config_binary)s', '%(libdir)s/%(name)s/%(plugin_config_binary)s')
        r.Remove('/usr/doc', recursive=True)

        r.SetModes('%(libdir)s/nspluginwrapper/plugin-config', 04755)

        r.Install('plugin-config.sh.in', '%(bindir)s/mozilla-plugin-config', mode = 0755)

        r.Replace('EXCLUDE_LIST', '\"libtotem*:libjavaplugin*:gecko-mediaplayer*:mplayerplug-in*\"', '%(name)s.sh.in')
        r.Install('%(name)s.sh.in', '%(sysconfdir)s/sysconfig/%(name)s', mode = 0644)

        r.Requires('soname: libxul.so',  '%(libdir)s/')

        r.Requires('soname: %(libdir)s/alsa-lib/libasound_module_pcm_pulse.so',
                   '%(libdir)s/')

        r.Requires('setarch:runtime', '%(bindir)s/mozilla-plugin-config')
        r.Requires('mozilla-filesystem:runtime', '%(bindir)s/mozilla-plugin-config')

        r.addSource('moz.global.env.vars.sh', dest = '%(sysconfdir)s/profile.d/', mode = 0755)

        r.ComponentSpec('lib', '%(libdir)s/.*' )
        r.ComponentSpec('runtime', '%(bindir)s/.*' )
        r.ComponentSpec('runtime', '%(sysconfdir)s/.*' )

        if Arch.x86_64:
            # FIXME: find a better way, if any
            r.addSource('%(name)s.tagdescription', macros=True,
                        dest='%(tagdescriptiondir)s/%(name)s')
            r.addSource('%(name)s.taghandler', macros=True,
                        dest='%(taghandlerdir)s/%(name)s', mode=0755)

            r.Requires('file: %(bindir)s/mozilla-plugin-config', '%(taghandlerdir)s/%(name)s')
            r.TagSpec('%(name)s', '%(bindir)s/mozilla-plugin-config')
            r.TagSpec('%(name)s', '/usr/lib/mozilla/plugins/.*')

        if Arch.x86:
            r.Remove('%(sysconfdir)s', recursive=True)
            r.Remove('%(bindir)s', recursive=True)
            r.Remove('%(datadir)s', recursive=True)
            # Docs only in one side
            r.AutoDoc(exceptions = '.*')
