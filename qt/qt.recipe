#
# Copyright (c) 2006-2007 rPath, Inc.
# This file is distributed under the terms of the MIT License.
# A copy is available at http://www.rpath.com/permanent/mit-license.html
#


class Qt(AutoPackageRecipe):
    name = 'qt'
    version = '3.3.7'

    buildRequires = [ 'byacc:runtime', 'fontconfig:devel',
        'freetype:devel', 'zlib:devel', 'libpng:devel', 'libjpeg:devel',
        'libmng:devel', 'libstdc++:devel', 'Mesa:devel', 'libXmu:devel',
        'libICE:devel', 'libSM:devel', 'libX11:devel', 'libXcursor:devel',
        'libXext:devel', 'libXft:devel', 'libXi:devel', 'libXt:devel',
        'libXinerama:devellib', 'libXrandr:devel', 'libXrender:devel', ]

    #Don't enable cups or odbc in rpl:devel until the build loops can be resolved
    Flags.cups       = False
    Flags.odbc       = False
    Flags.postgresql = True
    Flags.mysql      = True
    Flags.nis        = False
    Flags.sqlite     = True
    Flags.nas        = True

    if Flags.mysql:
        buildRequires.append('mysql:devel')
    if Flags.postgresql:
        buildRequires.append('postgresql:devel')
    if Flags.odbc:
        buildRequires.append('unixODBC:devel')
    if Flags.cups:
        buildRequires.append('cups:devel')
    if Flags.nas:
        buildRequires.append('nas:devel')

    def unpack(r):

        if r.macros.lib == 'lib64':
            r.macros.platform = 'linux-g++-64'
        else:
            r.macros.platform = 'linux-g++'

        r.macros.qt = 'qt3'

        r.addArchive('ftp://ftp.trolltech.com/qt/source/qt-x11-free-%(version)s.tar.bz2')
        r.addSource('qmake_env.conf')
        r.addPatch('qt-fix_ftbfs_amd64.patch')
        r.addSource('qtrc', dir='%(sysconfdir)s/qt/')

        r.Replace(('^QMAKE_CC\t.*',          'QMAKE_CC\t\t= %(cc)s'),
                  ('^QMAKE_CXX\t.*',         'QMAKE_CXX\t\t= %(cxx)s'),
                  ('^QMAKE_LINK\t.*',        'QMAKE_LINK\t\t= %(cxx)s'),
                  ('^QMAKE_LINK_SHLIB\t.*',  'QMAKE_LINK_SHLIB\t= %(cxx)s'),
                  ('^QMAKE_CFLAGS\t.*',      'QMAKE_CFLAGS\t\t= %(cflags)s'),
                  ('^QMAKE_CXXFLAGS\t.*',    'QMAKE_CXXFLAGS\t\t= %(cflags)s %(cxxflags)s'),
                  ('^QMAKE_RPATH\t.*',       'QMAKE_RPATH\t\t='),
                  'mkspecs/linux-{g++,g++-64}/qmake.conf')

        r.Replace('read acceptance$', 'acceptance=yes', 'configure')

        # fix broken symlink
        r.Replace('ln -s -f @QMAKESPEC@', 'cp -f @QMAKESPEC@', 'qmake/Makefile.unix')

        r.Replace(('/usr/lib', '%(libdir)s',),('/lib64', '%(essentiallibdir)s'),
            'config.tests/{unix,x11}/*.test',
            'config.tests/unix/checkavail', allowNoChange=True)

    def configure(r):

        r.preVars = (' QTDIR=%(builddir)s'
                     ' YACC="byacc -d"'
                     ' PATH=$QTDIR/bin:$PATH'
                     ' LD_LIBRARY_PATH=$QTDIR/lib:$LD_LIBRARY_PATH')

        conf = '-v'
        conf += (' -prefix          %(prefix)s'
                ' -sysconfdir     %(sysconfdir)s/%(qt)s'
                ' -libdir         %(libdir)s'
                ' -datadir        %(datadir)s/%(qt)s'
                ' -headerdir      %(includedir)s/%(qt)s'
                ' -docdir         %(datadir)s/%(qt)s/doc'
                ' -plugindir      %(libdir)s/%(qt)s/plugins'
                ' -translationdir %(datadir)s/%(qt)s/translations')

        conf += (' -platform %(platform)s'
                 ' -no-nas-sound'
                 ' -debug'
                 ' -thread'
                 ' -shared'
                 ' -fast'
                 ' -no-exceptions'
                 ' -no-pch'
                 ' -stl'
                 ' -no-ipv6'
                 ' -no-nis'
                 ' -no-cups'
                 ' -nomake examples'
                 ' -nomake tutorial')

        if Flags.nis:
            conf = conf.replace('-no-nis', '-nis')
        if Flags.cups:
            conf = conf.replace('-no-cups', '-cups')
        if Use.ipv6:
            conf = conf.replace('-no-ipv6', '-ipv6')
        if Flags.nas:
            conf = conf.replace('-no-nas-sound', '-system-nas-sound')

        conf += (' -sm'
                 ' -xshape'
                 ' -xinerama'
                 ' -xcursor'
                 ' -xrandr'
                 ' -xrender'
                 ' -xft'
                 ' -tablet'
                 ' -xkb')

        conf += (' -system-zlib'
                 ' -system-libpng'
                 ' -system-libmng'
                 ' -system-libjpeg')

        conf += (' -enable-opengl'
                 ' -dlopen-opengl'
                 ' -qt-gif'
                 ' -qt-imgfmt-png'
                 ' -qt-imgfmt-jpeg'
                 ' -plugin-imgfmt-mng')

        conf += (' -no-sql-odbc'
                 ' -no-sql-psql'
                 ' -no-sql-mysql'
                 ' -no-sql-sqlite')

        conf += (' -I%(includedir)s'
                 ' -I%(includedir)s/freetype2'
                 ' -lfontconfig')

        if Flags.odbc:
            conf = conf.replace('-no-sql-odbc', '-plugin-sql-odbc')

        if Flags.postgresql:
            conf  = conf.replace('-no-sql-psql', '-plugin-sql-psql')
            conf += (' -I%(includedir)s/postgresql/server'
                     ' -I%(includedir)s/postgresql/pgsql'
                     ' -I%(includedir)s/postgresql/pgsql/server')

        if Flags.mysql:
            conf  = conf.replace('-no-sql-mysql', '-plugin-sql-mysql')
            conf += (' -I%(includedir)s/mysql'
                     ' -L%(libdir)s/mysql')

        if Flags.sqlite:
            conf = conf.replace('-no-sql-sqlite', '-plugin-sql-sqlite')

        r.Replace(' sub-tutorial sub-examples', '', 'Makefile')

        r.ManualConfigure(conf, preConfigure=r.preVars)

    def make(r):

        r.Make(preMake=r.preVars)
        r.Make(preMake=r.preVars, dir='tools/qvfb')
        r.Make(preMake=r.preVars, dir='tools/msg2qm')
        r.Make(preMake=r.preVars, dir='tools/designer/tools/conv2ui')
        r.Make(preMake=r.preVars, dir='tools/designer/tools/createcw')

        r.Replace(('^QMAKE_INCDIR_QT\t.*',   'QMAKE_INCDIR_QT\t\t= %(includedir)s/%(qt)s'),
                  ('^QMAKE_LIBDIR_QT\t.*',   'QMAKE_LIBDIR_QT\t\t= %(libdir)s'),
                  ('^QMAKE_MOC\t.*',         'QMAKE_MOC\t\t= %(bindir)s/moc'),
                  ('^QMAKE_UIC\t.*',         'QMAKE_UIC\t\t= %(bindir)s/uic'),
                  'mkspecs/linux-{g++,g++-64}/qmake.conf')

        r.Run("echo -e '\n#include ( qmake_env.conf )' >> "
              " 'mkspecs/linux-g++/qmake.conf'")
        r.Run("echo -e '\n#include ( qmake_env.conf )' >> "
              " 'mkspecs/linux-g++-64/qmake.conf'")

    def makeinstall(r):

        r.MakeDirs('%(sysconfdir)s/%(qt)s')

        r.MakePathsInstall('INSTALL_ROOT=%(destdir)s', preMake=r.preVars)

        r.Install('qmake_env.conf', '%(datadir)s/%(qt)s/mkspecs/')
        r.Install('doc/man/*', '%(mandir)s/')
        r.Install('bin/conv2ui', '%(bindir)s')
        r.Install('tools/qvfb/qvfb', '%(bindir)s')
        r.Install('tools/msg2qm/msg2qm', '%(bindir)s')
        r.Install('tools/designer/tools/createcw/createcw', '%(bindir)s')

        # We really need this! (
        r.Replace('%(builddir)s', '%(datadir)s/%(qt)s', '%(libdir)s/*.prl')

    def policy(r):
        r.Doc('examples')
        r.Doc('tutorial')
        r.Move('/usr/share/qt3/doc/*', '%(thisdocdir)s/')

        r.RemoveNonPackageFiles(exceptions='.*\.la')
        r.ExcludeDirectories(exceptions='%(sysconfdir)s/%(qt)s')

        r.ComponentSpec('qt-tools',
                        '%(bindir)s/(assistant|designer|createcw|conv2ui|linguist)',
                        '%(libdir)s/(libeditor|libdesignercore|libqassistantclient).*',
                        '%(libdir)s/%(qt)s/plugins/designer/',
                        '%(datadir)s/%(qt)s/(templates|phrasebooks)/',
                        '%(docdir)s/%(qt)s/html/(assistant|designer|linguist).*')

        r.ComponentSpec('locale', '%(datadir)s/%(qt)s/translations/')

        r.ComponentSpec('apidox', '%(datadir)s/%(qt)s/doc/')

        r.ComponentSpec('devel',
                        '%(bindir)s/(moc|qmake|lupdate|uic|lrelease|qm2ts|msg2qm)')

        r.ComponentSpec('develdoc',
                        '%(mandir)s/man3/',
                        '%(thisdocdir)s/(examples|tutorial)/')

        r.ComponentSpec('sqlite',   '%(libdir)s/%(qt)s/plugins/sqldrivers/libqsqlite.so')
        r.ComponentSpec('mysql',    '%(libdir)s/%(qt)s/plugins/sqldrivers/libqsqlmysql.so')
        r.ComponentSpec('odbc',     '%(libdir)s/%(qt)s/plugins/sqldrivers/libqsqlodbc.so')
        r.ComponentSpec('postgres', '%(libdir)s/%(qt)s/plugins/sqldrivers/libqsqlpsql.so')

