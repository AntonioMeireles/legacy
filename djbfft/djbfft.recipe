#
# Copyright (c) 2009 Filip Brcic <brcha@gna.org>
# Distributed under the terms of the GNU General Public License v3
#

class Djbfft(CPackageRecipe):
    name = 'djbfft'
    version = '0.76'

    buildRequires = []

    def setup(r):
    	r.Description(shortDesc='DJB FFT library',
                      longDesc='djbfft is an extremely fast library for floating-point convolution. djbfft provides power-of-2 complex FFTs, real FFTs at twice the speed, and fast multiplication of complex arrays. Single precision and double precision are equally supported. The djbfft algorithms may be up to twice as fast as the FFTW algorithms.')
	r.PackageURL('http://cr.yp.to/djbfft.html')
	r.Licenses('public-domain')
        r.addArchive('http://cr.yp.to/djbfft/')
        r.addPatch('djbfft-0.76-glibc2.4-1.patch')
        r.addPatch('djbfft-0.76-testsuite-1.patch')

        r.Replace('/usr/local/djbfft', '%(destdir)s%(prefix)s', 'conf-home')

        r.Replace('auto', 'ppro', 'conf-opt') # optimize for pentium pro (valid for 64bit as well)
        r.Run("""
        echo "%(cc)s %(cflags)s -fPIC -DPIC" > conf-cc
        echo "%(cc)s %(ldflags)s" > conf-ld
""")

        makeOpts = (
            ' LIBDJBFFT="libdjbfft.so.%(version)s"'
            ' LIBPERMS="0755"'
            )

        if Arch.x86_64:
            # First build 32bit version
            macros32 = r.macros.copy()
            macros32.cc = '"gcc -m32"'
            macros32.cxx = '"g++ -m32"'
            macros32.libdir = '%(prefix)s/lib'

            r.Run('cp -a %(builddir)s %(builddir)s/../32bit')

            r.Run("""
        echo "%(cc)s -m32 %(cflags)s -fPIC -DPIC" > ../32bit/conf-cc
        echo "%(cc)s -m32 %(ldflags)s" > ../32bit/conf-ld
""")

            r.Make(makeOpts, dir='../32bit', overrideMacros=macros32)

            r.TestSuite('../32bit', 'accuracy')
            r.TestSuite('../32bit', 'accuracy2')
            r.TestSuite('../32bit', 'speed')

            r.Make('setup check', dir='../32bit', overrideMacros=macros32)
            r.Symlink('%(prefix)s/lib/libdjbfft.so.%(version)s',
                      '%(prefix)s/lib/libdjbfft.so.0')
            r.Symlink('%(prefix)s/lib/libdjbfft.so.%(version)s',
                      '%(prefix)s/lib/libdjbfft.so')

            r.FixupMultilibPaths(exceptions='.*')

            r.Run("""sed -i 's@"lib@&64@' hier.c""") # prepare 64bit build

        r.Make(makeOpts)
        
        r.TestSuite('.', 'accuracy')
        r.TestSuite('.', 'accuracy2')
        r.TestSuite('.', 'speed')

        r.Make('setup check')
        r.Symlink('%(libdir)s/libdjbfft.so.%(version)s',
                  '%(libdir)s/libdjbfft.so.0')
        r.Symlink('%(libdir)s/libdjbfft.so.%(version)s',
                  '%(libdir)s/libdjbfft.so')
